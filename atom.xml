<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Colin's Nest]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://http://colin1994.github.io/"/>
  <updated>2016-03-16T09:35:40.000Z</updated>
  <id>http://http://colin1994.github.io/</id>
  
  <author>
    <name><![CDATA[Colin丶]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Jazzhands, 交互动画就是这么简单]]></title>
    <link href="http://http://colin1994.github.io/2016/03/16/%E4%BA%A4%E4%BA%92%E5%8A%A8%E7%94%BB%E5%B0%B1%E6%98%AF%E8%BF%99%E4%B9%88%E7%AE%80%E5%8D%95/"/>
    <id>http://http://colin1994.github.io/2016/03/16/交互动画就是这么简单/</id>
    <published>2016-03-16T09:11:00.000Z</published>
    <updated>2016-03-16T09:35:40.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p> <a href="https://github.com/IFTTT/JazzHands" target="_blank" rel="external">Jazz Hands</a>是IFTTT发布的一个基于关键帧的动画框架, 可以用于手势，滚动视图，KVO或者ReactiveCocoa, 十分方便。</p>
</blockquote>
<p>but, 到底有多方便呢 ?</p>
<p>看看官方给出的一个demo效果:</p>
<p><img src="http://7xkc7a.com1.z0.glb.clouddn.com/Jazzhandsjazzhands-demo.gif" alt="Jazzhandsjazzhands-demo"></p>
<a id="more"></a>
<p>如果 <code>设计</code> 要你做出这样一个效果的引导页, 有没有觉得头大 ?</p>
<p><img src="http://wanzao2.b0.upaiyun.com/system/pictures/54/original/8.png" alt="emoji"></p>
<p>然而, 在 <code>Jazzhands</code> 里, 我们需要做的, 就是规划好各个组件需要展示的时机以及对应的位置。中间的衔接动画, 完全交给 <code>Jazzhands</code> 去处理。 这样的感觉很爽有没有~ </p>
<p><img src="http://wanzao2.b0.upaiyun.com/system/pictures/789/original/%E9%87%91%E5%A4%A7%E7%88%B79.jpg" alt=""></p>
<p>然而, <code>Jazzhands</code> 具体为我们做了什么, 它是怎么做的 ?  它适用于哪些场景 ? 下文我们一一分析~</p>
<h2 id="Jazzhands原理分析">Jazzhands原理分析</h2><p>先看一下源工程目录: </p>
<p><img src="http://7xkc7a.com1.z0.glb.clouddn.com/Jazzhands4F254DBC-408A-4073-A73C-8CBABBC6D580.png" alt=""></p>
<p>这一大串看下来, 貌似很复杂, 实则不然。</p>
<p>我们可以简单的归为 三大类 文件来看。</p>
<ol>
<li><code>IFTTTAnimation, IFTTTAnimatable, IFTTTBackgroundColorAnimation, IFTTTAlphaAnimation …</code>  之类的动画类型。</li>
<li><code>IFTTTAnimator</code> 动画执行者</li>
<li><code>IFTTTAnimatedPagingScrollViewController, IFTTTAnimatedScrollViewController</code> 封装好的控制器类型。</li>
</ol>
<h3 id="动画类型">动画类型</h3><p>动画类型, 我们拿最简单的  <code>alpha</code> 变化动画来分析。 </p>
<p><code>IFTTTAlphaAnimation.m</code></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  IFTTTAlphaAnimation.m</span></span><br><span class="line"><span class="comment">//  JazzHands</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by Devin Foley on 9/27/13.</span></span><br><span class="line"><span class="comment">//  Copyright (c) 2013 IFTTT Inc. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#import <span class="meta-string">"IFTTTAlphaAnimation.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">IFTTTAlphaAnimation</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)addKeyframeForTime:(<span class="built_in">CGFloat</span>)time alpha:(<span class="built_in">CGFloat</span>)alpha</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (![<span class="keyword">self</span> validAlpha:alpha]) <span class="keyword">return</span>;</span><br><span class="line">    [<span class="keyword">self</span> addKeyframeForTime:time value:@(alpha)];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)addKeyframeForTime:(<span class="built_in">CGFloat</span>)time alpha:(<span class="built_in">CGFloat</span>)alpha withEasingFunction:(IFTTTEasingFunction)easingFunction</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (![<span class="keyword">self</span> validAlpha:alpha]) <span class="keyword">return</span>;</span><br><span class="line">    [<span class="keyword">self</span> addKeyframeForTime:time value:@(alpha) withEasingFunction:easingFunction];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">BOOL</span>)validAlpha:(<span class="built_in">CGFloat</span>)alpha</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSAssert</span>((alpha &gt;= <span class="number">0.</span>f) &amp;&amp; (alpha &lt;= <span class="number">1.</span>f), <span class="string">@"Alpha values must be between zero and one."</span>);</span><br><span class="line">    <span class="keyword">if</span> ((alpha &lt; <span class="number">0.</span>f) || (alpha &gt; <span class="number">1.</span>f)) <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)animate:(<span class="built_in">CGFloat</span>)time</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">self</span>.hasKeyframes) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">self</span>.view.alpha = (<span class="built_in">CGFloat</span>)[(<span class="built_in">NSNumber</span> *)[<span class="keyword">self</span> valueAtTime:time] floatValue];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<p><code>IFTTTAlphaAnimation</code> 基础自基类 <code>IFTTTAnimation</code> , 重写了对应的 </p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)addKeyframeForTime:(<span class="built_in">CGFloat</span>)time value:(<span class="keyword">id</span>&lt;IFTTTInterpolatable&gt;)value;</span><br><span class="line">- (<span class="keyword">void</span>)addKeyframeForTime:(<span class="built_in">CGFloat</span>)time value:(<span class="keyword">id</span>&lt;IFTTTInterpolatable&gt;)value withEasingFunction:(IFTTTEasingFunction)easingFunction;</span><br><span class="line">- (<span class="keyword">id</span>&lt;IFTTTInterpolatable&gt;)valueAtTime:(<span class="built_in">CGFloat</span>)time;</span><br></pre></td></tr></table></figure>
<p>这里所有的动画, 强调一个 <code>time - value</code> 键值对。 这也是关键帧动画的重点。</p>
<p>我们需要做的, 就是维护这样一个 <code>keyframes (NSMutableArray)</code> , 里面的元素代表一个个存储了位置的时刻。</p>
<p>以 <code>alpha</code> 动画为例, 这里的 <code>time</code> 就是对应的关键帧, <code>value</code> 就是对应的alpha值。</p>
<p>比如: </p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">   IFTTTAlphaAnimation *alphaAnimation = [IFTTTAlphaAnimation animationWithView:aView];</span><br><span class="line">   [alphaAnimation addKeyframeForTime:<span class="number">100</span> alpha:<span class="number">0.5</span>];</span><br><span class="line">.....</span><br></pre></td></tr></table></figure>
<p>这里表示了在 100 帧处, 他对应的 alpha 值是 0.5。</p>
<p>所以, 对于动画的设定, 我们需要做的就是:</p>
<ol>
<li>选择动画类型。 <code>IFTTTBackgroundColorAnimation, IFTTTAlphaAnimation …</code></li>
<li>添加关键帧。 <code>[alphaAnimation addKeyframeForTime:100 alpha:0.5];</code></li>
<li>把动画添加到执行者上面。 <code>[self.animator addAnimation:alphaAnimation];  (这个后面再介绍, 放心, so eazy~)</code></li>
<li>抱歉, 没有了~</li>
</ol>
<p>没错, 就是这么简单。 但是这里有个疑惑, 所谓的关键帧动画, 就是我们提供足够多的关键帧, 然后去逐帧执行。 这是否意味着, 我们需要提供足够多的帧数, 来保证动画的流畅性 ?</p>
<p>如果是这样, 那我们写出来的代码岂不是:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    [alphaAnimation addKeyframeForTime:<span class="number">1</span> alpha:<span class="number">0.1</span>];</span><br><span class="line">    [alphaAnimation addKeyframeForTime:<span class="number">2</span> alpha:<span class="number">0.15</span>];</span><br><span class="line">    [alphaAnimation addKeyframeForTime:<span class="number">3</span> alpha:<span class="number">0.2</span>];</span><br><span class="line">    [alphaAnimation addKeyframeForTime:<span class="number">4</span> alpha:<span class="number">0.25</span>];</span><br><span class="line">........</span><br></pre></td></tr></table></figure>
<p><img src="http://wanzao2.b0.upaiyun.com/system/pictures/599/original/%E6%82%B2%E5%82%AC8.png" alt="EMOJI"></p>
<p><strong>NO, NO, NO</strong>, 前面我们已经说过了, 这很简单~ 简单意味着, 你只需要提供几个关键点的位置 (起始点, 转折点, 终点), 再设置下它们之间的过渡类型 (Linear, EaseInQuad, EaseInOutQuad…) ，然后, 动画就做完了~ 至于中间各个关键帧的值, 是怎么确定的呢 ？ 放心, <code>Jazzhands</code> 已经帮我们做好咯~</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">id</span>&lt;IFTTTInterpolatable&gt;)valueAtTime:(<span class="built_in">CGFloat</span>)time</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSAssert</span>(!<span class="keyword">self</span>.isEmpty, <span class="string">@"At least one KeyFrame must be set before animation begins."</span>);</span><br><span class="line">    <span class="keyword">id</span> value;</span><br><span class="line">    <span class="built_in">NSUInteger</span> indexAfter = [<span class="keyword">self</span> indexOfKeyframeAfterTime:time];</span><br><span class="line">    <span class="keyword">if</span> (indexAfter == <span class="number">0</span>) &#123;</span><br><span class="line">        value = ((IFTTTKeyframe *)<span class="keyword">self</span>.keyframes[<span class="number">0</span>]).value;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (indexAfter &lt; <span class="keyword">self</span>.keyframes.count) &#123;</span><br><span class="line">        IFTTTKeyframe *keyframeBefore = (IFTTTKeyframe *)<span class="keyword">self</span>.keyframes[indexAfter - <span class="number">1</span>];</span><br><span class="line">        IFTTTKeyframe *keyframeAfter = (IFTTTKeyframe *)<span class="keyword">self</span>.keyframes[indexAfter];</span><br><span class="line">        <span class="built_in">CGFloat</span> progress = [<span class="keyword">self</span> progressFromTime:keyframeBefore.time toTime:keyframeAfter.time atTime:time withEasingFunction:keyframeBefore.easingFunction];</span><br><span class="line">        value = [keyframeBefore.value interpolateTo:keyframeAfter.value withProgress:progress];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        value = ((IFTTTKeyframe *)<span class="keyword">self</span>.keyframes.lastObject).value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="动画执行者">动画执行者</h3><p>动画执行者, 看着就很牛x, 然而它的实现实际上非常简单， 就几行代码。 它负责 <code>管理动画对象</code> 和 <code>在对应位置执行动画</code> 。</p>
<p>简单来说, 就这两个方法:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)addAnimation:(<span class="keyword">id</span>&lt;IFTTTAnimatable&gt;)animation</span><br><span class="line">&#123;</span><br><span class="line">    [<span class="keyword">self</span>.animations addObject:animation];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)animate:(<span class="built_in">CGFloat</span>)time</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">id</span>&lt;IFTTTAnimatable&gt; animation <span class="keyword">in</span> <span class="keyword">self</span>.animations) &#123;</span><br><span class="line">        [animation animate:time];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>很简洁有没有。</p>
<p>上文提到了 把动画添加到执行者上面。 <code>[self.animator addAnimation:alphaAnimation];</code></p>
<p>这也就是 <code>IFTTTAnimator</code> 的第一个作用, 管理动画对象。animations(NSMutableArray) 里面存储着所有设定的动画。</p>
<p>然后 <code>[self.animator animate:0];</code> 就是执行对应的动画了。 这个方法就是在交互的时候, 调用。比如:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 滚动视图</span></span><br><span class="line">- (<span class="keyword">void</span>)scrollViewDidScroll:(<span class="built_in">UIScrollView</span> *)scrollView</span><br><span class="line">&#123;</span><br><span class="line">  [<span class="keyword">super</span> scrollViewDidScroll:scrollView];</span><br><span class="line">  [<span class="keyword">self</span>.animator animate:scrollView.contentOffset.x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 手势</span></span><br><span class="line">- (<span class="keyword">IBAction</span>)handlePan:(<span class="built_in">UIPanGestureRecognizer</span> *)recognizer</span><br><span class="line">&#123;</span><br><span class="line">    [<span class="keyword">self</span>.animator animate:[recognizer locationOfTouch:<span class="number">0</span> inView:<span class="keyword">self</span>.view].x];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="控制器类型">控制器类型</h3><p><code>Jazzhands</code> 帮我们封装好了两种控制器类型 (IFTTTAnimatedPagingScrollViewController, IFTTTAnimatedScrollViewController)。 我们可以直接基于此, 做相应的动画。 这是十分方便的。比如官方的demo就是基于 <code>IFTTTAnimatedPagingScrollViewController</code> 来实现的。</p>
<p>它实现了 <code>scrollViewDidScroll</code> 等方法。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)scrollViewDidScroll:(<span class="built_in">UIScrollView</span> *)scrollView</span><br><span class="line">&#123;</span><br><span class="line">    [<span class="keyword">self</span> updatePageOffset];</span><br><span class="line">    [<span class="keyword">self</span> animateCurrentFrame];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> 并且把 <code>time</code> 关键帧的概念, 进一步转化为 <code>page</code> 的概念。 也就是说, 你只要指定某个动画, 它在第几个page, 第几个page存在, 各自存在什么位置即可。十分方便~</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)keepView:(<span class="built_in">UIView</span> *)view onPage:(<span class="built_in">CGFloat</span>)page withAttribute:(IFTTTHorizontalPositionAttribute)attribute</span><br><span class="line">&#123;</span><br><span class="line">    [<span class="keyword">self</span> keepView:view onPage:page withAttribute:attribute offset:<span class="number">0.</span>f];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="使用场景_(Demo)">使用场景 (Demo)</h2><p>说了这么多, 想必大家对 <code>Jazzhands</code> 的实现原理都有一定了解。 那什么时候该用到它呢 ?</p>
<p>我觉得 <code>引导页</code> 是不二选择 ~ 毕竟类似的视差动画, 在引导页的应用是最广的。</p>
<p>至于是否需要基于封装好的控制器来实现, 这就要根据具体的需求来定了。</p>
<p>比如官方Demo这样, 所有动画, 在相同的关键帧位置, 有重叠部分。(两个page 可以同时存在), 那基于 <code>IFTTTAnimatedPagingScrollViewController</code> 再合适不过了。</p>
<p>不过如果动画有阻尼效果, 也就是当前界面只能存在一个page, 那就建议直接用 <code>UIViewController</code> 撸, 然后借助 <code>手势</code> , 来实现对应的效果。</p>
<p>比如可以仿照下美图秀秀的引导页, 写个简单demo, 效果如下:</p>
<p><img src="http://7xkc7a.com1.z0.glb.clouddn.com/JazzhandsunityResult2.gif" alt="MTXX_DEMO"></p>
<p>具体 源码 就不上传了。 相信大家利用 Jazzhands 不难做出类似的效果。(有需要的可以私下交流~)</p>
<h2 id="总结">总结</h2><p>总体来说, 这个开源库还是非常精简，而且思路非常清晰，依然基于Core Animation之上，因为它只是针对于UIKit上去做帧的配置，对帧的封装上更加灵活，但是缺点是实现复杂的动画时，代码量比较大。另外布局约束呢, 都得手撸,,</p>
<p>还是很赞的~ </p>
<p><img src="http://wanzao2.b0.upaiyun.com/system/pictures/801/original/%E9%87%91%E5%A4%A7%E7%88%B721.jpg" alt=""></p>
<blockquote>
<p>个人网站: <a href="http://colin1994.github.io/" target="_blank" rel="external">Colin’s Nest</a> 转载请注明出处。 </p>
<p>iOS开发交流群: 184226705. 欢迎加入~</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p> <a href="https://github.com/IFTTT/JazzHands">Jazz Hands</a>是IFTTT发布的一个基于关键帧的动画框架, 可以用于手势，滚动视图，KVO或者ReactiveCocoa, 十分方便。</p>
</blockquote>
<p>but, 到底有多方便呢 ?</p>
<p>看看官方给出的一个demo效果:</p>
<p><img src="http://7xkc7a.com1.z0.glb.clouddn.com/Jazzhandsjazzhands-demo.gif" alt="Jazzhandsjazzhands-demo"></p>]]>
    
    </summary>
    
      <category term="iOS开发" scheme="http://http://colin1994.github.io/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="教程" scheme="http://http://colin1994.github.io/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Photo Editing Extension 详解 (附带应用滤镜Demo)]]></title>
    <link href="http://http://colin1994.github.io/2016/03/12/Photo_Editing_Extension%20%E8%AF%A6%E8%A7%A3/"/>
    <id>http://http://colin1994.github.io/2016/03/12/Photo_Editing_Extension 详解/</id>
    <published>2016-03-12T13:34:35.000Z</published>
    <updated>2016-03-16T09:19:19.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>extension是iOS8新开放的一种对几个固定系统区域的扩展机制，它可以在一定程度上弥补iOS的沙盒机制对应用间通信的限制。允许应用帮助系统扩展自定义功能，去实现一个特定作用域的任务，如照片编辑、自定义键盘、通知中心、Action动作、Share分享等。 这对于一向封闭的iOS来说, 无疑是一大福音。</p>
</blockquote>
<a id="more"></a>
<p>虽然iOS8离现在比较远了, 分享 <strong>“Extension “</strong> 相关的文章也很多了, 不过对于<strong>“Photo Editing”</strong>, 我觉得还是有必要来讲一讲的, 一来多数教程介绍Extension 的时候都是拿<strong>Widgets</strong>举例, 再有<strong>Photo Editing</strong>是可自定义内容最丰富的一个, 你完全可以把它当作App里额外的一个界面来完成。</p>
<p>正好前一阵在实习的时候, 实现过相关功能, 总结一番也是极好。</p>
<h1 id="1-_相关概念">1. 相关概念</h1><h2 id="1-1_Extension_Point">1.1 Extension Point</h2><p>系统中支持Extension 的区域，Extension 的类别也是据此区分的，iOS上共有Today、Share、Action、Photo Editing、Storage Provider、Custom keyboard几种，其中Today中的extension又被称为Widget。</p>
<ul>
<li><strong>今日(Today，又称为Widget)</strong>：可以快速获取更新或者在通知中心的今日视图中执行一项快速任务。</li>
<li><strong>共享(Share)</strong>：发布到一个共享网站或者与其它应用程序共享内容。</li>
<li><strong>动作(Action)</strong>：在另一个应用程序的上下文中操作或查看内容。</li>
<li><strong>照片编辑(Photo Editing)</strong>（仅限于iOS）：在照片应用程序中编辑照片或视频。</li>
<li><strong>查找器</strong>（仅限于iOS）：在查找器中直接显示文件同步的状态信息。</li>
<li><strong>文档提供程序(Storage Provider)</strong>（仅限于iOS）：提供对文件库的访问和管理。</li>
<li><strong>自定义键盘(Custom keyboard)</strong>（仅限于iOS）：用自定义键盘替代iOS系统键盘，并用于所有的应用程序中。</li>
</ul>
<p>由于每个扩展点都有与之相关的使用策略和专门的API，开发人员必须为他们想要提供的那种功能选择恰当的扩展点, 每种Extension Point的使用方式和适合干的活都不一样，因此不存在通用的Extension 。</p>
<p>例如，在默认情况下，键盘Extension“<a href="https://developer.apple.com/library/prerelease/ios/documentation/General/Conceptual/ExtensibilityPG/Keyboard.html" target="_blank" rel="external">不能访问网络，而且不能与其包含应用程序共享同一容器</a>”。通过对Extension进行恰当的配置，这样的限制可以移除，但开发人员仍然需要遵守苹果应用商店审查指南和iOS开发者计划许可协议中的具体的网络键盘指南。</p>
<p><img src="http://img.my.csdn.net/uploads/201512/13/1449993990_7598.png" alt="Extension Point"></p>
<h2 id="1-2_App_Extension">1.2 App Extension</h2><p>即为本文所说的Extension。Extension并不是一个独立的app，它有一个包含在App Bundle中的独立Bundle，Extension的Bundle后缀名是.appex。其生命周期也和普通App不同，这些后文将会详述。</p>
<p>Extension不能单独存在，必须有一个包含它的Containing App。</p>
<p>另外，Extension需要用户手动激活，不同的Extension激活方式也不同。</p>
<p>比如：</p>
<ul>
<li>Today中的widget需要在Today中激活和关闭；</li>
<li>Custom keyboard需要在设置中进行相关设置；</li>
<li>Photo Editing需要在使用照片时在照片管理器中激活或关闭；</li>
<li>Storage Provider可以在选择文件时出现；</li>
<li>Share和Action可以在任何应用里被激活，但前提是开发者需要设置Activation Rules，以确定extension需要在合适出现。</li>
</ul>
<h2 id="1-3_Containing_App">1.3 Containing App</h2><p>尽管苹果开放了Extension，但是在iOS中Extension并不能单独存在，要想提交到AppStore，必须将Extension包含在一个app中提交，并且App的实现部分不能为空, 这个包含Extension的App就叫Containing App。</p>
<p>Extension会随着Containing App的安装而安装，同时随着Containing App的卸载而卸载。</p>
<h2 id="1-4_Host_App">1.4 Host App</h2><p>能够调起Extension的App被称为Host App。</p>
<p>比如:</p>
<ul>
<li>widget的Host App就是Today。</li>
<li>Photo Editing 的 Host App 就是 Photos</li>
</ul>
<h1 id="2-_Extension和Containing_App、Host_App通信">2. Extension和Containing App、Host App通信</h1><h2 id="2-1_Extension和Host_App">2.1 Extension和Host App</h2><p>Extension和Host App之间可以通过extensionContext属性直接通信，该属性是新增加的UIViewController类别：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">UIViewController</span>(<span class="title">NSExtensionAdditions</span>) &lt;<span class="title">NSExtensionRequestHandling</span>&gt; </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Returns the extension context. Also acts as a convenience method for a view controller to check if it participating in an extension request. </span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>,<span class="keyword">readonly</span>,retain) <span class="built_in">NSExtensionContext</span> *extensionContext <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">8</span>_0); </span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<p>实际上extension和Host App之间是通过IPC（interprocess communication）实现的，只是苹果把调用接口高度抽象了，我们并不需要关注那么底层的东西。</p>
<h2 id="2-2_Containing_App和Host_App">2.2 Containing App和Host App</h2><p>他们之间没有任何直接关系，也从来不需要通信。</p>
<h2 id="2-3_Extension和Containing_App">2.3 Extension和Containing App</h2><p>这二者之间的关系最复杂，纠纠缠缠扯不清关系。</p>
<p>众所周知，<a href="https://developer.apple.com/library/ios/documentation/iphone/conceptual/iphoneosprogrammingguide/TheiOSEnvironment/TheiOSEnvironment.html" target="_blank" rel="external">每个iOS应用程序都有自己的沙箱</a>。<a href="https://developer.apple.com/library/mac/documentation/security/conceptual/AppSandboxDesignGuide/AppSandboxInDepth/AppSandboxInDepth.html" target="_blank" rel="external">通过Mac苹果应用商店分发的OS X应用程序</a>也有类似的要求，不过许多OS X应用程序是在Mac苹果应用商店之外分发的，并不需要遵守这一沙箱要求。</p>
<p>沙箱是苹果iOS安全策略的基石之一。沙箱是为了限制应用程序对文件、首选项、网络资源、硬件等的访问，具体来讲，其目的是为了限制受损的应用程序可能对系统造成的损害。</p>
<p>考虑到并不是所有可以用在应用程序中的API都可以用在Extension中，所以与通常的应用程序相比，App Extension运行在有更多限制的沙箱中。不能在Extension中使用的API标记为不可用宏，如NS_EXTENSIONS_UNAVAILABLE，它会在链接时导致失败。</p>
<p>此外，对于Extension与其它应用程序之间的通信，苹果有几项强制规定：</p>
<ol>
<li>调用Extension的应用程序即主应用程序不能启动Extension；只有系统可以启动Extension。</li>
<li>当Extension启动后，主应用程序就和它直接通信。</li>
<li>主应用程序永远不和包含应用程序直接通信。</li>
<li>Extension不是一个应用程序，但它由系统生成，并有它自己单独的进程。</li>
<li>为了在包含应用程序和它的Extension之间共享数据，包含应用程序及其Extension都必须是应用程序组的一部分。对于应用程序组的其中两个成员，部分数据可以在两者沙箱之外的第三个容器中共享。</li>
</ol>
<p>正如Ars Technica的Andrew Cunningham总结的那样，这些规则的最终结果主要是一个应用程序不能进入另一个应用程序的沙箱。这与Android相反，在Android上，<a href="http://developer.android.com/guide/topics/providers/content-providers.html" target="_blank" rel="external">内容提供程序</a>和<a href="http://developer.android.com/reference/android/content/ContentResolver.html" target="_blank" rel="external">解析程序</a>仍然可以一起工作来为应用程序提供对其它应用程序中数据的访问。</p>
<p><strong>不能直接通信:</strong></p>
<p>首先，尽管Extension的bundle是放在Containing App的bundle中，但是他们是两个完全独立的进程，之间不能直接通信。不过Extension可以通过openURL的方式启动Containing App（当然也能启动其它App），不过必须通过extensionContext借助host app来实现：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过openURL的方式启动Containing APP </span></span><br><span class="line">- (<span class="keyword">void</span>)openURLContainingAPP </span><br><span class="line">&#123; </span><br><span class="line">    [<span class="keyword">self</span>.extensionContext openURL:[<span class="built_in">NSURL</span> URLWithString:<span class="string">@"appextension://123"</span>] </span><br><span class="line">                 completionHandler:^(<span class="built_in">BOOL</span> success) &#123; </span><br><span class="line">                     <span class="built_in">NSLog</span>(<span class="string">@"open url result:%d"</span>,success); </span><br><span class="line">                 &#125;]; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>Extension中是无法直接使用openURL的。</strong></p>
<p><strong>可以共享Shared Resources:</strong></p>
<p>Extension和Containing App可以共同读写一个被称为Shared Resources的存储区域，这是通过App Groups实现的，后文将会详述。</p>
<p>三者间的关系可以通过官网给的两张图片形象地说明：</p>
<p> <img src="http://img.my.csdn.net/uploads/201512/13/1449995608_4851.png" alt="Extension_Containing_App_1"></p>
<p><img src="http://img.my.csdn.net/uploads/201512/13/1449995608_8648.png" alt="Extension_Containing_App_2"></p>
<h1 id="3-_数据共享">3. 数据共享</h1><p><strong>App Groups</strong>这是iOS8新开放的功能，在OS X上早就可用了。它主要用于同一Group下的App共享同一份读写空间，以实现数据共享。</p>
<h2 id="3-1_功能开启">3.1 功能开启</h2><p>为了便于后续操作，请先确保你的开发者账号在Xcode上处于登录状态。</p>
<h3 id="3-1-1_在App中开启">3.1.1 在App中开启</h3><p>App Groups位于：</p>
<p>TARGETS—&gt;AppExtensionDemo—&gt;Capabilities—&gt;App Groups`</p>
<p>找到以后，将App Groups右上角的开关打开，然后选择添加Groups，正规的命名规则应该是：group.com.company.app。</p>
<p>添加成功以后如下图所示：</p>
<p><img src="http://img.my.csdn.net/uploads/201512/13/1449996631_7873.jpeg" alt="App_Groups"></p>
<h3 id="3-1-2_在Extension中开启">3.1.2 在Extension中开启</h3><p>开启方式和App中一样，需要注意的是必须保证这里地App Groups名称和App中的相同。</p>
<h2 id="3-2_extension和containing_app数据共享">3.2 extension和containing app数据共享</h2><p>App Groups给我们提供了同一Group内App可以共同读写的区域，可以通过以下方式实现数据共享：</p>
<h3 id="3-2-1_通过NSUserDefaults共享数据">3.2.1 通过NSUserDefaults共享数据</h3><p><strong>存数据</strong></p>
<p>通过以下方式向NSUserDefaults中保存数据：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)saveTextBy<span class="built_in">NSUserDefaults</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSUserDefaults</span> *shared = [[<span class="built_in">NSUserDefaults</span> alloc] initWithSuiteName:<span class="string">@"group.com.xx.test"</span>];</span><br><span class="line">    [shared setObject:_textField.text forKey:<span class="string">@"test"</span>];</span><br><span class="line">    [shared synchronize];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>需要注意的是：</p>
<ol>
<li>保存数据的时候必须指明group id；</li>
<li>而且要注意NSUserDefaults能够处理的数据只能是可plist化的对象，详情见<a href="https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/PropertyLists/AboutPropertyLists/AboutPropertyLists.html" target="_blank" rel="external">Property List Programming Guide</a>。</li>
<li>为了防止出现数据同步问题，不要忘记调用<code>[shared synchronize];</code></li>
</ol>
<p><strong>读数据</strong></p>
<p>对应的读取数据方式：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">NSString</span> *)readDataFrom<span class="built_in">NSUserDefaults</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSUserDefaults</span> *shared = [[<span class="built_in">NSUserDefaults</span> alloc] initWithSuiteName:<span class="string">@"group.com.xx.test"</span>];</span><br><span class="line">    <span class="built_in">NSString</span> *value = [shared valueForKey:<span class="string">@"test"</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-2-1_通过NSFileManager共享数据">3.2.1 通过NSFileManager共享数据</h3><p>NSFileManager在iOS7提供了containerURLForSecurityApplicationGroupIdentifier方法，可以用来实现app group共享数据。</p>
<p><strong>存数据</strong></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">BOOL</span>)saveTextBy<span class="built_in">NSFileManager</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSError</span> *err = <span class="literal">nil</span>;</span><br><span class="line">    <span class="built_in">NSURL</span> *containerURL = [[<span class="built_in">NSFileManager</span> defaultManager] containerURLForSecurityApplicationGroupIdentifier:<span class="string">@"group.com.xx.test"</span>];</span><br><span class="line">    containerURL = [containerURL URLByAppendingPathComponent:<span class="string">@"Library/Caches/good"</span>];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">NSString</span> *value = _textField.text;</span><br><span class="line">    <span class="built_in">BOOL</span> result = [value writeToURL:containerURL atomically:<span class="literal">YES</span> encoding:<span class="built_in">NSUTF8StringEncoding</span> error:&amp;err];</span><br><span class="line">    <span class="keyword">if</span> (!result) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,err);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"save value:%@ success."</span>,value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>读数据</strong></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">NSString</span> *)readTextBy<span class="built_in">NSFileManager</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSError</span> *err = <span class="literal">nil</span>;</span><br><span class="line">    <span class="built_in">NSURL</span> *containerURL = [[<span class="built_in">NSFileManager</span> defaultManager] containerURLForSecurityApplicationGroupIdentifier:<span class="string">@"group.com.xx.test"</span>];</span><br><span class="line">    containerURL = [containerURL URLByAppendingPathComponent:<span class="string">@"Library/Caches/good"</span>];</span><br><span class="line">    <span class="built_in">NSString</span> *value = [<span class="built_in">NSString</span> stringWithContentsOfURL:containerURL encoding:<span class="built_in">NSUTF8StringEncoding</span> error:&amp;err];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>PS:</p>
<p>两个应用共同读取同一份数据，就会引发数据同步问题。WWDC2014的视频中建议使用NSFileCoordination实现普通文件的读写同步，而数据库可以使用CoreData,Sqlite也支持同步。</p>
<h2 id="3-3_动态加载,_资源共享">3.3 动态加载, 资源共享</h2><p>这个感兴趣的可以看下, 无关紧要~</p>
<p>和数据共享类似，Extension和Containing App很自然地会有一些业务逻辑上可以共用的代码，这时可以通过iOS8中刚开放使用的framework实现。苹果在<a href="https://developer.apple.com/library/prerelease/ios/documentation/General/Conceptual/ExtensibilityPG/ExtensionScenarios.html#//apple_ref/doc/uid/TP40014214-CH21-SW1" target="_blank" rel="external">App Extension Programming Guide</a>中是这样描述的：</p>
<blockquote>
<p>In iOS 8.0 and later, you can use an embedded framework to share code between your extension and its containing app. For example, if you develop image-processing code that you want both your Photo Editing extension and its containing app to share, you can put the code into a framework and embed it in both targets.</p>
</blockquote>
<p>即将framework分别嵌入到extension和containing app的target中实现代码共享。但这样岂不是需要分别要将framework分别copy到extension和containing app的main bundle中？</p>
<p>参考extension和containing app数据共享，我试想能不能将framework只保存一份放在App Groups区域？</p>
<h3 id="3-3-1_copy_framework到App_Groups">3.3.1 copy framework到App Groups</h3><p>在app首次启动的时候将framework放到App Groups区域：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">BOOL</span>)copyFrameworkFromMainBundleToAppGroup</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSFileManager</span> *manager = [<span class="built_in">NSFileManager</span> defaultManager];</span><br><span class="line">    <span class="built_in">NSError</span> *err = <span class="literal">nil</span>;</span><br><span class="line">    <span class="built_in">NSURL</span> *containerURL = [[<span class="built_in">NSFileManager</span> defaultManager] containerURLForSecurityApplicationGroupIdentifier:<span class="string">@"group.com.xx.test"</span>];</span><br><span class="line">    <span class="built_in">NSString</span> *sorPath = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%@/Dylib.framework"</span>,[[<span class="built_in">NSBundle</span> mainBundle] bundlePath]];</span><br><span class="line">    <span class="built_in">NSString</span> *desPath = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%@/Library/Caches/Dylib.framework"</span>,containerURL.path];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">BOOL</span> removeResult = [manager removeItemAtPath:desPath error:&amp;err];</span><br><span class="line">    <span class="keyword">if</span> (!removeResult) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,err);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"remove success."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">BOOL</span> copyResult = [[<span class="built_in">NSFileManager</span> defaultManager] copyItemAtPath:sorPath toPath:desPath error:&amp;err];</span><br><span class="line">    <span class="keyword">if</span> (!copyResult) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,err);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"copy success."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> copyResult;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-3-2_使用framework">3.3.2 使用framework</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">BOOL</span>)loadFrameworkInAppGroup</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSError</span> *err = <span class="literal">nil</span>;</span><br><span class="line">    <span class="built_in">NSURL</span> *containerURL = [[<span class="built_in">NSFileManager</span> defaultManager] containerURLForSecurityApplicationGroupIdentifier:<span class="string">@"group.com.xx.test"</span>];</span><br><span class="line">    <span class="built_in">NSString</span> *desPath = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%@/Library/Caches/Dylib.framework"</span>,containerURL.path];</span><br><span class="line">    <span class="built_in">NSBundle</span> *bundle = [<span class="built_in">NSBundle</span> bundleWithPath:desPath];</span><br><span class="line">    <span class="built_in">BOOL</span> result = [bundle loadAndReturnError:&amp;err];</span><br><span class="line">    <span class="keyword">if</span> (result) &#123;</span><br><span class="line">        Class root = <span class="built_in">NSClassFromString</span>(<span class="string">@"Person"</span>);</span><br><span class="line">        <span class="keyword">if</span> (root) &#123;</span><br><span class="line">            Person *person = [[root alloc] init];</span><br><span class="line">            <span class="keyword">if</span> (person) &#123;</span><br><span class="line">                [person run];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,err);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>经过测试，竟然能够加载成功。</p>
<p>对比一下, 有如下总结: </p>
<p>主要验证了两种方式:</p>
<ol>
<li>导入公用framework到项目中, 只有<strong>containing app</strong> 的 <strong>Link Binary With Libraries</strong>添加对应framework, extension运行时动态加载framework。</li>
<li><strong>containing app</strong> 和 <strong>extension</strong>的<strong>Link Binary With Libraries</strong>分别链接公用framework, (Compile Sources 只包含在framework这个target中)</li>
</ol>
<p>以上两种方式都可以做到公用资源。 区别如下:</p>
<ol>
<li><p>方式一需要App Groups, 共享资源。 方式二不需要。</p>
</li>
<li><p>方式一需要<strong>containing app</strong>先启动把, 把数据copy到App Groups中, <strong>entension</strong>才能加载到。 方式二不需要。</p>
</li>
<li><p>方式一不能直接初始化类, 比如:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;TestFrameWork/FilterImage.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">FilterImage *filter = [[FilterImage alloc] init];</span><br><span class="line"></span><br><span class="line">将会报错:</span><br><span class="line"></span><br><span class="line">Undefined symbols <span class="keyword">for</span> architecture x86_64:</span><br><span class="line">  <span class="string">"_OBJC_CLASS_$_FilterImage"</span>, referenced from:</span><br><span class="line">      objc-class-ref <span class="keyword">in</span> PhotoEditingViewController.o</span><br><span class="line">ld: symbol(s) not found <span class="keyword">for</span> architecture x86_64</span><br><span class="line">clang: error: linker command failed with exit code <span class="number">1</span> (use -v to see invocation)</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>   需要用这样的方式:</p>
   <figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Class root = <span class="built_in">NSClassFromString</span>(<span class="string">@"FilterImage"</span>);</span><br><span class="line"><span class="keyword">if</span> (root) &#123;</span><br><span class="line">    FilterImage *filter = [[root alloc] init];</span><br><span class="line">    <span class="built_in">NSString</span> *nameLUT = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%@/TestFrameWork.bundle/images/filter_lut_%d"</span>, desPath, <span class="number">2</span>];</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">self</span>.imageView.image = [filter filterImage:<span class="keyword">self</span>.input.displaySizeImage imageName:nameLUT];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>   方式二可以直接使用。 (#import “FilterImage.h”)</p>
<p>   ​</p>
<p>   对比了一下导出包的大小。</p>
<p>   写了3个Demo, </p>
<ol>
<li>方式一, 动态加载          12.1M</li>
<li>方式二，静态链接         23.7M</li>
<li>方式三，只包含framework，没有extension   11.2M</li>
</ol>
<h1 id="4-_生命周期">4. 生命周期</h1><p>下图来自官方文档，它详细描述了Extension App的生命周期 <img src="http://img.my.csdn.net/uploads/201512/13/1449996016_4664.png" alt="Life_Cycle"></p>
<p><strong>开始</strong></p>
<p>在用户通过host app点击extension时，系统就会实例化extension应用，这是生命周期的开始。</p>
<p><strong>执行任务</strong></p>
<p>在extension启动以后，开始执行它的使命。</p>
<p><strong>终止</strong></p>
<p>在用户取消任务，或者任务执行结束，或者开启了一个长时后台任务时，系统会将其杀掉。</p>
<p>由此可见，extension就是为了任务而生！</p>
<h1 id="5-_Photo_Editing使用滤镜实战">5. Photo Editing使用滤镜实战</h1><p>这里因为时间关系, 就直接采用 <strong>Apple</strong> 官方例子, 不再重新写了。如果实践过程中, 有遇到任何问题, 欢迎留言或者其他方式与我交流~</p>
<p>Demo下载地址: <img src="http://download.csdn.net/images/minetype/zip.gif" alt="">Photo Editing Extension Demo  </p>
<p>这里有几点需要注意的。</p>
<ol>
<li><p>因为Host App是Photos, 所以我们的Extension必须适配横竖屏, 因为它的状态是跟着Host App变的, 而不是Containing App。 至于横竖屏的适配, 建议采用Size Class, 然后监听缩放模式, 来适配屏幕</p>
<p>​</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#pragma mark - UIContentContainer</span></span><br><span class="line">- (<span class="keyword">void</span>)willTransitionToTraitCollection:(<span class="built_in">UITraitCollection</span> *)newCollection</span><br><span class="line">              withTransitionCoordinator:(<span class="keyword">id</span> &lt;<span class="built_in">UIViewControllerTransitionCoordinator</span>&gt;)coordinator</span><br><span class="line">&#123;</span><br><span class="line">    [<span class="keyword">super</span> willTransitionToTraitCollection:newCollection</span><br><span class="line">                 withTransitionCoordinator:coordinator];</span><br><span class="line">    [coordinator animateAlongsideTransition:^(<span class="keyword">id</span> &lt;<span class="built_in">UIViewControllerTransitionCoordinatorContext</span>&gt; context) &#123;</span><br><span class="line">       <span class="comment">// 横屏处理</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="comment">// 竖屏处理</span></span><br><span class="line">        &#125;</span><br><span class="line">        [<span class="keyword">self</span>.view setNeedsLayout];</span><br><span class="line">    &#125; completion:<span class="literal">nil</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>   同样, 需要获取初始状态来处理。</p>
<p>   ​</p>
   <figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">self</span>.traitCollection.verticalSizeClass == <span class="built_in">UIUserInterfaceSizeClassCompact</span>) &#123;</span><br><span class="line">    <span class="comment">//To Do: modify something for compact vertical size</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//To Do: modify something for other vertical size</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li><p>如果第三方库用Pod来管理的话, 需要修改pod的target, 以及添加链接。</p>
<p><code>Build Settings — &gt; Other Linker Flags    **-l&quot;Pods-MBProgressHUD&quot;**</code></p>
</li>
</ol>
<h1 id="6-_相关资料">6. 相关资料</h1><p><a href="https://developer.apple.com/library/prerelease/ios/documentation/General/Conceptual/ExtensibilityPG/index.html#//apple_ref/doc/uid/TP40014214-CH20-SW1" target="_blank" rel="external">App Extension Programming Guide</a></p>
<p><a href="http://www.infoq.com/news/2014/07/apple-ios8-app-extensions" target="_blank" rel="external">App Extensions for iOS 8 in Depth</a></p>
<p><a href="http://foggry.com/blog/2014/06/23/wwdc2014zhi-app-extensionsxue-xi-bi-ji/" target="_blank" rel="external">WWDC2014之App Extensions学习笔记</a></p>
<p><a href="https://developer.apple.com/library/ios/samplecode/SamplePhotoEditingExtension/Introduction/Intro.html#//apple_ref/doc/uid/TP40014576" target="_blank" rel="external">Sample Photo Editing Extension</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>extension是iOS8新开放的一种对几个固定系统区域的扩展机制，它可以在一定程度上弥补iOS的沙盒机制对应用间通信的限制。允许应用帮助系统扩展自定义功能，去实现一个特定作用域的任务，如照片编辑、自定义键盘、通知中心、Action动作、Share分享等。 这对于一向封闭的iOS来说, 无疑是一大福音。</p>
</blockquote>]]>
    
    </summary>
    
      <category term="iOS开发" scheme="http://http://colin1994.github.io/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="教程" scheme="http://http://colin1994.github.io/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[iOS启动页多语言]]></title>
    <link href="http://http://colin1994.github.io/2016/03/12/iOS%E5%90%AF%E5%8A%A8%E9%A1%B5%E5%A4%9A%E8%AF%AD%E8%A8%80/"/>
    <id>http://http://colin1994.github.io/2016/03/12/iOS启动页多语言/</id>
    <published>2016-03-12T09:06:29.000Z</published>
    <updated>2016-03-16T09:17:48.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p> 启动页适配多语言, 想必很多 App 都有类似的需求。但是之前尝试过程中, 发现  “多语言” 的那几种实现方式, 在欢迎页上都不适应, 直到遇到了 <code>UILaunchImages</code> ~ 下文将详细描述如何实现启动页多语言。</p>
</blockquote>
<a id="more"></a>
<h2 id="传统多语言设置">传统多语言设置</h2><p>说起多语言, 我们无非这样实现:</p>
<ol>
<li><p>为 App 添加多语言支持。<img src="http://7xkc7a.com1.z0.glb.clouddn.com/LaunchImagesLaunchImages_0.png" alt="LaunchImages_0"></p>
</li>
<li><p>添加对应的配置, 资源。 比如：</p>
<p>文本: <img src="http://7xkc7a.com1.z0.glb.clouddn.com/LaunchImagesLaunchImages_1.png" alt="LaunchImages_1"></p>
<p>图片:<img src="http://7xkc7a.com1.z0.glb.clouddn.com/LaunchImagesLaunchImages_2.png" alt="LaunchImages_2"></p>
</li>
<li><p>使用对应资源, 比如:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">label.text = <span class="built_in">NSLocalizedString</span>(<span class="string">@"多语言"</span>, <span class="literal">nil</span>);</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>再麻烦一点, 就是xib, storyboard的多语言的。 但是原理一样, 这样的方式都能实现多语言支持。So, 就是这么简单~</p>
<p><img src="http://wanzao2.b0.upaiyun.com/system/pictures/181/original/%E5%BC%80%E5%BF%8309.png" alt="emoji"></p>
<p> 然而, 启动页貌似不吃这套 ,,,</p>
<h2 id="启动页设置">启动页设置</h2><p>先说说我们如何设置启动页吧。</p>
<p><code>Assets.xcassets</code> 这玩意引入之前, 我们是对启动页图片按规范命名, 比如 Default, -568h, @2x, @3x 之类的, 让系统帮助我们自动判断对应的启动页图片。</p>
<p><code>Assets.xcassets</code> 之后, 我们都了一种选择, 可以直接拖拽图片到 <code>LaunchImage</code> 中, 并且图片命名也没那么多要求。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/262538-a84f9bece1aa8b37.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240/format/jpg" alt="LaunchImage_3"></p>
<p>再之后, 多了 <code>LaunchScreen.storyboard</code> , 意味着我们有了更多的选择, 可以做更多的事情, 把它当做一个xib, 拖拽相关控件上去就好~</p>
<p>方式很多, 是否意味着实现多语言的办法也很多 ?</p>
<p>然而并不是,, <img src="http://wanzao2.b0.upaiyun.com/system/pictures/283/original/%E7%94%9F%E6%B0%9411.png" alt="emoji"></p>
<p>不论是对<code>图片</code> 进行多语言, 还是 <code>LaunchScreen.storyboard</code> 多语言, 发现启动页始终没有跟着系统语言变, 血崩..</p>
<p>当然, 办法并不是没有, 只是没找到对的而已~ 下面介绍如何通过<code>UILaunchImages</code> 实现启动页多语言。</p>
<blockquote>
<p>PS: 感觉 LaunchScreen.storyboard 是能做到多语言支持的, 难道是我实现过程中有问题 ? </p>
</blockquote>
<h2 id="UILaunchImages">UILaunchImages</h2><p>先看一下官方文档:</p>
<blockquote>
<p>UILaunchImages (Array - iOS) Explicitly specifies the launch images to use for the app. This key contains an array of dictionaries. Each dictionary contains detailed information about a single launch image and how it is used. Xcode fills in the value of each dictionary based on information you provide in your project settings.</p>
</blockquote>
<p>显然, 我们可以通过设置 <code>UILaunchImages</code> 来配置启动图片。</p>
<p>至于 <code>UILaunchImages</code> 的几个 Key , 简单描述如下: </p>
<ul>
<li><p><code>UILaunchImageName</code> (required) 启动页资源名称</p>
</li>
<li><p><code>UILaunchImageMinimumOSVersion</code>(required) 启动页支持的最低版本</p>
</li>
<li><p><code>UILaunchImageSize</code> 启动页尺寸</p>
</li>
<li><p><code>UILaunchImageOrientation</code> 启动页方向</p>
<p>​</p>
</li>
</ul>
<p>代表什么, 都比较简单, 具体可以参考官方文档~ [  <a href="https://developer.apple.com/library/ios/documentation/General/Reference/InfoPlistKeyReference/Articles/iPhoneOSKeys.html#//apple_ref/doc/uid/TP40009252-SW28" target="_blank" rel="external">UILaunchImages</a> ]</p>
<p>用这种方式配置启动页也十分简单, 具体步骤:</p>
<ol>
<li><p>取消启动页使用的 Asset Catalog</p>
<p><img src="http://7xkc7a.com1.z0.glb.clouddn.com/LaunchImages%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-03-12%20%E4%B8%8B%E5%8D%884.44.06.png" alt=""></p>
</li>
<li><p>在Info.plist 中添加UILaunchImages项</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>UILaunchImages<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">key</span>&gt;</span>UILaunchImageName<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">string</span>&gt;</span>LaunchImage<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">key</span>&gt;</span>UILaunchImageMinimumOSVersion<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">string</span>&gt;</span>7.0<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">key</span>&gt;</span>UILaunchImageSize<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">string</span>&gt;</span>&#123;320, 480&#125;<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">key</span>&gt;</span>UILaunchImageOrientation<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">string</span>&gt;</span>Portrait<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">key</span>&gt;</span>UILaunchImageName<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">string</span>&gt;</span>LaunchImage-568h<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">key</span>&gt;</span>UILaunchImageMinimumOSVersion<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">string</span>&gt;</span>7.0<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">key</span>&gt;</span>UILaunchImageSize<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">string</span>&gt;</span>&#123;320, 568&#125;<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">key</span>&gt;</span>UILaunchImageOrientation<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">string</span>&gt;</span>Portrait<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">key</span>&gt;</span>UILaunchImageName<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">string</span>&gt;</span>LaunchImage-667h<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">key</span>&gt;</span>UILaunchImageMinimumOSVersion<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">string</span>&gt;</span>8.0<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">key</span>&gt;</span>UILaunchImageSize<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">string</span>&gt;</span>&#123;375, 667&#125;<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">key</span>&gt;</span>UILaunchImageOrientation<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">string</span>&gt;</span>Portrait<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">key</span>&gt;</span>UILaunchImageName<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">string</span>&gt;</span>LaunchImage-736h<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">key</span>&gt;</span>UILaunchImageMinimumOSVersion<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">string</span>&gt;</span>8.0<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">key</span>&gt;</span>UILaunchImageSize<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">string</span>&gt;</span>&#123;414, 736&#125;<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">key</span>&gt;</span>UILaunchImageOrientation<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">string</span>&gt;</span>Portrait<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>   <img src="http://7xkc7a.com1.z0.glb.clouddn.com/LaunchImagesF9E4E70D-B3D3-46E6-ADCE-E789F50491B3.png" alt=""></p>
<ol>
<li><p>添加对应的启动页资源</p>
<p><img src="http://7xkc7a.com1.z0.glb.clouddn.com/LaunchImages863C1341-C42D-47C3-9FC7-B0F85EE78DA7.png" alt=""></p>
<p>​</p>
</li>
</ol>
<p>如此, 即可完成 启动页 多语言的适配, 不信你就试试呗~ </p>
<p><img src="http://wanzao2.b0.upaiyun.com/system/pictures/270/original/%E5%BE%97%E7%91%9F10.png" alt=""></p>
<blockquote>
<p>PS: 这里, 说明一点。 启动页只会保留一份, 也就是说, 你第一次加载完以后, 切换了语言, 再重新打开App, 它的启动页不会跟着更新的。 这也符合苹果的用户交互指引。</p>
<p>如果你想要动态修改启动页面图LaunchImage, 抱歉！<strong>根据苹果的用户交互指引,该页面是在程序加载时显示的,不建议动态修改.</strong></p>
<p>正确的做法一般都是用固定的图片做启动页面图,在启动页面结束之后做任何你想做的事.</p>
<p>如果真想动态修改启动页面,启动页面是固定的名字,可以在程序执行之后强制把页面替换掉,不过这样APP可能会被拒.</p>
<p>该怎么设置一个动态的启动图呢？在启动图结束的时候，用一个View来展示你的动图，记得placeHolder设置为和你的LaunchImage的图片一样就行，这样就可以做出类似的效果了</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p> 启动页适配多语言, 想必很多 App 都有类似的需求。但是之前尝试过程中, 发现  “多语言” 的那几种实现方式, 在欢迎页上都不适应, 直到遇到了 <code>UILaunchImages</code> ~ 下文将详细描述如何实现启动页多语言。</p>
</blockquote>]]>
    
    </summary>
    
      <category term="iOS开发" scheme="http://http://colin1994.github.io/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="教程" scheme="http://http://colin1994.github.io/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[仿猎豹垃圾清理]]></title>
    <link href="http://http://colin1994.github.io/2015/07/13/%E4%BB%BF%E7%8C%8E%E8%B1%B9%E5%9E%83%E5%9C%BE%E6%B8%85%E7%90%86/"/>
    <id>http://http://colin1994.github.io/2015/07/13/仿猎豹垃圾清理/</id>
    <published>2015-07-13T02:14:52.000Z</published>
    <updated>2016-06-02T04:33:19.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>前几天无意打开猎豹内存大师, 发现它的垃圾清理很强大, 效果也不错, 闲着就研究了下。 不过.. 结果貌似和我想象的不太一样。怎么说呢, 听我下文一一分析。</p>
</blockquote>
<p>效果图:</p>
<p><img src="http://7xkc7a.com1.z0.glb.clouddn.com/imageliebao_0.PNG"></p>
<a id="more"></a>
<p><img src="http://7xkc7a.com1.z0.glb.clouddn.com/imageliebao_1.PNG"></p>
<p>从效果图, 我们可以看出它有以下几个功能:</p>
<ol>
<li>获取设备上已安装的所有App</li>
<li>获取App的信息, 包括图标和名称</li>
<li>获取当前已用存储和可用存储</li>
<li>扫描App动画效果</li>
<li>清除所有App垃圾文件</li>
</ol>
<p>看到这里, 你是不是也觉得很强大?</p>
<p>然后然后, 感叹的同时, 我有几点疑惑。</p>
<ol>
<li>获取到所有已安装的App, 这个功能能通过审核?(我是去年在App Store上下载的这个App)</li>
<li>App的图标如何获取到的? (因为扫描到的App包括我自己没上架的demo, icon只能是本地获取, 从其他App沙盒拿？)</li>
<li>垃圾清理过程, 为什么会出现“存储容量已满”这个提示？ 明明是清理垃圾, 中途还会出现存储满的情况?</li>
</ol>
<p>困惑, 不解..~ 于是乎, 折腾呗。 花了两天时间。写了个小demo。</p>
<p>效果如下:</p>
<p><img src="http://img.my.csdn.net/uploads/201505/28/1432801698_3530.gif" width="400"></p>
<p>接下去, 我会介绍以下各个功能的实现过程, 包括:</p>
<ol>
<li>获取设备已安装App列表已经App信息</li>
<li>扫描动画的实现</li>
<li>获取已用存储和可用存储</li>
<li>垃圾清理</li>
</ol>
<p>不过, 分析之前, 说明以下, 该功能不能够上传到App Store上! 也就是说, 它通不过审核的。原因有二:</p>
<ol>
<li>使用了私有API</li>
<li>苹果不允许App有处理内存相关功能</li>
</ol>
<p>至于猎豹内存大师这个App、它也早已经被下架了。我怀疑它利用混淆代码通过的审核。至于功能的实现, 我觉得和猎豹的实现思路应该是一样的。</p>
<p>至此, 如果你还对这篇文章感兴趣, 欢迎继续往下阅读。</p>
<p>本文参考源码: <a href="http://download.csdn.net/detail/hitwhylz/8748739" target="_blank" rel="external">CSDN下载_防猎豹垃圾清理</a></p>
<hr>
<h2 id="获取设备已安装App列表已经App信息">获取设备已安装App列表已经App信息</h2><h3 id="不越狱,_非私有API">不越狱, 非私有API</h3><p>没有越狱的设备，官方没有提供api，所以只能用一些技巧，但是获取内容不全。</p>
<p>这里主要有两种办法:</p>
<blockquote>
<p>方法一：利用URL scheme，看对于某一应用特有的url scheme，有没有响应。如果有响应，就说明安装了这个特定的app。</p>
</blockquote>
<p>说实在.. 这个办法比较傻。 App Store几百万的App, 如何枚举的过来? 并且, 也无法扫描到自己的demo。 不过, 还真有人这么干..</p>
<p>这是对应的demo, 感兴趣可以看看。 <a href="https://github.com/danielamitay/iHasApp" target="_blank" rel="external">iHasApp</a></p>
<p><a href="http://developer.apple.com/library/ios/#featuredarticles/iPhoneURLScheme_Reference/Introduction/Introduction.html" target="_blank" rel="external">官方教程: iPhoneURLScheme_Reference</a></p>
<blockquote>
<p>方法二：利用一些方法获得当前正在运行的进程信息，从进程信息中获得安装的app信息。</p>
</blockquote>
<p><a href="http://forrst.com/posts/UIDevice_Category_For_Processes-h1H" target="_blank" rel="external">参考: UIDevice_Category_For_Processes</a></p>
<p>总的来说, 不越狱, 非私有API, 想获得完整列表, 基本没什么可能。</p>
<h3 id="不越狱,_私有API。">不越狱, 私有API。</h3><p>这里就是我demo所采用的办法, 比较简单。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include <span class="meta-string">&lt;objc/runtime.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">Class LSApplicationWorkspace_class = objc_getClass(<span class="string">"LSApplicationWorkspace"</span>);  </span><br><span class="line"><span class="built_in">NSObject</span>* workspace = [LSApplicationWorkspace_class performSelector:<span class="keyword">@selector</span>(defaultWorkspace)];  </span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"apps: %@"</span>, [workspace performSelector:<span class="keyword">@selector</span>(allApplications)]);</span><br></pre></td></tr></table></figure>
<p><strong>返回结果</strong></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="string">"LSApplicationProxy: com.qunar.iphoneclient8"</span>,</span><br><span class="line">   <span class="string">"LSApplicationProxy: com.apple.mobilemail"</span>,</span><br><span class="line">   <span class="string">"LSApplicationProxy: com.apple.mobilenotes"</span>,</span><br><span class="line">   <span class="string">"LSApplicationProxy: com.apple.compass"</span>,</span><br><span class="line">   <span class="string">"LSApplicationProxy: com.tencent.happymj"</span>,</span><br><span class="line">   <span class="string">"LSApplicationProxy: com.apple.mobilesafari"</span>,</span><br><span class="line">   <span class="string">"LSApplicationProxy: com.apple.reminders"</span></span><br></pre></td></tr></table></figure>
<p>返回的是个数据, 每个元素都是<code>LSApplicationProxy</code>.它的description只返回了 它的bundle id。然而这并不是我们想要的。</p>
<p>接下去我们看</p>
<p><a href="https://searchcode.com/codesearch/view/15673930/" target="_blank" rel="external">LSApplicationProxy.h</a></p>
<p>形如:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@class</span> <span class="title">LSApplicationProxy</span>, <span class="title">NSArray</span>, <span class="title">NSDictionary</span>, <span class="title">NSProgress</span>, <span class="title">NSString</span>, <span class="title">NSURL</span>, <span class="title">NSUUID</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">LSApplicationProxy</span> : <span class="title">LSResourceProxy</span> &lt;<span class="title">NSSecureCoding</span>&gt; </span>&#123;</span><br><span class="line">    <span class="built_in">NSArray</span> *_<span class="built_in">UIBackgroundModes</span>;</span><br><span class="line">    <span class="built_in">NSString</span> *_applicationType;</span><br><span class="line">    <span class="built_in">NSArray</span> *_audioComponents;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> _bundleFlags;</span><br><span class="line">    <span class="built_in">NSURL</span> *_bundleURL;</span><br><span class="line">    <span class="built_in">NSString</span> *_bundleVersion;</span><br><span class="line">    <span class="built_in">NSArray</span> *_directionsModes;</span><br><span class="line">    <span class="built_in">NSDictionary</span> *_entitlements;</span><br><span class="line">    <span class="built_in">NSDictionary</span> *_envi</span><br><span class="line"></span><br><span class="line">	...</span><br><span class="line">	...</span><br></pre></td></tr></table></figure>
<p>这里列举了<code>LSApplicationProxy</code>对应的属性和方法。</p>
<p>我们可以用如下代码, 打印下每个属性的值, 找出我们想要的。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span>、<span class="comment">/* 获取对象的所有属性 以及属性值 */</span></span><br><span class="line">- (<span class="built_in">NSDictionary</span> *)properties_aps</span><br><span class="line">&#123;</span><br><span class="line">   <span class="built_in">NSMutableDictionary</span> *props = [<span class="built_in">NSMutableDictionary</span> dictionary];   </span><br><span class="line">   <span class="keyword">unsigned</span> <span class="keyword">int</span> outCount, i;   </span><br><span class="line">   objc_property_t *properties = class_copyPropertyList([<span class="keyword">self</span> class], &amp;outCount);   </span><br><span class="line">   <span class="keyword">for</span> (i = <span class="number">0</span>; i&lt;outCount; i++)</span><br><span class="line">    &#123;</span><br><span class="line">       objc_property_t property = properties[i];</span><br><span class="line">       <span class="keyword">const</span> <span class="keyword">char</span>* char_f =property_getName(property);</span><br><span class="line">       <span class="built_in">NSString</span> *propertyName = [<span class="built_in">NSString</span> stringWithUTF8String:char_f];</span><br><span class="line">       <span class="keyword">id</span> propertyValue = [<span class="keyword">self</span> valueForKey:(<span class="built_in">NSString</span> *)propertyName];   </span><br><span class="line">       <span class="keyword">if</span> (propertyValue) [props setObject:propertyValue forKey:propertyName];   </span><br><span class="line">    &#125;   </span><br><span class="line">   free(properties);   </span><br><span class="line">   <span class="keyword">return</span> props;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>参考: <a href="http://blog.csdn.net/crazychickone/article/details/36413671" target="_blank" rel="external">IOS 遍历未知对象的属性和方法</a></p>
<p>然后我们提取出我们需要的, 图标和应用名。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[appsInfoArr enumerateObjectsUsingBlock:^(<span class="keyword">id</span> obj, <span class="built_in">NSUInteger</span> idx, <span class="built_in">BOOL</span> *stop)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">NSDictionary</span> *boundIconsDictionary = [obj performSelector:<span class="keyword">@selector</span>(boundIconsDictionary)];</span><br><span class="line"></span><br><span class="line">            <span class="built_in">NSString</span> *iconPath = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%@/%@.png"</span>, [[obj performSelector:<span class="keyword">@selector</span>(resourcesDirectoryURL)] path], [[[boundIconsDictionary objectForKey:<span class="string">@"CFBundlePrimaryIcon"</span>] objectForKey:<span class="string">@"CFBundleIconFiles"</span>]lastObject]];</span><br><span class="line"></span><br><span class="line">             <span class="built_in">UIImage</span> *image = [[[<span class="built_in">UIImage</span> alloc]initWithContentsOfFile:iconPath] TransformtoSize:<span class="built_in">CGSizeMake</span>(<span class="number">65</span>, <span class="number">65</span>)];</span><br><span class="line">            <span class="keyword">if</span> (image)</span><br><span class="line">            &#123;</span><br><span class="line">                [<span class="keyword">self</span>.appsIconArr addObject:image];</span><br><span class="line">                [<span class="keyword">self</span>.appsNameArr addObject:[obj performSelector:<span class="keyword">@selector</span>(localizedName)]];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;];</span><br></pre></td></tr></table></figure>
<p>如此, <code>_self.appsIconArr</code> 和 <code>_appsNameArr</code>中存储的就是我们需要的App数据了。</p>
<h3 id="越狱">越狱</h3><p>.. 这里我也不懂, 也没去研究。 感兴趣的可以看看 <code>MobileInstallation.framework</code></p>
<hr>
<h2 id="扫描动画的实现">扫描动画的实现</h2><p>这里主要有两个动画。</p>
<ol>
<li>利用UIScrollView, 实现每个App自动滚动。</li>
<li>Animation动画, 中间扫描线的往返运动。</li>
</ol>
<p>至于动画, 这里我不想介绍太多。 源码里面都写清楚了。(当然, 写的比较粗糙…)</p>
<p>简单带一下扫描线的动画实现:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 向左移动 */</span></span><br><span class="line">    <span class="built_in">CABasicAnimation</span> *animationLeft = [<span class="built_in">CABasicAnimation</span> animationWithKeyPath:<span class="string">@"transform.translation.x"</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 动画选项的设定</span></span><br><span class="line">    animationLeft.duration = <span class="number">0.5</span>f; <span class="comment">// 持续时间</span></span><br><span class="line">    animationLeft.beginTime = <span class="number">0.0</span>f;</span><br><span class="line">    animationLeft.autoreverses = <span class="literal">YES</span>; <span class="comment">// 结束后执行逆动画</span></span><br><span class="line">    <span class="comment">// 动画先加速后减速</span></span><br><span class="line">    animationLeft.timingFunction =</span><br><span class="line">    [<span class="built_in">CAMediaTimingFunction</span> functionWithName: k<span class="built_in">CAMediaTimingFunctionEaseInEaseOut</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 终了帧</span></span><br><span class="line">    animationLeft.toValue = [<span class="built_in">NSNumber</span> numberWithFloat:<span class="number">-40</span>];;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 向右移动 */</span></span><br><span class="line">    <span class="built_in">CABasicAnimation</span> *animationRight = [<span class="built_in">CABasicAnimation</span> animationWithKeyPath:<span class="string">@"transform.translation.x"</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 动画选项的设定</span></span><br><span class="line">    animationRight.duration = <span class="number">0.5</span>f; <span class="comment">// 持续时间</span></span><br><span class="line">    animationRight.beginTime = <span class="number">1.0</span>f;</span><br><span class="line">    animationRight.autoreverses = <span class="literal">YES</span>; <span class="comment">// 结束后执行逆动画</span></span><br><span class="line">    <span class="comment">// 动画先加速后减速</span></span><br><span class="line">    animationRight.timingFunction =</span><br><span class="line">    [<span class="built_in">CAMediaTimingFunction</span> functionWithName: k<span class="built_in">CAMediaTimingFunctionEaseInEaseOut</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 终了帧</span></span><br><span class="line">    animationRight.toValue = [<span class="built_in">NSNumber</span> numberWithFloat:<span class="number">40</span>];;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 动画组 */</span></span><br><span class="line">    <span class="built_in">CAAnimationGroup</span> *group = [<span class="built_in">CAAnimationGroup</span> animation];</span><br><span class="line">    group.delegate = <span class="keyword">self</span>;</span><br><span class="line">    group.duration = <span class="number">2.0</span>;</span><br><span class="line">    group.repeatCount = <span class="number">15</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 动画结束后不变回初始状态</span></span><br><span class="line">    group.removedOnCompletion = <span class="literal">NO</span>;</span><br><span class="line">    group.fillMode = k<span class="built_in">CAFillModeForwards</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加动画</span></span><br><span class="line">    group.animations = [<span class="built_in">NSArray</span> arrayWithObjects:animationLeft, animationRight, <span class="literal">nil</span>];</span><br><span class="line">    [mySL.layer addAnimation:group forKey:<span class="string">@"moveLeft-moveRight-layer"</span>];</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="获取已用存储和可用存储">获取已用存储和可用存储</h2><p>这个没什么好说的了.. Apple提供了API, 直接用就是了。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取占用内存</span></span><br><span class="line">-(<span class="keyword">void</span>)usedSpaceAndfreeSpace</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSString</span>* path = [<span class="built_in">NSSearchPathForDirectoriesInDomains</span>(<span class="built_in">NSDocumentDirectory</span>, <span class="built_in">NSUserDomainMask</span>, <span class="literal">YES</span>) objectAtIndex:<span class="number">0</span>] ;</span><br><span class="line">    <span class="built_in">NSFileManager</span>* fileManager = [[<span class="built_in">NSFileManager</span> alloc ]init];</span><br><span class="line">    <span class="built_in">NSDictionary</span> *fileSysAttributes = [fileManager attributesOfFileSystemForPath:path error:<span class="literal">nil</span>];</span><br><span class="line">    <span class="built_in">NSNumber</span> *freeSpace = [fileSysAttributes objectForKey:<span class="built_in">NSFileSystemFreeSize</span>];</span><br><span class="line">    <span class="built_in">NSNumber</span> *totalSpace = [fileSysAttributes objectForKey:<span class="built_in">NSFileSystemSize</span>];</span><br><span class="line">    <span class="built_in">NSString</span>  * str= [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"已占用%0.1f G / 剩余%0.1f MB"</span>,([totalSpace longLongValue] - [freeSpace longLongValue])/<span class="number">1024.0</span>/<span class="number">1024.0</span>/<span class="number">1024.0</span>,[freeSpace longLongValue]/<span class="number">1024.0</span>/<span class="number">1024.0</span>];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"--------%@"</span>,str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="垃圾清理">垃圾清理</h2><p>这里我本来是不想提的，毕竟这个功能，苹果是不能接受的。</p>
<p>之前提到了, 猎豹在清理过程中, 会出现“存储已满的提示”。然后我开始考虑了。</p>
<ol>
<li>为什么要弹出提示？</li>
<li>存储真的在某一刻满了吗？</li>
<li>它清理的时候, QQ直接被杀死, 应用名变成”正在清理…”（和安装中一个状态）。 真有这么厉害? !!!!!!</li>
<li>这个好像在哪里见过…</li>
</ol>
<p>最后, 我确定了猎豹的实现方式。它只不过是触发了Apple自己的垃圾回收机制而已。</p>
<p>当存储满的时候, 系统会自动帮我们进行垃圾清理, 并弹出提示说明存储已满。</p>
<p>所以, 猎豹只不过是计算了剩余多少存储, 然后制造了一个与之差不多大小的垃圾文件。 然后触发苹果的清理机制。清理完后, 删除之前生成的垃圾文件。再次统计当前可用存储, 差值即为本次清理的垃圾大小。 </p>
<p>是吧, 其实也没那么神~</p>
<p>至于如何快速制造几百M, 甚至几G的垃圾文件? </p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将文件的长度设定为offset </span></span><br><span class="line"> -(<span class="keyword">void</span>)truncateFileAtOffset:offset</span><br></pre></td></tr></table></figure>
<p><code>truncateFileAtOffset:offset</code>就能搞定了。 感兴趣的可以自己研究下。</p>
<hr>
<p>至此, 猎豹垃圾清理分析完毕。</p>
<p>当然, 这只是我个人的看法。如果有更好的方式, 或者文章中存在任何错误。 欢迎交流指正。</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>前几天无意打开猎豹内存大师, 发现它的垃圾清理很强大, 效果也不错, 闲着就研究了下。 不过.. 结果貌似和我想象的不太一样。怎么说呢, 听我下文一一分析。</p>
</blockquote>
<p>效果图:</p>
<p><img src="http://7xkc7a.com1.z0.glb.clouddn.com/imageliebao_0.PNG"></p>]]>
    
    </summary>
    
      <category term="iOS开发" scheme="http://http://colin1994.github.io/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="教程" scheme="http://http://colin1994.github.io/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[TODO宏实现]]></title>
    <link href="http://http://colin1994.github.io/2015/07/12/TODO%E5%AE%8F%E5%AE%9E%E7%8E%B0/"/>
    <id>http://http://colin1994.github.io/2015/07/12/TODO宏实现/</id>
    <published>2015-07-12T02:14:52.000Z</published>
    <updated>2016-03-12T09:13:25.000Z</updated>
    <content type="html"><![CDATA[<h1 id="代码备忘,_TODO宏实现">代码备忘, TODO宏实现</h1><blockquote>
<p>我们平时在开发过程中, 往往并不是憋足气一股脑敲完全部代码。每个模块, 每个函数的实现总有个先后顺序。又或者哪个部分需要做调整, 修改… 所以, 我们需要有一个东西, 来提醒我们, 起到代码备忘功能, 避免某个功能忘记实现, 也能让我们快速定位。 所以这篇文章, 就是要实现一个TODO宏, 来达到代码备忘功能。</p>
</blockquote>
<p><strong>效果如下:</strong></p>
<p><img src="http://img.my.csdn.net/uploads/201503/15/1426387345_9339.jpeg" width="500"></p>
<p><img src="http://img.my.csdn.net/uploads/201503/15/1426387346_3643.jpeg" width="500"></p>
<a id="more"></a>
<h2 id="下面来分析下如何实现这个宏"><strong>下面来分析下如何实现这个宏</strong></h2><hr>
<p>在实现TODO之前, 已经自带了几个预处理指令来实现报警/报错:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#warning Colin</span></span><br><span class="line"><span class="meta">#error Colin</span></span><br><span class="line"><span class="meta">#pragma message <span class="meta-string">"Colin"</span></span></span><br><span class="line"><span class="meta">#pragma GCC warning <span class="meta-string">"Colin"</span></span></span><br><span class="line"><span class="meta">#pragma GCC error <span class="meta-string">"Colin"</span></span></span><br></pre></td></tr></table></figure>
<p><strong>效果如下:</strong></p>
<p><img src="http://img.my.csdn.net/uploads/201503/15/1426387346_8391.jpeg" width="500"></p>
<p>既然有了, 那为什么还需要自己实现这个TODO宏呢?</p>
<ol>
<li>error 和 warning所代表的意义已经深入猿心, 我们没有理由使用它来做备忘。</li>
<li>如果也使用warning, 在警告导航栏中, 我们很难区分哪个才是我们手动打的标记, 哪个是程序本身的warning</li>
<li>带#的预处理指令是无法被#define的, 也就是没办法直接利用这个来定义我们的TODO</li>
</ol>
<p>好在C99提供了一个 <strong>_Pragma</strong> 运算符可以把部分#pragma指令字符串化, 如下:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#pragma message <span class="meta-string">"Colin"</span></span></span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line">_Pragma(<span class="string">"message \"Colin\""</span>) <span class="comment">// 需要注意双引号的转义</span></span><br><span class="line"><span class="comment">// 或</span></span><br><span class="line">_Pragma(<span class="string">"message(\"Colin\")"</span>) <span class="comment">// 需要注意双引号的转义</span></span><br></pre></td></tr></table></figure>
<p>利用这个特性，我们就可以将warning定义成宏:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#define MY_WARNING _Pragma(<span class="meta-string">"message (\"</span>警察临检, 男左女右!\<span class="meta-string">")"</span>)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    <span class="comment">// Do any additional setup after loading the view, typically from a nib.</span></span><br><span class="line"></span><br><span class="line">    MY_WARNING</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>效果如下:</strong></p>
<p><img src="http://img.my.csdn.net/uploads/201503/15/1426387346_6563.jpeg" width="500"></p>
<p>到这里, 大体有那么一个感觉。 不过我们提示的内容, 是define的, 也就是写死固定的, 不太合适。</p>
<p>所以我们希望这个宏能接受入参, 让它正常显示到warning中。</p>
<p>这就涉及了一些宏的基本用法。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#define STRINGIFY(S) #S</span></span><br><span class="line"><span class="meta">#define PRAGMA_MESSAGE(MSG) _Pragma(STRINGIFY(message(MSG)))</span></span><br></pre></td></tr></table></figure>
<p>STRINGIFY(S) 将入参转化成字符串，省去了_Pragma中全串加转义字符的困扰。</p>
<p><strong>效果如下:</strong></p>
<p><img src="http://img.my.csdn.net/uploads/201503/15/1426387347_2653.jpeg" width="500"></p>
<p>这时，一个基本功能的TODO宏就完成了，下面向其中加入额外的信息：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 两个已有的宏</span></span><br><span class="line"><span class="meta">#define STRINGIFY(S) #S</span></span><br><span class="line"><span class="meta">#define PRAGMA_MESSAGE(MSG) _Pragma(STRINGIFY(message(MSG)))</span></span><br><span class="line"><span class="comment">// 延迟1次展开的宏</span></span><br><span class="line"><span class="meta">#define DEFER_STRINGIFY(S) STRINGIFY(S)</span></span><br><span class="line"><span class="comment">// 下面的宏在第一行用`\`折行</span></span><br><span class="line"><span class="meta">#define FORMATTED_MESSAGE(MSG) <span class="meta-string">"[TODO-"</span> DEFER_STRINGIFY(__COUNTER__) <span class="meta-string">"] "</span> MSG <span class="meta-string">" \n"</span>  \</span></span><br><span class="line">    DEFER_STRINGIFY(__FILE__) <span class="string">" line "</span> DEFER_STRINGIFY(__LINE__)</span><br></pre></td></tr></table></figure>
<p>其中涉及到的知识：</p>
<ul>
<li>两个常量字符串可以拼接成一个整串 “123””456” =&gt; “123456”</li>
<li>使用到3个预定义宏，<strong>COUNTER</strong>宏展开次数的计数器，全局唯一；<strong>FILE</strong>当前文件完整目录字符串；<strong>LINE</strong>在当前文件第几行</li>
<li>在字符串中预定义宏应延时展开，如果将上面的DEFER<em>STRINGIFY换成STRINGIFY的话，如<strong>LINE</strong>不能被正确展开成行数，而是成了一个常量字符串”<em>_LINE</em></em>“</li>
<li>为了美化，warning message中可以使用\n换行</li>
</ul>
<p>于是，使用FORMATTED_MESSAGE(MSG)宏就可以将带文件路径、序号、行数等信息加入到最终的warning中。</p>
<hr>
<p>其实到这步已经OK了，为了让这个宏更加抢眼，还可以借鉴RAC，把宏定义成前面加@的形式：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#define KEYWORDIFY try &#123;&#125; @catch (...) &#123;&#125;</span></span><br></pre></td></tr></table></figure>
<hr>
<h2 id="最终版本"><strong>最终版本</strong></h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 转成字符串</span></span><br><span class="line"><span class="meta">#define STRINGIFY(S) #S</span></span><br><span class="line"><span class="comment">// 需要解两次才解开的宏</span></span><br><span class="line"><span class="meta">#define DEFER_STRINGIFY(S) STRINGIFY(S)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#define PRAGMA_MESSAGE(MSG) _Pragma(STRINGIFY(message(MSG)))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 为warning增加更多信息</span></span><br><span class="line"><span class="meta">#define FORMATTED_MESSAGE(MSG) <span class="meta-string">"[TODO-"</span> DEFER_STRINGIFY(__COUNTER__) <span class="meta-string">"] "</span> MSG <span class="meta-string">" \n"</span> DEFER_STRINGIFY(__FILE__) <span class="meta-string">" line "</span> DEFER_STRINGIFY(__LINE__)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使宏前面可以加@</span></span><br><span class="line"><span class="meta">#define KEYWORDIFY try &#123;&#125; @catch (...) &#123;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 最终使用的宏</span></span><br><span class="line"><span class="meta">#define TODO(MSG) KEYWORDIFY PRAGMA_MESSAGE(FORMATTED_MESSAGE(MSG))</span></span><br></pre></td></tr></table></figure>
<h1 id="References">References</h1><p><a href="http://blog.sunnyxx.com/2015/03/01/todo-macro/" target="_blank" rel="external">http://blog.sunnyxx.com/2015/03/01/todo-macro/</a></p>
<p><a href="http://clang.llvm.org/docs/UsersManual.html" target="_blank" rel="external">http://clang.llvm.org/docs/UsersManual.html</a></p>
<p><a href="https://gcc.gnu.org/onlinedocs/cpp/Pragmas.html" target="_blank" rel="external">https://gcc.gnu.org/onlinedocs/cpp/Pragmas.html</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="代码备忘,_TODO宏实现">代码备忘, TODO宏实现</h1><blockquote>
<p>我们平时在开发过程中, 往往并不是憋足气一股脑敲完全部代码。每个模块, 每个函数的实现总有个先后顺序。又或者哪个部分需要做调整, 修改… 所以, 我们需要有一个东西, 来提醒我们, 起到代码备忘功能, 避免某个功能忘记实现, 也能让我们快速定位。 所以这篇文章, 就是要实现一个TODO宏, 来达到代码备忘功能。</p>
</blockquote>
<p><strong>效果如下:</strong></p>
<p><img src="http://img.my.csdn.net/uploads/201503/15/1426387345_9339.jpeg" width="500"/></p>
<p><img src="http://img.my.csdn.net/uploads/201503/15/1426387346_3643.jpeg" width="500"/></p>]]>
    
    </summary>
    
      <category term="iOS开发" scheme="http://http://colin1994.github.io/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="宏" scheme="http://http://colin1994.github.io/tags/%E5%AE%8F/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[正则表达式]]></title>
    <link href="http://http://colin1994.github.io/2015/07/11/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://http://colin1994.github.io/2015/07/11/正则表达式/</id>
    <published>2015-07-11T02:14:52.000Z</published>
    <updated>2016-03-12T09:13:20.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>正则表达式，又称正规表示法、常规表示法（英语：Regular Expression，在代码中常简写为regex、regexp或RE），计算机科学的一个概念。正则表达式使用单个字符串来描述、匹配一系列符合某个句法规则的字符串。在很多文本编辑器里，正则表达式通常被用来检索、替换那些符合某个模式的文本。</p>
</blockquote>
<ol>
<li>系统自带的, 如: NSPredicate, rangeOfString：option, NSRegularExpression</li>
<li><a href="http://regexkit.sourceforge.net/RegexKitLite/" target="_blank" rel="external">RegexKitLite</a> RegexKitLite 是一个轻量级的 Objective-C 的正则表达式库,支持 Mac OS X 和 iOS,使用 ICU 库开发。</li>
</ol>
<p>至于<code>RegexKitLite</code>, 这里不做介绍。着重介绍系统自带的那几个办法。</p>
<blockquote>
<p>PS: 阅读本文前提是您已经掌握了正则基本语法, 如果对正则还不太了解, 可以参考以下几个链接:</p>
</blockquote>
<p>正则表达式学习链接：</p>
<ol>
<li><a href="http://doslin.com/regular%20expressions/2014/03/11/learn-regular-expressions-in-about-55-minutes.html" target="_blank" rel="external">55分钟学会正则表达式</a></li>
<li><a href="http://www.regexlab.com/zh/regref.htm" target="_blank" rel="external">揭开正则表达式的神秘面纱</a></li>
<li><a href="http://www.regexplib.com/DisplayPatterns.aspx?cattabindex=4&amp;categoryId=5" target="_blank" rel="external">RegExLib.com(正则表达式库查询)</a></li>
</ol>
<hr>
<a id="more"></a>
<h2 id="1-_NSPredicate">1. NSPredicate</h2><blockquote>
<p>简述：Cocoa框架中的NSPredicate用于查询，原理和用法都类似于SQL中的where，作用相当于数据库的过滤取。</p>
</blockquote>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSPredicate</span> *predicate = [<span class="built_in">NSPredicate</span> predicateWithFormat:(<span class="built_in">NSString</span> *), ...];</span><br></pre></td></tr></table></figure>
<p>其中, 常见的<code>Format</code>有:</p>
<p>(1) 比较运算符: &gt;, &lt;, ==, &gt;=, &lt;=, !=</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">例：@&quot;number &gt; 100&quot;</span><br></pre></td></tr></table></figure>
<p>(2) 范围运算符: IN, BETWEEN</p>
<p>​    </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">例：@&quot;number BETWEEN &#123;1,5&#125;&quot;</span><br><span class="line">   @&quot;address IN &#123;&apos;shanghai&apos;,&apos;beijing&apos;&#125;&quot;</span><br></pre></td></tr></table></figure>
<p>(3) 字符串本身: SELF </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">例：@“SELF == ‘APPLE’&quot;</span><br></pre></td></tr></table></figure>
<p>(4) 字符串相关: BEGINSWITH, ENDSWITH, CONTAINS</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">例：@&quot;name CONTAINS[cd] &apos;ang&apos;&quot;  //包含某个字符串</span><br><span class="line">   @&quot;name BEGINSWITH[c] &apos;sh&apos;&quot;  //以某个字符串开头</span><br><span class="line">   @&quot;name ENDSWITH[d] &apos;ang&apos;&quot;   //以某个字符串结束</span><br><span class="line"></span><br><span class="line">注:[c]不区分大小写</span><br><span class="line">   [d]不区分发音符号即没有重音符号</span><br><span class="line">   [cd]既不区分大小写，也不区分发音符号。</span><br></pre></td></tr></table></figure>
<p>(5) 通配符: LIKE</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">例：@&quot;name LIKE[cd] &apos;*er*&apos;&quot;    //*代表通配符,Like也接受[cd].</span><br><span class="line">   @&quot;name LIKE[cd] &apos;???er*&apos;&quot;</span><br></pre></td></tr></table></figure>
<p>(6) 正则表达式: MATCHES</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">例：NSString *regex = @&quot;^A.+e$&quot;;   //以A开头，e结尾</span><br><span class="line">  @&quot;name MATCHES %@&quot;,regex</span><br></pre></td></tr></table></figure>
<p>至于如何使用呢? 下面举几个例子:</p>
<p>(a) 对NSArray进行过滤, 帅选出包含”ang”的项</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">    <span class="built_in">NSArray</span> *array = [[<span class="built_in">NSArray</span> alloc]initWithObjects:<span class="string">@"beijing"</span>, <span class="string">@"shanghai"</span>, <span class="string">@"guangzou"</span>, <span class="string">@"wuhan"</span>, <span class="literal">nil</span>];</span><br><span class="line">    <span class="built_in">NSString</span> *string = <span class="string">@"ang"</span>;</span><br><span class="line">    <span class="built_in">NSPredicate</span> *pred = [<span class="built_in">NSPredicate</span> predicateWithFormat:<span class="string">@"SELF CONTAINS %@"</span>, string];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, [array filteredArrayUsingPredicate:pred]);</span><br><span class="line"></span><br><span class="line"><span class="comment">//    打印结果:</span></span><br><span class="line"><span class="comment">//    (</span></span><br><span class="line"><span class="comment">//     shanghai,</span></span><br><span class="line"><span class="comment">//     guangzou</span></span><br><span class="line"><span class="comment">//    )</span></span><br></pre></td></tr></table></figure>
<p>(b) 对NSDate进行筛选</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//日期在十天之内:</span></span><br><span class="line"><span class="built_in">NSDate</span> *endDate = [<span class="built_in">NSDate</span> date];</span><br><span class="line"><span class="built_in">NSTimeInterval</span> timeInterval= [endDate timeIntervalSinceReferenceDate];</span><br><span class="line">timeInterval -=<span class="number">3600</span>*<span class="number">24</span>*<span class="number">10</span>;</span><br><span class="line"><span class="built_in">NSDate</span> *beginDate = [<span class="built_in">NSDate</span> dateWithTimeIntervalSinceReferenceDate:timeInterval];</span><br><span class="line"><span class="comment">//对coredata进行筛选(假设有fetchRequest)</span></span><br><span class="line"><span class="built_in">NSPredicate</span> *predicate_date = [<span class="built_in">NSPredicate</span> predicateWithFormat:<span class="string">@"date &gt;= %@ AND date &lt;= %@"</span>, beginDate,endDate];</span><br><span class="line">[fetchRequest setPredicate:predicate_date];</span><br></pre></td></tr></table></figure>
<p>OK, <code>NSPredicate</code>的功能很多, 也很强大。这里暂时就点到此, 感兴趣的可以自己一一试验。 下面举两个例子说明一下如何使用正则。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断是否是有效邮箱</span></span><br><span class="line">- (<span class="built_in">BOOL</span>)isValidateEmail:(<span class="built_in">NSString</span> *)email&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">NSString</span> *regex = <span class="string">@"[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]&#123;2,4&#125;"</span>;</span><br><span class="line">    <span class="built_in">NSPredicate</span> *predicate = [<span class="built_in">NSPredicate</span> predicateWithFormat:<span class="string">@"SELF MATCHES %@"</span>, regex];</span><br><span class="line">    <span class="keyword">return</span> [predicate evaluateWithObject:email];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断字符串首字母是否为字母</span></span><br><span class="line">- (<span class="built_in">BOOL</span>)isStartedWithWord:(<span class="built_in">NSString</span> *)aString&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">NSString</span> *regex = <span class="string">@"[A-Za-z]+"</span>;</span><br><span class="line">    <span class="built_in">NSPredicate</span> *predicate = [<span class="built_in">NSPredicate</span> predicateWithFormat:<span class="string">@"SELF MATCHES %@"</span>, regex];</span><br><span class="line">    <span class="keyword">return</span> [predicate evaluateWithObject:aString];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="2-_利用rangeOfString：option：直接查找">2. 利用rangeOfString：option：直接查找</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">    <span class="built_in">NSString</span> *searchText = <span class="string">@"// Do any additional setup after loading the view, typically from a nib."</span>;</span><br><span class="line">    <span class="built_in">NSRange</span> range = [searchText rangeOfString:<span class="string">@"(?:[^,])*\\."</span> options:<span class="built_in">NSRegularExpressionSearch</span>];</span><br><span class="line">    <span class="keyword">if</span> (range.location != <span class="built_in">NSNotFound</span>) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, [searchText substringWithRange:range]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    打印结果:</span></span><br><span class="line"><span class="comment">//      typically from a nib.</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>options中设定NSRegularExpressionSearch就是表示利用正则表达式匹配，会返回第一个匹配结果的位置。</p>
</blockquote>
<hr>
<h1 id="3-_使用正则表达式类">3. 使用正则表达式类</h1><p>详细了解:  <a href="http://blog.csdn.net/crayondeng/article/details/16991579" target="_blank" rel="external">iOS 正则表达式 NSRegularExpression</a></p>
<p>上面那篇文章总结的很不错. 这里简单再举个例子:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">    <span class="built_in">NSString</span> *searchText = <span class="string">@"// Do any additional setup after loading the view, typically from a nib."</span>;    </span><br><span class="line">    <span class="built_in">NSError</span> *error = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="built_in">NSRegularExpression</span> *regex = [<span class="built_in">NSRegularExpression</span> regularExpressionWithPattern:<span class="string">@"(?:[^,])*\\."</span> options:<span class="built_in">NSRegularExpressionCaseInsensitive</span> error:&amp;error];</span><br><span class="line">    <span class="built_in">NSTextCheckingResult</span> *result = [regex firstMatchInString:searchText options:<span class="number">0</span> range:<span class="built_in">NSMakeRange</span>(<span class="number">0</span>, [searchText length])];</span><br><span class="line">    <span class="keyword">if</span> (result) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@\n"</span>, [searchText substringWithRange:result.range]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    打印结果:</span></span><br><span class="line"><span class="comment">//      typically from a nib.</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>使用系统的正则表达式类（NSRegularExpression）会返回匹配的多个结果。</p>
</blockquote>
<hr>
<p>针对以上3种方式, 做一个小小总结</p>
<blockquote>
<p>第一种匹配需要学习NSPredicate的写法，需要查阅苹果相关技术文档；</p>
</blockquote>
<p>&gt;</p>
<blockquote>
<p>如果只关心第一个匹配的结果，第二种匹配较为简洁；</p>
</blockquote>
<p>&gt;</p>
<blockquote>
<p>如果需要匹配多个结果，同时匹配多次，第三种方式效率会更高。</p>
</blockquote>
<p>&gt;</p>
<h2 id="常用正则表达式">常用正则表达式</h2><p>参考:  <a href="http://blog.csdn.net/chaoyuan899/article/details/38583759" target="_blank" rel="external">IOS常用正则表达式</a></p>
<table>
<thead>
<tr>
<th>表达式</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>[\u4e00-\u9fa5]</td>
<td>匹配中文字符</td>
</tr>
<tr>
<td>[^\x00-\xff]</td>
<td>匹配双字节字符(包括汉字在内)</td>
</tr>
<tr>
<td>\n\s*\r</td>
<td>匹配空白行</td>
</tr>
<tr>
<td>&lt;(\S*?)[^&gt;]*&gt;.*?&lt;/\1&gt;\</td>
<td>&lt;.*? /&gt;</td>
</tr>
<tr>
<td>^\s*\</td>
<td>\s*$</td>
</tr>
<tr>
<td>\w+([-+.]\w+)*@\w+([-.]\w+)*.\w+([-.]\w+)*</td>
<td>匹配Email地</td>
</tr>
<tr>
<td>[a-zA-z]+://[^\s]*</td>
<td>匹配网址URL</td>
</tr>
<tr>
<td>\d{3}-\d{8}\</td>
<td>\d{4}-\d{7}</td>
</tr>
<tr>
<td>[1-9]\d{5}(?!\d)</td>
<td>匹配中国邮政编码</td>
</tr>
<tr>
<td>\d+.\d+.\d+.\d+</td>
<td>匹配ip地址</td>
</tr>
</tbody>
</table>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>正则表达式，又称正规表示法、常规表示法（英语：Regular Expression，在代码中常简写为regex、regexp或RE），计算机科学的一个概念。正则表达式使用单个字符串来描述、匹配一系列符合某个句法规则的字符串。在很多文本编辑器里，正则表达式通常被用来检索、替换那些符合某个模式的文本。</p>
</blockquote>
<ol>
<li>系统自带的, 如: NSPredicate, rangeOfString：option, NSRegularExpression</li>
<li><a href="http://regexkit.sourceforge.net/RegexKitLite/">RegexKitLite</a> RegexKitLite 是一个轻量级的 Objective-C 的正则表达式库,支持 Mac OS X 和 iOS,使用 ICU 库开发。</li>
</ol>
<p>至于<code>RegexKitLite</code>, 这里不做介绍。着重介绍系统自带的那几个办法。</p>
<blockquote>
<p>PS: 阅读本文前提是您已经掌握了正则基本语法, 如果对正则还不太了解, 可以参考以下几个链接:</p>
</blockquote>
<p>正则表达式学习链接：</p>
<ol>
<li><a href="http://doslin.com/regular%20expressions/2014/03/11/learn-regular-expressions-in-about-55-minutes.html">55分钟学会正则表达式</a></li>
<li><a href="http://www.regexlab.com/zh/regref.htm">揭开正则表达式的神秘面纱</a></li>
<li><a href="http://www.regexplib.com/DisplayPatterns.aspx?cattabindex=4&amp;categoryId=5">RegExLib.com(正则表达式库查询)</a></li>
</ol>
<hr>]]>
    
    </summary>
    
      <category term="iOS开发" scheme="http://http://colin1994.github.io/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="正则" scheme="http://http://colin1994.github.io/tags/%E6%AD%A3%E5%88%99/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[阿里, 网易, 腾讯]]></title>
    <link href="http://http://colin1994.github.io/2015/07/11/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/"/>
    <id>http://http://colin1994.github.io/2015/07/11/面试总结/</id>
    <published>2015-07-11T02:14:52.000Z</published>
    <updated>2015-07-13T07:27:15.000Z</updated>
    <content type="html"><![CDATA[<h1 id="一个多月来的面试总结(阿里,_网易,_腾讯)">一个多月来的面试总结(阿里, 网易, 腾讯)</h1><blockquote>
<p>想必关注我的朋友都发现了, 最近我发表原创文章的数量和质量大大不如以前了, 也不怎么活跃了。主要原因是现在大三了, 7月份就能离校实习了, 所以前段时间也在为找实习忙碌着。接下去应该就能恢复正常, 继续为大家分享一些iOS开发上的小技巧, 毕竟, 也算拿到了心仪的offer。</p>
</blockquote>
<a id="more"></a>
<p><strong>接下去, 就围绕这一个多月来参加的几场面试, 做一个总结。 设计的公司主要包括阿里研发部分, 网易邮件, 腾讯微信。希望能给同样在为找实习努力的战友提供一些帮助。(<code>已经拿到网易和微信的offer</code>)</strong></p>
<p>PS: 总结不是空穴来风, 每次面试完, 我都会坐着认真总结之前的面试, 记录每道题, 每个答案的关键点, 再比对下自己的回答是否完整。</p>
<p><img src="http://img.my.csdn.net/uploads/201504/25/1429944250_1723.jpeg" width="900"></p>
<p><strong>另外, 博客篇幅有限, 并且题目并不是适合每一位同学(我是iOS开发相关, 题目主要都是iOS相关), 所以不适合把完整的题目都描述出来, 文章主要是一些经验交流。 <code>如果需要完整面试题目的, 麻烦留下邮箱, 我看到了会一一发送</code>。</strong></p>
<blockquote>
<p>以下按参加的时间先后来描述, 另外我的个人主页 <a href="http://colin1994.xyz" target="_blank" rel="external">Colin’s Nest</a>, 里面有我的一些介绍, 包括简历。感兴趣的可以瞅瞅。</p>
</blockquote>
<h1 id="阿里_研发部门">阿里_研发部门</h1><p>阿里是最早投的一家公司, 3月初那会, 本来还在学习科二的, 然后在阿里的学长, 催着要简历, 说内推已经开始了。于是乎, 我就借机把科二给退了(被教练骂成狗的滋味真不好受, 还好及时跑了)。学长给内推的部门是和o2o相关, iOS开发。</p>
<h2 id="阿里一面_电话">阿里一面_电话</h2><p>然后等了几天, <code>3月9号</code>, 一面开始了, 节奏很快, 总共通话时候是<code>26分钟</code>..</p>
<p>电话来的比较突然, 那会还在看文章呢。一面过了, 但是具体表现并不是很理想。</p>
<ol>
<li>先是自我介绍。</li>
<li><p>问iOS相关。 比如:</p>
<ol>
<li>Category支持添加属性与成员变量吗</li>
<li>iOS7之后, 蓝牙的围栏功能</li>
<li>说说Cell重用原理<br>…</li>
</ol>
</li>
</ol>
<ol>
<li><p>设计模式。这里主要问了iOS常用的设计模式, 以及如何应用到实际需求中去。</p>
<ol>
<li>MVC是否了解?介绍下使用情况。</li>
<li>MVC里面, View怎么通知到Model</li>
<li>了解delegate吗?并介绍</li>
<li>如果现在要实现一个下载功能, 你要如何设计。说说每个类具体做什么</li>
</ol>
</li>
<li><p>然后就是再交流, 对o2o有什么看法, 有没有想问他的…</p>
</li>
</ol>
<h2 id="阿里二面_电话">阿里二面_电话</h2><p>然后又过了两天, 二面如约来了, 36分钟, 感觉比上次好, 不过结果…</p>
<p>二面和一面一样, 都围绕iOS, 问了objc相关, 内存管理, 设计模式等。</p>
<p>但是更多的, 询问了我平时的一些开发习惯, 以及一些设计题。</p>
<p>比如:</p>
<ul>
<li>如果让你设计KVO, 要怎么设计</li>
<li>现在你是如何适配的</li>
<li>比较下storyboard和全代码</li>
<li>如果有1w张图片要在屏幕滚动显示(每张图片满屏), 至少要几个cell, 如何实现循环滚动</li>
<li>平时是怎么进行测试的, 内存方面怎么测试</li>
<li>平时自己有没有封装过比较复杂的控件</li>
<li>平时如何实现网络请求, 一般返回的数据是什么格式, 如何解析..</li>
<li>如何实现类似 “Find My iPhone” 这样功能</li>
</ul>
<p>二面相比一面来说, 准备的更充分了。回答问题上, 也比较积极, 考虑的也比较多。不过二面结束没多久, 内推状态就变成”待回绝”。 Over了…</p>
<p>学长询问了面试官, 结果是: “整体还不错, 但总感觉少了点什么..”</p>
<p>经历完阿里这一次, 总体来说, 对我打击还挺大的。毕竟, 第一次就跪了..  同时, 更多的是对自我的总结。</p>
<p>首先应该是准备不够充分, 然后就是基础不够扎实。从面试官问的问题来看, <code>大公司还是对基础要求比较高</code>。</p>
<h2 id="阿里校招_在线笔试">阿里校招_在线笔试</h2><p>之后, 又投了阿里校招, 参加了在线笔试。具体题目可以在这里看到:<a href="http://www.nowcoder.com/companyCenterTerminal_134" target="_blank" rel="external">阿里笔试题</a></p>
<p>虽然笔试通过了, 不过现场面试的时间和课程冲突了, 然后就没有跑去杭州面试。</p>
<p>于是乎, 和阿里就这样不了了之了。</p>
<h1 id="网易_邮件部门(拿到offer)">网易_邮件部门(拿到offer)</h1><p>在结束阿里内推没多久, 偶然在网上看到网易的一个招聘。 因为方式比较新颖, 就关注了下。</p>
<p><img src="http://img.my.csdn.net/uploads/201504/25/1429947172_7894.jpg" width="900"></p>
<p><strong>答案就在门的背后！(至于如何解题欢迎大家交流)</strong></p>
<p>解开这个题目后, 拿到了面试官的邮箱.. 然后抱着侥幸的心理, 就投了。</p>
<h2 id="网易一面_电话">网易一面_电话</h2><p>没想到, 第二天就来电话了。效率很高。 <code>55分钟</code>.. 感觉被虐哭了。</p>
<p>网易考核的主要是<code>objc, iOS, 设计模式, 算法</code>。 </p>
<p>主要如下:</p>
<ol>
<li>autorelease 和 @autoreleasepool区别</li>
<li>unsafe_unretained , weak, assign 区别</li>
<li>在block里面, 对数组执行添加操作, 这个数组需要声明成 __block吗</li>
<li>在block里面, 对NSInteger进行修改, 这个NSInteger是否需要声明成__blcok</li>
<li>NSThread, NSOperation, GCD区别</li>
<li>runtime什么时候用</li>
<li>通知和KVO区别</li>
<li>深度遍历和广度遍历使用场景</li>
<li>常用的设计模式</li>
<li>算法题 * 2</li>
<li>自己有什么优点</li>
</ol>
<p>…</p>
<p>面完之后, 感觉整个人都不好了。<code>内存管理</code>部分, 都能说出那么一些, 但是一说多了, 就不知道怎么回答了。总体来说, 还是基础不够扎实。研究不够透彻。</p>
<p>然后面试完, 一个很大的感受就是, <code>一次面试, 学到的, 比自己闷头看书一个月, 学到的还多</code>。<code>面试很直观的反应出了自己的不足</code>。于是乎, 针对内存管理, 多线程等知识上的不足。 我重新把那本狮子头的书认真看了遍。</p>
<p>PS: 如果觉得这方面知识也有所欠缺的话, 可以到这里下载<code>Objective-C高级编程 iOS与OS X多线程和内存管理.pdf</code>这本书, 极力推荐。</p>
<p>下载链接: <a href="http://pan.baidu.com/s/1pJsno7p" target="_blank" rel="external">电子书分享</a></p>
<p>本以为, 网易也就是这么结束了。 没想到过了几天, 人力资源部的妹子打电话来, 约去杭州面试。</p>
<p>于是乎于是乎, 去杭州浪了~</p>
<h2 id="网易二面_现场">网易二面_现场</h2><p>初到杭州, 很巧的是在机场大巴上碰到了一个去H3C培训的大叔, 更巧的是, 他也住我那个酒店。 然后就跟着他, 一路聊到酒店.. 挺好。</p>
<p>第二天网易面试, 还是挺紧张的。9点多到了待客大厅, 填了表, 然后等面试官。然后网易给我的一个感觉就是, 很<code>内敛, 低调</code>, 感觉挺好。</p>
<p>之后一下来了两个面试官, 领我到单独的小隔间面试.. 一次两个, 有点虚。</p>
<p>不过没多久, 就适应了这种气氛, 然后和面试官交流也比较开心。</p>
<p>主要问题如下:</p>
<ol>
<li>我是上次和你通电话的那位, 你觉得自己上次表现怎么样</li>
<li>这段时间, 都在干嘛</li>
<li>我们认真看了你的github, 感觉还不错</li>
</ol>
<p>然后给我一张纸, 问了几个算法题:</p>
<ol>
<li>如何实现一个数组每个元素依次向右移动k位。(后头的往前面补) 比如: [1, 2, 3, 4, 5] 挪两位变成[4, 5, 1, 2, 3]</li>
<li>实现连连看算法</li>
<li>T9算法如何实现, 全拼算法</li>
</ol>
<p>总的来说, 问的都是<code>算法</code>相关, 没有再涉及iOS部分。 然后就算法来说, 回答的还不错。虽然每道题不是一步到位, 但是在与面试官沟通过程中, 最后都逐步完善了自己的算法。</p>
<p>然后就是和面试官聊天了, 两位面试官都很平易近人, 聊得也比较开心。 然后就约了下午HR面。</p>
<p>…面试完后, 包括面试官已经人力管理的妹子都邀请我去网易食堂吃饭, 不过毕竟腼腆, 我给拒绝了。出来才发现.. 找个饭店真不容易.. 早知道就厚着脸皮试试”丁家猪”了。</p>
<h2 id="网易HR面_现场">网易HR面_现场</h2><p>下午HR面, HR是个很漂亮的妹子.. 整个过程都比较欢乐， 虽然一些问题上可能有不同看法。</p>
<p>HR问的主要是一些职业规划, 抗压能力, 学习习惯, 别人怎么看待自己等等..</p>
<p>面试完以后, HR问我接下去准备干嘛, 我说我要一路玩到萧山机场(那天酒店在萧山机场附近)。然后她打趣到:”真潇洒阿..”</p>
<p>杭州确实很美, 不够时间关系, 就在西湖附近逛了会。 附带两张图片。</p>
<p><img src="http://img.my.csdn.net/uploads/201504/25/1429949156_7015.JPG" width="900"><br><img src="http://img.my.csdn.net/uploads/201504/25/1429949125_2851.JPG" width="900"></p>
<p>3.31参加完网易杭州的现场面试. 4月23号收到网易的正式offer。 总算, 踏实了…</p>
<h1 id="腾讯_微信事业部(拿到offer)">腾讯_微信事业部(拿到offer)</h1><p>之前腾讯校招的时候, 投了简历。 不过一直到周围同学都参加了在线笔试, 我仍然没收到通知的时候, 我基本上已经放弃了。觉得自己应该在简历环节就被刷了, 比较凄凉..</p>
<h2 id="微信一面_电话">微信一面_电话</h2><p>不过4月20的时候, 突然来了个电话, 对方说是腾讯微信事业部的。 很突然, 完全没想到。 可以说， 幸福来的太突然了..</p>
<p>电话用时<code>1小时10分</code>.. 中间把院长的课给翘了.. - -!</p>
<p>主要还是围绕这几个方面: 项目, 设计模式, 算法..</p>
<p>问题包括:</p>
<ol>
<li>如何保证软件质量, 怎么分析Crash日志</li>
<li>谈谈你觉得最重要的一个项目</li>
<li>你的个人主页是怎么写的</li>
<li>假如我是一名初学者, 你会向我推荐哪些第三方库</li>
<li>使用了第三方库, 有看他们是怎么实现的吗</li>
<li>有没有看过大型项目的源码</li>
<li>强连通量算法</li>
<li>最短路径算法</li>
<li>排序算法</li>
<li>25个人, 每5人1个跑道, 最少经过几次赛跑, 得到前3名</li>
</ol>
<p>腾讯给我的感觉就是, 很靠谱。 <code>这几轮面试, 就腾讯当场就给出了结果, 不管是一面, 二面, 还是HR面 而不是说让你再等通知。 给我的感觉非常好</code>。</p>
<p>一面最后, 这个面试官就说, 他这里通过了, 问我明天什么时候有时间, 给我约下另外一个面试官。</p>
<h2 id="微信二面_collabedit+电话">微信二面_collabedit+电话</h2><p>第二天微信二面如约来了, 面试官很好。提前打电话问我有没有时间, 我表示想午睡一会, 一个小时后开始。他答应了。</p>
<p>然后一个小时后, 另外一个面试官打电话来了, 要我登录 <a href="http://collabedit.com/xxxx" target="_blank" rel="external">http://collabedit.com/xxxx</a> 答题。</p>
<p>collabedit可以在线共享。 就是说, 我这里敲什么, 面试官那里就能同步显示。 主要是考核编码能力。</p>
<p>主要是两个算法题, 第一道要求写出完整代码, 第二道思路交流。</p>
<ol>
<li>求两个整数的最大公约数</li>
<li>微信用户都是双向的好友，a是b的好友，那么b一定是a的。给定一个用户列表，有些用户是好友，有些不是，请判断，这些用户是否可以划分为两组，每组内的用 户，互相都不是好友。如果能，请给出这个划分。</li>
</ol>
<p>完了之后, 面试官问了我实习时间, 然后问我对深圳和广州的看法(因为我第一志愿填的是深圳, 微信本部在广州), 问我愿意去广州吗。 之后就表示他这里也通过了。 这一两天给我约HR。</p>
<h2 id="微信HR面_电话">微信HR面_电话</h2><p>果然, 两天后, 微信HR来电话了。</p>
<p>和她聊天很轻松, 从头到尾都是喊我’龙泽 .. 龙泽’, 感觉很亲切。 主要也是围绕职业规划等展开。</p>
<p>然后最后就问我, 是否愿意来微信实习, 如果愿意, 马上就给我offer, 如果还犹豫, 考虑清楚再联系她。</p>
<p>当然, 我表示愿意。 然后hr留了微信号, 说安排同事给我发确认函。</p>
<p>当天晚上, 另外一个人力资源的妹子打电话, 和我讨论薪资等问题..</p>
<p>总的来说, 微信从一面, 到最后确定下来, 就经历了4天。 非常效率。 中间也很愉快。</p>
<p>说来也巧, 网易和微信是同时发来来的offer。网易电话刚放下没多久, 微信hr就来电话了。所以当时两边是先都允诺能去实习了，毕竟时间太紧, 还没考虑好。</p>
<p>之后还是因为个人原因, 选择了微信, 所以当天下午就打电话给网易, 告知了他们。多少也有些遗憾, 毕竟网易也是我很向往的一家公司。</p>
<p>好了。 到此, 这段时间的面试总结就写好了。下面就我个人来说, 提几点建议:</p>
<ol>
<li>基础。 不管是哪个方向, 基础很重要。就比如iOS, objc的方方面面都必须了解。</li>
<li>全面。 有些东西, 虽然不见得能答好, 但你至少应该懂。</li>
<li>设计模式。 主流的那些设计模式非常有必要了解。</li>
<li>算法。 这个不是说恶补能补好的。建议大家长期积累。 另外推荐&lt;剑指offer&gt;这本书。同时, 可以在这里线上答题: <a href="http://www.nowcoder.com/books/coding-interviews" target="_blank" rel="external">牛客网-剑指offer</a></li>
<li>简历一定要真实! 基本上面试官都是围绕简历展开交流的。 懂或不懂, 一问就知道, 没必要搬起石头砸自己的脚</li>
<li>提前准备。 比如自我介绍, 项目介绍, 职业规划等等。基本都是必问的题目，能提前准备就提前准备好。</li>
<li>开源, 分享, 积累。 我一直认为, 分享和开源是程序员进步的不二法门。 我建议每个程序员都应该有自己的Github, 有自己的博客。就这几次面试来说, 博客和Github帮了我多。 网易面试官直言, 他们认真看过我的Github, 微信HR问我要CSDN博客ID, 说她很感兴趣。帮助别人, 也是帮助自己。</li>
<li>沟通。 有时候一个问题, 可能不懂, 甚至题目都不理解。不要害怕, 主动与面试官沟通。 我在网易面试的时候, 关于全拼算法的实现, 我当时连全拼都没一个完整的概念, 它要满足哪些条件更加不清楚。我跟面试官坦诚我不懂这个概念, 与他们的一步步沟通中实现了自己的算法。 所以沟通, 远比闷头写, 到头来还可能错误来的实在。</li>
<li>自信。 能得到面试机会, 最起码证明, 你很优秀。 我觉得自信很重要。 如果一开始, 就表现的慌慌张张, 畏首畏尾, 那么不管是你自己的发挥, 还是面试官对你的看法, 我觉得都不会很好。 </li>
</ol>
<p>敲了一下午.. 真累。</p>
<p><code>希望和我一样大三找实习的朋友, 都能拿到自己心仪的offer!</code></p>
<p><strong>学习的路上, 与君共勉。</strong></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="一个多月来的面试总结(阿里,_网易,_腾讯)">一个多月来的面试总结(阿里, 网易, 腾讯)</h1><blockquote>
<p>想必关注我的朋友都发现了, 最近我发表原创文章的数量和质量大大不如以前了, 也不怎么活跃了。主要原因是现在大三了, 7月份就能离校实习了, 所以前段时间也在为找实习忙碌着。接下去应该就能恢复正常, 继续为大家分享一些iOS开发上的小技巧, 毕竟, 也算拿到了心仪的offer。</p>
</blockquote>]]>
    
    </summary>
    
      <category term="面试" scheme="http://http://colin1994.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="随笔" scheme="http://http://colin1994.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>