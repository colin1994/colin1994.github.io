<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Colin&#39;s Nest</title>
    <link>http://http://colin1994.github.io/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description></description>
    <pubDate>Sat, 25 Aug 2018 03:05:22 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Metal 系列教程</title>
      <link>http://http://colin1994.github.io/2018/08/25/metal-tutorial/</link>
      <guid>http://http://colin1994.github.io/2018/08/25/metal-tutorial/</guid>
      <pubDate>Sat, 25 Aug 2018 02:59:45 GMT</pubDate>
      <description>
      
        &lt;p&gt;从 2014 年，Apple 正式推出 Metal 到现在，这个 Metal 系列教程，酝酿了很久，却迟迟没有进展。&lt;/p&gt;
&lt;p&gt;直到 &lt;strong&gt;WWDC 2018，Apple 宣布 iOS 12 将弃用 OpenGL / CL&lt;/strong&gt;，我想，这或许是个机会。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Apps built using OpenGL ES will continue to run in iOS 12, but Open GL ES is deprecated in iOS 12. Games and graphics-intensive apps that previously used OpenGL ES should now adopt Metal.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://diycode.b0.upaiyun.com/photo/2018/de088c47205fd04fc8d9e11748813b10.jpeg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;这个系列会回顾整理之前学习的内容，有序输出。算是对自己的一个交代，同时也希望，能帮助到那些想要学习 Metal 却不知道怎么下手的朋友。&lt;/p&gt;
      
      </description>
      
      <content:encoded>&lt;p&gt;从 2014 年，Apple 正式推出 Metal 到现在，这个 Metal 系列教程，酝酿了很久，却迟迟没有进展。&lt;/p&gt;
&lt;p&gt;直到 &lt;strong&gt;WWDC 2018，Apple 宣布 iOS 12 将弃用 OpenGL / CL&lt;/strong&gt;，我想，这或许是个机会。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Apps built using OpenGL ES will continue to run in iOS 12, but Open GL ES is deprecated in iOS 12. Games and graphics-intensive apps that previously used OpenGL ES should now adopt Metal.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://diycode.b0.upaiyun.com/photo/2018/de088c47205fd04fc8d9e11748813b10.jpeg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;这个系列会回顾整理之前学习的内容，有序输出。算是对自己的一个交代，同时也希望，能帮助到那些想要学习 Metal 却不知道怎么下手的朋友。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;blockquote&gt;
&lt;p&gt;这系列文章，目前发布在我的小专栏 &lt;a href=&quot;https://xiaozhuanlan.com/colin&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iOS 图像处理&lt;/a&gt; 上。欢迎订阅~&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;那么，&lt;strong&gt;什么是 Metal&lt;/strong&gt; ？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Render advanced 3D graphics and perform data-parallel computations using the GPU.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;总结来说，&lt;strong&gt;Metal 能让你尽可能的发挥 GPU 强大的渲染、运算的能力。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这里，我不做过多的阐述，如果你对图像处理，游戏编程感兴趣，又或者你只是认可这项技术，相信它是未来，值得投资学习。那么，我想这个系列不会让你失望。&lt;/p&gt;
&lt;p&gt;这个系列的文章，&lt;strong&gt;是教程、实践，而不是文档&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;我会尽可能，在实现功能的过程中，穿插介绍各个知识点。而不是一股脑的全部输出。&lt;/p&gt;
&lt;p&gt;不然可能看了四五篇，发现自己还是什么都做不了，还是不懂之前学到的具体是什么。&lt;/p&gt;
&lt;p&gt;然后，就不了了之了。&lt;/p&gt;
&lt;p&gt;Metal 系列的实战教程，会循序渐进，穿插详细介绍各个用到的 Metal 对象。&lt;/p&gt;
&lt;p&gt;由于 Metal（iOS 8 + A7），MetalKit（iOS 9 + A7）的软／硬件限制，以及不同读者的需求，之后的配套 Demo，会同时包含 iOS+Swift 和 macOS+ObjC 两种，文章以 iOS+Swift 进行演示。并且尽可能不用 MetalKit，功能都自己实现（避免一些实现细节被屏蔽了，以及降低系统版本限制）。当然，也会有专门的文章，介绍 MetalKit 相关。&lt;/p&gt;
&lt;p&gt;另外，每节 Demo 都有 start ／ end 两份代码，建议阅读完后，自己根据 start 基础工程，完成本节新的内容。该系列 Demo 主要是为了学习 Metal，所以一些语法特性，代码／文件结构，容错，封装等，不会去细究。&lt;/p&gt;
&lt;p&gt;每篇文章争取控制在 15 分钟的阅读量，细分知识点，便于随时阅读，学习。&lt;/p&gt;
&lt;p&gt;另外，之后的实战，会侧重于&lt;strong&gt;图像处理&lt;/strong&gt;，比如&lt;strong&gt;滤镜，画笔，马赛克，增高，相机，AR 贴图&lt;/strong&gt;等。开发过程中，也会结合系统的其他框架，比如 &lt;strong&gt;Core Image、ARKit、Core ML、Vision&lt;/strong&gt; 等，做一些好玩的事情。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;PS：&lt;br&gt;订阅后的朋友，可以加我微信：wxidlongze，拉你进群。交流，扯淡，学习资源分享～&lt;br&gt; 最后，源码在小专栏中有链接～&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&quot;目录&quot;&gt;目录&lt;/h2&gt;&lt;h3 id=&quot;基础概念：&quot;&gt;基础概念：&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://xiaozhuanlan.com/topic/3420765198&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;一。Metal 概述&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Metal 是什么，Metal 能做什么，为什么要用 Metal。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://xiaozhuanlan.com/topic/1287954630&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;二。Metal 框架一览&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Metal 进行图像处理的整体框架。宏观介绍渲染管线。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;基础实践：&quot;&gt;基础实践：&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://xiaozhuanlan.com/topic/9870134265&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;三。清屏&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;最最最最简单的一个基础工程。介绍整体的显示渲染流程。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://diycode.b0.upaiyun.com/photo/2018/4677bca4a9633908b463e670646d434c.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://xiaozhuanlan.com/topic/6503719284&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;strong&gt;四。绘制一个三角形&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;堪称图形界的 Hello World。会较为完整的过一遍渲染管线。麻雀虽小，五脏俱全。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://diycode.b0.upaiyun.com/photo/2018/68788a0103eac111ea445b0dcf02fa58.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;五。MSL 介绍&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;介绍如何编写 Metal 着色器。以及它们是如何被加载工作的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;六。显示图片&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;还在纠结绘制三角形有什么用吗？&lt;/p&gt;
&lt;p&gt;这节会教你如何加载纹理，如何显示相册导入的图片。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;七。视图封装&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;封装一个通用的控件。支持不同 contentMode，支持缩放，最大显示像素格，长按对比。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;案例实战：&quot;&gt;案例实战：&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;八。色温滤镜&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;基础的颜色滤镜，以及如何使用 CLUT（Color Lookup Table）实现效果。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;九。多重滤镜&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;滤镜链的实现，多个滤镜组合。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;十。增高&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不再是逐像素的简单处理，涉及形变。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;…&lt;br&gt;&lt;strong&gt;To be continued ~&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;这系列文章，目前发布在我的小专栏 &lt;a href=&quot;https://xiaozhuanlan.com/colin&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iOS 图像处理&lt;/a&gt; 上。欢迎订阅~&lt;/p&gt;
&lt;/blockquote&gt;
</content:encoded>
      
      <comments>http://http://colin1994.github.io/2018/08/25/metal-tutorial/#disqus_thread</comments>
    </item>
    
    <item>
      <title>渲染基本图元</title>
      <link>http://http://colin1994.github.io/2017/04/18/OpenGLES-Lesson03/</link>
      <guid>http://http://colin1994.github.io/2017/04/18/OpenGLES-Lesson03/</guid>
      <pubDate>Tue, 18 Apr 2017 10:25:12 GMT</pubDate>
      <description>
      
        &lt;p&gt;在&lt;a href=&quot;http://colin1994.github.io/2017/04/09/OpenGLES-Lesson02/&quot;&gt;上篇文章&lt;/a&gt;中，已经介绍了 OpenGL ES 的基础环境搭建，并且实现了设置背景色功能。&lt;/p&gt;
&lt;p&gt;在本文中，我们将会在上文的基础上，渲染基本图元，三角形。在这个过程中，将会详细介绍可编程图形渲染管线是如何工作的。&lt;/p&gt;
&lt;p&gt;最终的效果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xkc7a.com1.z0.glb.clouddn.com/2017013028167QQ20170130-174258@2x.png&quot; alt=&quot;2017013028167QQ20170130-174258@2x.png&quot;&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded>&lt;p&gt;在&lt;a href=&quot;http://colin1994.github.io/2017/04/09/OpenGLES-Lesson02/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;上篇文章&lt;/a&gt;中，已经介绍了 OpenGL ES 的基础环境搭建，并且实现了设置背景色功能。&lt;/p&gt;
&lt;p&gt;在本文中，我们将会在上文的基础上，渲染基本图元，三角形。在这个过程中，将会详细介绍可编程图形渲染管线是如何工作的。&lt;/p&gt;
&lt;p&gt;最终的效果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xkc7a.com1.z0.glb.clouddn.com/2017013028167QQ20170130-174258@2x.png&quot; alt=&quot;2017013028167QQ20170130-174258@2x.png&quot;&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;0-_初始工程&quot;&gt;0. 初始工程&lt;/h2&gt;&lt;p&gt;你可以从&lt;a href=&quot;https://github.com/colin1994/OpenGLES/blob/master/Lesson02/OpenGLESDemo_1.zip&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;下载到初始工程，避免重复实现一些和本节内容不相干的事情。&lt;/p&gt;
&lt;p&gt;这是上一节的最终工程，包含了 OpenGL ES 的基础环境搭建。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;PS：&lt;/p&gt;
&lt;p&gt;在之后的步骤里，如果你细心观察对比，你会发现其实它就是围绕图形渲染管线展开的，把之前介绍的内容，用代码的方式实现出来，具体流程可以参照下图回顾：&lt;img src=&quot;http://7xkc7a.com1.z0.glb.clouddn.com/20170112148420103614414.jpg?imageView2/0/format/jpg&quot; alt=&quot;20170112148420103614414.jpg&quot;&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;1-_顶点数据&quot;&gt;1. 顶点数据&lt;/h2&gt;&lt;p&gt;开始渲染图形之前，我们必须先给 OpenGL ES 输入一些顶点数据。&lt;/p&gt;
&lt;p&gt;为了渲染一个如图所示的三角形，我们需要以数组的形式传递3个 3D 坐标（之前提到过，在 OpenGL 中，任何事物都在 &lt;strong&gt;3D&lt;/strong&gt; 空间中）作为图形渲染管线的输入，用来表示一个三角形，这个数组叫做顶点数据（Vertex Data），&lt;strong&gt;顶点数据是一系列顶点的集合&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;在这个简单的例子里，我们一共要指定三个顶点，每个顶点只由一个 3D 位置和一个颜色值组成。&lt;/p&gt;
&lt;p&gt;自定义顶点结构体如下：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt; position[&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;]; &lt;span class=&quot;comment&quot;&gt;// 3D 位置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt; color[&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;];    &lt;span class=&quot;comment&quot;&gt;// 颜色值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; CustomVertex;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;PS：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Q：&lt;/strong&gt;这里的颜色值，用四维向量表示可以理解（RGBA），那么 3D 位置为什么也是四维向量（XYZW）呢（包含4个元素的数组表示的向量）？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A：&lt;/strong&gt; 3D 图形渲染过程中用到了 4x4 的矩阵（4行4列），矩阵乘法要求 nxm &lt;em&gt; mxp（n行m列 乘 m行p列）才能相乘，注意 m 是相同的，所以 1x4 &lt;/em&gt; 4x4 才能相乘。&lt;/p&gt;
&lt;p&gt;The w in vec4(x, y, z, w) is used for clipping, and plays its part while linear algebra transformations are applied to the position.&lt;/p&gt;
&lt;p&gt;By default, this should be set to 1.0.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;See here for some more info：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://web.archive.org/web/20160408103910/http://iphonedevelopment.blogspot.com/2010/11/opengl-es-20-for-iOS-chapter-4.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://web.archive.org/web/20160408103910/http://iphonedevelopment.blogspot.com/2010/11/opengl-es-20-for-iOS-chapter-4.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;针对此三角形，我们可以填充对应的数据如下：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; CustomVertex vertices[] =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123; .position = &amp;#123; &lt;span class=&quot;number&quot;&gt;-1.0&lt;/span&gt;,  &lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;#125;, .color = &amp;#123; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;#125; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123; .position = &amp;#123; &lt;span class=&quot;number&quot;&gt;-1.0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;-1.0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;#125;, .color = &amp;#123; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;#125; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123; .position = &amp;#123;  &lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;-1.0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;#125;, .color = &amp;#123; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;#125; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;虽然 OpenGL 是在 3D 空间中工作的，但是我们渲染的是一个 2D 三角形，所以我们可以将它顶点的 z 坐标设置为 0.0。这样子的话三角形每一点的&lt;strong&gt;深度&lt;/strong&gt;都是一样的，从而使它看上去像是 2D 的。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;PS：&lt;/p&gt;
&lt;p&gt;深度通常可以理解为 z 坐标，它代表一个像素在空间中和你的距离，如果离你远就可能被别的像素遮挡，你就看不到它了，它会被丢弃，以节省资源。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;另外，没有特殊操作的情况下，W 轴默认都设置为 1.0。&lt;/p&gt;
&lt;h2 id=&quot;2-_顶点缓存对象（VBO）&quot;&gt;2. 顶点缓存对象（VBO）&lt;/h2&gt;&lt;p&gt;定义了上述顶点数据后，我们会把它作为输入发送给图形渲染管线的第一个处理阶段：&lt;strong&gt;顶点着色器&lt;/strong&gt;。它会在 GPU 上创建内存用于储存我们的顶点数据。&lt;/p&gt;
&lt;p&gt;我们通过顶点缓存对象（Vertex Buffer Objects，&lt;strong&gt;VBO&lt;/strong&gt;）管理这个内存，它会在 GPU 内存（通常被称为显存）中储存大量顶点。使用这些缓存对象的好处是我们可以一次性的发送一大批数据到显卡上，而不是每个顶点发送一次。从 CPU 把数据发送到显卡相对较慢，所以只要可能我们都要尝试尽量一次性发送尽可能多的数据。当数据发送至显卡的内存中后，顶点着色器几乎能立即访问顶点，这是个非常快的过程。&lt;/p&gt;
&lt;p&gt;创建 VBO 的过程如下：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;GLuint vertexBuffer;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;glGenBuffers(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &amp;amp;vertexBuffer);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;glBindBuffer(GL_ARRAY_BUFFER, vertexBuffer);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;glBufferData(GL_ARRAY_BUFFER, &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(vertices), vertices, GL_STATIC_DRAW);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;和之前的其它对象一样，OpenGL ES 对象的创建离不开 Gen，Bin 操作。这里记住 VBO 的缓存类型是 &lt;strong&gt;GL_ARRAY_BUFFER&lt;/strong&gt; 即可。&lt;/p&gt;
&lt;p&gt;这里着重介绍下 &lt;code&gt;glBufferData&lt;/code&gt; 函数，它会把之前定义的顶点数据复制到缓存的内存中：&lt;/p&gt;
&lt;p&gt;它的原型如下：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; GL_APIENTRY &lt;span class=&quot;title&quot;&gt;glBufferData&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(GLenum target, GLsizeiptr size, &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; GLvoid* data, GLenum usage)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;target：缓存类型，这里指定 GL_ARRAY_BUFFER。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;size：传输数据的大小（以字节为单位）。直接通过 &lt;code&gt;sizeof(vertices)&lt;/code&gt; 计算出顶点数据大小即可。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;data：指向实际传输数据。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;usage：指定我们希望显卡如何管理给定的数据。它有三种形式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GL_STATIC_DRAW ：数据不会或几乎不会改变。&lt;/li&gt;
&lt;li&gt;GL_DYNAMIC_DRAW：数据会被改变很多。&lt;/li&gt;
&lt;li&gt;GL_STREAM_DRAW ：数据每次绘制时都会改变。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;三角形的位置数据不会改变，每次渲染调用时都保持原样，所以它的使用类型最好是GL_STATIC_DRAW。如果，比如说一个缓存中的数据将频繁被改变，那么使用的类型就是GL_DYNAMIC_DRAW 或 GL_STREAM_DRAW，这样就能确保显卡把数据放在能够高速写入的内存部分。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;3-_着色器编写&quot;&gt;3. 着色器编写&lt;/h2&gt;&lt;p&gt;准备好顶点数据后，接下去需要做的就是着色器的编写。关于着色器相关的内容，这节不做过多的解释，下节会针对着色器做详细的介绍。&lt;/p&gt;
&lt;p&gt;顶点着色器：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;attribute vec4 position;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;attribute vec4 color;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;varying vec4 colorVarying;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    colorVarying = color;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    gl_Position = position;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;片段着色器：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;varying lowp vec4 colorVarying;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    gl_FragColor = colorVarying;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;着色器是用着色器语言 GLSL（OpenGL Shading Language）编写的，它看起来很像C语言。&lt;/p&gt;
&lt;p&gt;在本节中，我们需要简单的知道这几个概念就好了：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;顶点着色器每个顶点执行一次，片段着色器每个片段执行一次。&lt;/li&gt;
&lt;li&gt;color，position 是变量，和我们自定义的顶点数据对应。&lt;/li&gt;
&lt;li&gt;colorVarying，顶点着色器和片段着色器中相同的变量，它们是相对应的。&lt;/li&gt;
&lt;li&gt;vec4 是参数类型，GLSL 内置的向量数据类型，这里我们用到的都是四元向量。&lt;/li&gt;
&lt;li&gt;attribute，存储类型限定符，表示链接，链接 OpenGL ES 的每一个顶点数据到顶点着色器（一个一个地）。可以简单理解成输入顶点属性。这里我们将 color，position 传入顶点着色器。&lt;/li&gt;
&lt;li&gt;varying，存储类型限定符，表示链接顶点着色器和片元着色器的内部数据。&lt;/li&gt;
&lt;li&gt;着色器由 main 函数开始执行，也可以自定义函数，和 C 都是一样的。&lt;/li&gt;
&lt;li&gt;lowp，精度限定符。&lt;/li&gt;
&lt;li&gt;gl_Position，内建变量，顶点着色器的输出值，而且是&lt;strong&gt;必须要赋值&lt;/strong&gt;的变量。对 gl_Position 设置的值会成为该顶点着色器的输出。&lt;/li&gt;
&lt;li&gt;gl_FragColor，和 gl_Position 一样，也是内建变量，对应片段的色值。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;理解完这几个概念，再看这两个着色器，就是设置对应顶点的位置和色值，再简单不过了。&lt;/p&gt;
&lt;p&gt;至此，你可能会有一些疑惑：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Q：着色器代码以什么形式存在？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A：&lt;/strong&gt;创建的时候，是通过传入字符串来实现的。所以着色器代码可以通过任何形式存在，最后加载成 NSString 来使用。这里我们在 Xcode 里头，一般是 &lt;strong&gt;New File —&amp;gt; Empty —&amp;gt; xx.vsh / xx.fsh&lt;/strong&gt;。然后在对应的文件里面添加代码。这样有个好处就是编辑起来有高亮，更直观。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Q：为什么传入的三个顶点色值是固定的，但是最终的效果却是渐变色？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A：&lt;/strong&gt;这是因为 &lt;strong&gt;varying&lt;/strong&gt; 变量存在&lt;strong&gt;内插（interpolate）&lt;/strong&gt;的过程。&lt;/p&gt;
&lt;p&gt;之前提到过，varying 变量的作用是从顶点着色器向片段着色器传值，&lt;strong&gt;但是值不是直接传递，会先进行内插&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;所谓内插，就像补间动画一样。比如想要把一系列散点连成平滑曲线，相邻已知点之间缺少很多点，此时就需要通过内插填补缺少的数据，最终平滑曲线上除已知点之外的所有点都是插值得到的。&lt;/p&gt;
&lt;p&gt;同样的，三角形的三个角色值给定后，其它的片段则根据插值计算出来，也就呈现来渐变的效果。&lt;/p&gt;
&lt;h2 id=&quot;4-_编译着色器&quot;&gt;4. 编译着色器&lt;/h2&gt;&lt;p&gt;我们已经有了着色器源码，但是为了能够让 OpenGL ES 使用它，我们必须在运行时动态编译它的源码。具体代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (GLuint)compileShader:(&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *)shaderName withType:(GLenum)shaderType &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *shaderPath = [[&lt;span class=&quot;built_in&quot;&gt;NSBundle&lt;/span&gt; mainBundle] pathForResource:shaderName ofType:&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSError&lt;/span&gt; *error;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *shaderString = [&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; stringWithContentsOfFile:shaderPath encoding:&lt;span class=&quot;built_in&quot;&gt;NSUTF8StringEncoding&lt;/span&gt; error:&amp;amp;error];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!shaderString) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        exit(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;* shaderStringUFT8 = [shaderString UTF8String];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; shaderStringLength = (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;)[shaderString length];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    GLuint shaderHandle = glCreateShader(shaderType);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    glShaderSource(shaderHandle, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &amp;amp;shaderStringUFT8, &amp;amp;shaderStringLength);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    glCompileShader(shaderHandle);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    GLint compileSuccess;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    glGetShaderiv(shaderHandle, GL_CO&lt;span class=&quot;built_in&quot;&gt;MPILE_STATUS&lt;/span&gt;, &amp;amp;compileSuccess);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (compileSuccess == GL_FALSE) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        GLchar messages[&lt;span class=&quot;number&quot;&gt;256&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        glGetShaderInfoLog(shaderHandle, &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(messages), &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &amp;amp;messages[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *messageString = [&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; stringWithUTF8String:messages];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;glGetShaderiv ShaderIngoLog: %@&quot;&lt;/span&gt;, messageString);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        exit(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; shaderHandle;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;获取 &lt;strong&gt;shaderStringUFT8&lt;/strong&gt; 的方式就不说明了，下面主要分析 OpenGL ES 相关 API 的调用情况：&lt;/p&gt;
&lt;p&gt;我们首先要做的是创建一个着色器对象，还是用 ID 来引用。所以我们储存这个顶点着色器为 &lt;code&gt;GLuint&lt;/code&gt;，然后用 &lt;code&gt;glCreateShader&lt;/code&gt; 创建这个着色器，它的原型如下：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;GLuint GL_APIENTRY &lt;span class=&quot;title&quot;&gt;glCreateShader&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(GLenum type)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;type：着色器类型，可选值有 &lt;strong&gt;GL_VERTEX_SHADER&lt;/strong&gt; 和 &lt;strong&gt;GL_FRAGMENT_SHADER&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下一步我们需要通过 &lt;code&gt;glShaderSource&lt;/code&gt; 把着色器源码附加到着色器对象上，它的原型如下：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; GL_APIENTRY &lt;span class=&quot;title&quot;&gt;glShaderSource&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(GLuint shader, GLsizei count, &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; GLchar* &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; *&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; GLint* length)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;shader：要编译的着色器对象。&lt;/li&gt;
&lt;li&gt;count：传递的源码字符串数量，这里只有一个。&lt;/li&gt;
&lt;li&gt;string：着色器真正的源码。&lt;/li&gt;
&lt;li&gt;length：着色器源码的长度。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最后，通过 &lt;code&gt;glCompileShader&lt;/code&gt; 来编译着色器，它的原型如下：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; GL_APIENTRY &lt;span class=&quot;title&quot;&gt;glCompileShader&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(GLuint shader)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;shader：待编译的着色器对象。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;至此，着色器的编译就完成了。&lt;/p&gt;
&lt;p&gt;但是，你可能希望知道在调用 &lt;code&gt;glCompileShader&lt;/code&gt; 后编译是否成功了，如果没成功的话，你还会希望知道错误是什么，这样你才能修正它们。剩余的一部分代码，则是检测编译时是否发生了错误。&lt;/p&gt;
&lt;p&gt;首先定义一个变量 &lt;strong&gt;compileSuccess&lt;/strong&gt; 来表示是否成功编译。然后用 &lt;code&gt;glGetShaderiv&lt;/code&gt; 检查是否编译成功。如果编译失败，会用 &lt;code&gt;glGetShaderInfoLog&lt;/code&gt; 获取错误消息，然后打印它。&lt;/p&gt;
&lt;p&gt;最后，在使用上，我们只需调用 &lt;code&gt;compileShader&lt;/code&gt;，即可获得对应的着色器对象。&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;GLuint vertexShader = [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; compileShader:&lt;span class=&quot;string&quot;&gt;@&quot;OpenGLESDemo.vsh&quot;&lt;/span&gt; withType:GL_VERTEX_SHADER];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;GLuint fragmentShader = [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; compileShader:&lt;span class=&quot;string&quot;&gt;@&quot;OpenGLESDemo.fsh&quot;&lt;/span&gt; withType:GL_FRAGMENT_SHADER];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;5-_着色器程序&quot;&gt;5. 着色器程序&lt;/h2&gt;&lt;p&gt;着色器程序对象（Shader Program Object）是多个着色器合并之后并最终链接完成的版本。如果要使用刚才编译的着色器，我们必须把它们链接为一个着色器程序对象，然后在渲染对象的时候激活这个着色器程序（已激活着色器程序的着色器将在我们发送渲染调用的时候被使用）。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;PS：&lt;/p&gt;
&lt;p&gt;当链接着色器至一个程序的时候，它会把每个着色器的输出链接到下个着色器的输入。当输出和输入不匹配的时候，会得到一个链接错误。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;对应的具体代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;GLuint programHandle = glCreateProgram();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;glAttachShader(programHandle, vertexShader);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;glAttachShader(programHandle, fragmentShader);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;glLinkProgram(programHandle);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;GLint linkSuccess;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;glGetProgramiv(programHandle, GL_LINK_STATUS, &amp;amp;linkSuccess);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (linkSuccess == GL_FALSE) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    GLchar messages[&lt;span class=&quot;number&quot;&gt;256&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    glGetShaderInfoLog(programHandle, &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(messages), &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &amp;amp;messages[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *messageString = [&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; stringWithUTF8String:messages];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;glGetProgramiv ShaderIngoLog: %@&quot;&lt;/span&gt;, messageString);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    exit(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;glUseProgram(programHandle);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;创建一个着色器程序对象很简单，直接通过调用 &lt;code&gt;glCreateProgram&lt;/code&gt; 函数即可，它会返回新创建着色器程序对象的 ID 引用。然后需要通过 &lt;code&gt;glAttachShader&lt;/code&gt;，把之前编译好的着色器附加到着色器程序对象上。它的原型如下：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;glAttachShader&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(GLuint program, GLuint shader)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;program：着色器程序对象。&lt;/li&gt;
&lt;li&gt;shader：需要附加的着色器。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;然后用 &lt;code&gt;glLinkProgram&lt;/code&gt; 链接它们，它的原型如下：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;glLinkProgram&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(GLuint program)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;program：着色器程序对象。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;就像着色器的编译一样，我们也可以检测链接着色器程序是否失败，并获取相应的日志。与之前不同，我们不会调用 &lt;code&gt;glGetShaderiv&lt;/code&gt; 和 &lt;code&gt;glGetShaderInfoLog&lt;/code&gt;，现在使用 &lt;code&gt;glGetProgramiv&lt;/code&gt; 和 &lt;code&gt;glGetProgramInfoLog&lt;/code&gt;，不再赘述。&lt;/p&gt;
&lt;p&gt;得到着色器程序对象后，我们可以调用 &lt;code&gt;glUseProgram&lt;/code&gt; 函数，用刚创建的程序对象作为它的参数，以激活这个程序对象。&lt;/p&gt;
&lt;p&gt;另外，在把着色器对象链接到着色器程序对象以后，不再需要它们，记得删除着色器对象，如下：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;glDeleteShader(vertexShader);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;glDeleteShader(fragmentShader);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;PS：&lt;/p&gt;
&lt;p&gt;glDeleteShader 删除不再使用的着色器。如果当前着色器链接到一个程序对象上，那么这个着色器将不会被真正的删除，直到此着色器不再链接到任何程序对象。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;6-_链接顶点属性&quot;&gt;6. 链接顶点属性&lt;/h2&gt;&lt;p&gt;现在，我们已经把输入顶点数据发送给了 GPU，并指示了 GPU 如何在顶点和片段着色器中处理它。但是，OpenGL ES 还不知道它该如何解析内存中的顶点数据，以及它该如何将顶点数据链接到顶点着色器的属性上。我们需要告诉 OpenGL ES 怎么做。&lt;/p&gt;
&lt;p&gt;我们传入的顶点数据 &lt;strong&gt;vertices&lt;/strong&gt;，是这样排布的：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xkc7a.com1.z0.glb.clouddn.com/2017020171966DA004F9B-C0A7-44FE-B747-AA5BEC0ABCF5.png&quot; alt=&quot;2017020171966DA004F9B-C0A7-44FE-B747-AA5BEC0ABCF5.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;从这个图上，我们可以很清晰知道我们的顶点数据是如何排布，每个字节对应哪些内容，但是 OpenGL ES 本身并不知道，我们应该告诉它如何解析这些顶点数据。&lt;/p&gt;
&lt;p&gt;首先，我们需要定义与着色器脚本相对应的变量，为了方便，可以直接使用枚举。&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;enum&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ATTRIBUTE_POSITION = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ATTRIBUTE_COLOR,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NUM_ATTRIBUTES&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;GLint glViewAttributes[NUM_ATTRIBUTES];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;glViewAttributes[ATTRIBUTE_POSITION] = glGetAttribLocation(programHandle, &lt;span class=&quot;string&quot;&gt;&quot;position&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;glViewAttributes[ATTRIBUTE_COLOR]  = glGetAttribLocation(programHandle, &lt;span class=&quot;string&quot;&gt;&quot;color&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;glEnableVertexAttribArray(glViewAttributes[ATTRIBUTE_POSITION]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;glEnableVertexAttribArray(glViewAttributes[ATTRIBUTE_COLOR]);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;PS：&lt;/p&gt;
&lt;p&gt;通过 NUM_ATTRIBUTES，可以很方便拿到变量的个数。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;然后使用 &lt;code&gt;glGetAttribLocation&lt;/code&gt;，来获得着色器变量的入口，使之绑定起来。它的原型如下：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; GL_APIENTRY &lt;span class=&quot;title&quot;&gt;glGetAttribLocation&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(GLuint program, &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; GLchar* name)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;program：着色器程序对象&lt;/li&gt;
&lt;li&gt;name：着色器中对应的变量名&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;然后，使用 &lt;code&gt;glEnableVertexAttribArray&lt;/code&gt; ，以顶点属性值作为参数，启用顶点属性（顶点属性默认是禁用的）。&lt;/p&gt;
&lt;p&gt;至此，顶点属性的绑定已经完成了，之后只需要在渲染的时候，为对应的顶点属性赋值即可。&lt;/p&gt;
&lt;p&gt;下面是对应的渲染代码，其中 &lt;strong&gt;/////////&lt;/strong&gt; 包围的是本节新增的：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)render &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    glBindFramebuffer(GL_FRAMEBUFFER, _framebuffer);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    glBindRenderbuffer(GL_RENDERBUFFER, _renderbuffer);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    glClearColor(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    glClear(GL_COLOR_BUFFER_BIT);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//////////////////&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    glViewport(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.frame.size.width, &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.frame.size.height);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    glVertexAttribPointer(glViewAttributes[ATTRIBUTE_POSITION], &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, GL_FLOAT, GL_FALSE, &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(CustomVertex), &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    glVertexAttribPointer(glViewAttributes[ATTRIBUTE_COLOR], &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, GL_FLOAT, GL_FALSE, &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(CustomVertex), (GLvoid *)(&lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt;) * &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    glDrawArrays(GL_TRIANGLES, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//////////////////&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [_context presentRenderbuffer:GL_RENDERBUFFER];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;为了渲染图形，我们需要给定渲染区域（视见区域），即告诉 OpenGL ES 应把渲染之后的图形绘制在窗体的哪个部位。当视见区域是整个窗体时，OpenGL ES 将把渲染结果绘制到整个窗口。&lt;/p&gt;
&lt;p&gt;调用 &lt;code&gt;glViewPort&lt;/code&gt; 函数来决定视见区域，它的原型如下：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;glViewport&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(GLint x, GLint y, GLsizei width, GLsizei height)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;x，y：指定了视见区域的左下角在窗口中的位置。&lt;/li&gt;
&lt;li&gt;width，height：指定了视见区域的宽度和高度。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里我们直接设置成窗口的大小即可。&lt;/p&gt;
&lt;p&gt;准备工作都完成后，有了这些信息我们就可以使用 glVertexAttribPointer 函数告诉 OpenGL ES 该如何解析顶点数据（应用到逐个顶点属性上）了，它的原型如下：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; GL_APIENTRY &lt;span class=&quot;title&quot;&gt;glVertexAttribPointer&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(GLuint indx, GLint size, GLenum type, GLboolean normalized, GLsizei stride, &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; GLvoid* ptr)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;indx：指定要配置的顶点属性。&lt;/li&gt;
&lt;li&gt;size：指定顶点属性的大小（这里不管是位置还是色值，都是四元向量，所以是4）。&lt;/li&gt;
&lt;li&gt;type：指定属性的类型，这里是 &lt;strong&gt;GL_FLOAT&lt;/strong&gt; （GLSL中 &lt;code&gt;vec*&lt;/code&gt; 都是由浮点数值组成的）。&lt;/li&gt;
&lt;li&gt;normalized：指定是否希望数据被标准化（Normalize）。如果设置为 GL_TRUE，所有数据都会被映射到0（对于有符号型 signed 数据是 -1）到 1 之间。我们把它设置为GL_FALSE。&lt;/li&gt;
&lt;li&gt;stride：步长（Stride），它告诉 OpenGL ES 连续的顶点数据组之间的间隔。如上图所示，每个顶点数据大小都是 32 字节（&lt;code&gt;sizeof(CustomVertex)&lt;/code&gt;），即下组顶点数据数据在一个 &lt;code&gt;CustomVertex&lt;/code&gt; 之后，所以我们把步长设置为 &lt;code&gt;sizeof(CustomVertex)&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;ptr：表示该属性在缓存中起始位置的偏移量（Offset）。如图，位置属性的偏移量是 0，而对于色值属性，它是紧挨着位置属性之后，所以它相对起始位置的偏移量，应该是一个位置属性的大小，即 16（sizeof(float) &lt;em&gt; 4）。另外，参数类型是 `GLvoid&lt;/em&gt;`，所以需要进行这个奇怪的强制类型转换。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;至此，所有东西都已经设置好了：我们使用一个顶点缓存对象将顶点数据初始化至缓存中，建立了一个顶点和一个片段着色器，并告诉了 OpenGL ES 如何把顶点数据链接到顶点着色器的顶点属性上。&lt;/p&gt;
&lt;p&gt;最后，要想渲染我们想要的图形，OpenGL ES 提供了 &lt;code&gt;glDrawArrays&lt;/code&gt; 函数，它使用当前激活的着色器，之前定义的顶点属性配置，以及VBO的顶点数据来渲染图元。它的原型如下：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; GL_APIENTRY &lt;span class=&quot;title&quot;&gt;glDrawArrays&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(GLenum mode, GLint first, GLsizei count)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;mode：指定渲染的 OpenGL ES 图元的类型。这里渲染的是一个三角形，所以传递 GL_TRIANGLES 给它。&lt;/li&gt;
&lt;li&gt;first：指定了顶点数据的起始索引，这里为 0。&lt;/li&gt;
&lt;li&gt;count：指定顶点个数，这里为 3。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;PS：&lt;/p&gt;
&lt;p&gt;mode 的类型还有其他几种，应用于不同的场景，感兴趣的可以了解下～&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;7-_测试，运行&quot;&gt;7. 测试，运行&lt;/h2&gt;&lt;p&gt;最后，在 setup 中添加如下代码：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; compileShaders];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; setupVBOs];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;运行，不出意外的话，你将会看到之前的三角形。&lt;/p&gt;
&lt;p&gt;最终的工程可以从&lt;a href=&quot;https://github.com/colin1994/OpenGLES/blob/master/Lesson03/OpenGLESDemo.zip&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;下载。下一节，将详细介绍 GLSL，一起期待吧～&lt;/p&gt;
</content:encoded>
      
      <comments>http://http://colin1994.github.io/2017/04/18/OpenGLES-Lesson03/#disqus_thread</comments>
    </item>
    
    <item>
      <title>OpenGL ES 环境搭建</title>
      <link>http://http://colin1994.github.io/2017/04/09/OpenGLES-Lesson02/</link>
      <guid>http://http://colin1994.github.io/2017/04/09/OpenGLES-Lesson02/</guid>
      <pubDate>Sun, 09 Apr 2017 06:10:10 GMT</pubDate>
      <description>
      
        &lt;p&gt;在&lt;a href=&quot;http://colin1994.github.io/2017/04/01/OpenGLES-Lesson01/&quot;&gt;上篇文章&lt;/a&gt;中，已经介绍了 OpenGL ES 的一些基础概念以及大致工作流程。&lt;/p&gt;
&lt;p&gt;在本文中，我们将会介绍在 iOS 平台上如何接入 OpenGL ES，并搭建好基础环境，实现设置背景色功能。它是之后任何实战的基础模版。在搭建过程中，会针对之前介绍的一些概念，再结合代码讲解。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;PS：这一节是 OpenGL ES 的入门，也是最重要的一部分。再绚丽的特性，都是在此基础上完成的。所以理解它是很有必要的～&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;设置蓝色背景后，效果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xkc7a.com1.z0.glb.clouddn.com/2017012639178QQ20170126-231448@2x.png&quot; alt=&quot;2017012639178QQ20170126-231448@2x.png&quot;&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded>&lt;p&gt;在&lt;a href=&quot;http://colin1994.github.io/2017/04/01/OpenGLES-Lesson01/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;上篇文章&lt;/a&gt;中，已经介绍了 OpenGL ES 的一些基础概念以及大致工作流程。&lt;/p&gt;
&lt;p&gt;在本文中，我们将会介绍在 iOS 平台上如何接入 OpenGL ES，并搭建好基础环境，实现设置背景色功能。它是之后任何实战的基础模版。在搭建过程中，会针对之前介绍的一些概念，再结合代码讲解。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;PS：这一节是 OpenGL ES 的入门，也是最重要的一部分。再绚丽的特性，都是在此基础上完成的。所以理解它是很有必要的～&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;设置蓝色背景后，效果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xkc7a.com1.z0.glb.clouddn.com/2017012639178QQ20170126-231448@2x.png&quot; alt=&quot;2017012639178QQ20170126-231448@2x.png&quot;&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;0-_初始工程&quot;&gt;0. 初始工程&lt;/h2&gt;&lt;p&gt;你可以从&lt;a href=&quot;https://github.com/colin1994/OpenGLES/blob/master/Lesson02/OpenGLESDemo_1.zip&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;下载到初始工程，避免重复实现一些和本节内容不相干的事情。&lt;/p&gt;
&lt;p&gt;在这个初始工程里面，已经实现了新建一个继承自 &lt;strong&gt;UIView&lt;/strong&gt; 的 &lt;strong&gt;GLView&lt;/strong&gt;，这个自定义的视图将用来显示 OpenGL ES 的渲染内容。然后在 Main.storyboard 中，将 ViewController 的 view 改成 &lt;strong&gt;GLView&lt;/strong&gt; 类型，即可。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xkc7a.com1.z0.glb.clouddn.com/2017012663829D0A3C5CE-818A-4C93-8D3E-1C302E29220F.png&quot; alt=&quot;2017012663829D0A3C5CE-818A-4C93-8D3E-1C302E29220F.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;至此，我们的工作都将在 &lt;strong&gt;GLView&lt;/strong&gt; 中展开。&lt;/p&gt;
&lt;p&gt;在 &lt;strong&gt;GLView.h&lt;/strong&gt; 中，先声明一些将要用到的成员变量：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;GLView&lt;/span&gt; : &lt;span class=&quot;title&quot;&gt;UIView&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;CAEAGLLayer&lt;/span&gt; *_eaglLayer;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    EAGLContext *_context;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    GLuint       _framebuffer;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    GLuint       _renderbuffer;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;另外，在 &lt;strong&gt;GLView.m&lt;/strong&gt; 中，需要导入对应的 OpenGLES 框架（framework），如下：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@import OpenGLES;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;PS：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;@import&lt;/code&gt;是 iOS 7 之后的新特性语法，这种方式叫 Modules（模块导入） 或者 Semantic import（语义导入）。用这种方式，不用手动添加 framework，系统会自动帮我们 link，是一种更好的头部预处理的执行方式（相比之前的 #import）。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Imports complete semantic description of a framework&lt;/li&gt;
&lt;li&gt;Doesn’t need to parse the headers&lt;/li&gt;
&lt;li&gt;Better way to import a framework’s interface&lt;/li&gt;
&lt;li&gt;Loads binary representation&lt;/li&gt;
&lt;li&gt;More flexible than precompiled headers&lt;/li&gt;
&lt;li&gt;Immune to effects of local macro definitions (e.g. &lt;code&gt;#define readonly 0x01&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Enabled for new projects by default&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;1-_CAEAGLLayer&quot;&gt;1. CAEAGLLayer&lt;/h2&gt;&lt;p&gt;CAEAGLLayer 实现了 &lt;strong&gt;EAGLDrawable&lt;/strong&gt; 协议，它是 Apple 专门为 OpenGL ES 准备的一个图层类。&lt;/p&gt;
&lt;p&gt;所以想要显示 OpenGL ES 的内容，需要把它默认的 layer 设置为一个特殊的 layer（&lt;strong&gt;CAEAGLLayer&lt;/strong&gt;），我们简单的重写 &lt;code&gt;layerClass&lt;/code&gt; 即可：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;+ (Class)layerClass &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; [&lt;span class=&quot;built_in&quot;&gt;CAEAGLLayer&lt;/span&gt; class];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;另外，为了方便起见，我们使 &lt;strong&gt;_eaglLayer&lt;/strong&gt; 这个成员变量指代 &lt;strong&gt;self.layer&lt;/strong&gt;，这样除了调用上方便外，可读性也更好。&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)setupLayer &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 用于显示的layer&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _eaglLayer = (&lt;span class=&quot;built_in&quot;&gt;CAEAGLLayer&lt;/span&gt; *)&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.layer;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// CALayer 默认是透明的（opaque = NO），而透明的层对性能负荷很大。所以将其关闭。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _eaglLayer.opaque = &lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;PS：&lt;/p&gt;
&lt;p&gt;By default, CALayers are set to non-opaque (i.e. transparent). However, this is bad for performance reasons (especially with OpenGL), so it’s best to set this as opaque when possible.&lt;/p&gt;
&lt;p&gt;CAEAGLLayer: the default value of the `opaque’ property in this class is true, not false as in CALayer.&lt;/p&gt;
&lt;p&gt;透明对性能影响较大，CAEAGLLayer 中的 &lt;strong&gt;opaque&lt;/strong&gt; 默认值已经是 YES 了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;至此 layer 的配置已经就绪，下面创建并设置与 OpenGL ES 相关的东西。&lt;/p&gt;
&lt;h2 id=&quot;2-_EAGLContext&quot;&gt;2. EAGLContext&lt;/h2&gt;&lt;p&gt;上篇已经提到了&lt;strong&gt;上下文&lt;/strong&gt;概念，即 &lt;strong&gt;EAGLContext&lt;/strong&gt; 对象，这个 context 管理所有使用 OpenGL ES 进行渲染的状态，命令以及资源信息。&lt;/p&gt;
&lt;p&gt;通过 &lt;code&gt;initWithAPI&lt;/code&gt; 创建完 context，然后需要使用 &lt;code&gt;setCurrentContext&lt;/code&gt; 将它设置为当前 context，因为我们之前提过，context 可以同时存在多个，需要指定当前环境对应的 context。&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)setupContext &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!_context) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 创建GL环境上下文&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// EAGLContext 管理所有通过 OpenGL ES 进行渲染的信息.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        _context = [[EAGLContext alloc] initWithAPI:kEAGLRenderingAPIOpenGLES2];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSAssert&lt;/span&gt;(_context &amp;amp;&amp;amp; [EAGLContext setCurrentContext:_context], &lt;span class=&quot;string&quot;&gt;@&quot;初始化GL环境失败&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里的 &lt;strong&gt;kEAGLRenderingAPIOpenGLES2&lt;/strong&gt; 即对应的 OpenGL ES 版本，它的定义如下：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* EAGL rendering API */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;NS_ENUM&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;NSUInteger&lt;/span&gt;, EAGLRenderingAPI)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	kEAGLRenderingAPIOpenGLES1 = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	kEAGLRenderingAPIOpenGLES2 = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	kEAGLRenderingAPIOpenGLES3 = &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;3-_Renderbuffer&quot;&gt;3. Renderbuffer&lt;/h2&gt;&lt;p&gt;有了上下文，OpenGL ES 还需要在一块 buffer 上进行渲染，这块 buffer 就是 &lt;strong&gt;Renderbuffer&lt;/strong&gt;（OpenGL ES 总共有三大不同用途的 buffer，分别是 &lt;strong&gt;color buffer，depth buffer 和 stencil buffer&lt;/strong&gt;，这里是最基本的 color buffer）。可以简单的把 renderbuffer 理解成用于展示的窗口。&lt;/p&gt;
&lt;p&gt;它的创建过程如下：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)setupRenderBuffer &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 生成 renderbuffer ( renderbuffer = 用于展示的窗口 )&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    glGenRenderbuffers(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &amp;amp;_renderbuffer);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 绑定 renderbuffer&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    glBindRenderbuffer(GL_RENDERBUFFER, _renderbuffer);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// GL_RENDERBUFFER 的内容存储到实现 EAGLDrawable 协议的 CAEAGLLayer&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [_context renderbufferStorage:GL_RENDERBUFFER fromDrawable:_eaglLayer];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;glGenRenderbuffers&lt;/code&gt; 用于生成 renderbuffer，并分配 id。它的原型为：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;glGenRenderbuffers&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(GLsizei n, GLuint* renderbuffers)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;n：表示申请生成 renderbuffer 的个数。&lt;/li&gt;
&lt;li&gt;renderbuffers：返回分配给 renderbuffer 的 id。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;PS：返回的 id 不会为 0，0 是OpenGL ES 保留的，0 则表示这个 buffer 这个不存在或者创建失败。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;所以，一般会通过 id 来判断某个 buffer 是否存在，执行对应的操作。比如在 gen 之前，释放旧的 renderbuffer，确保之后的操作无误。&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 释放旧的 renderbuffer&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (_renderbuffer) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    glDeleteRenderbuffers(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &amp;amp;_renderbuffer);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _renderbuffer = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;glBindRenderbuffer&lt;/code&gt; 用于绑定 renderbuffer，将指定 id 的 renderbuffer 设置为当前 renderbuffer。它的原型为：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;glBindRenderbuffer&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(GLenum target, GLuint renderbuffer)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;target：表示当前 renderbuffer，必须是 &lt;strong&gt;GL_RENDERBUFFER&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;renderbuffer：某个 renderbuffer 对应的 id（比如使用 glGenRenderbuffers 生成的 id）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;renderbufferStorage&lt;/code&gt; 用于将 GL_RENDERBUFFER 的内容存储到实现 &lt;strong&gt;EAGLDrawable&lt;/strong&gt; 协议的 CAEAGLLayer。它的原型为：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* Attaches an EAGLDrawable as storage for the OpenGL ES renderbuffer object bound to &amp;lt;target&amp;gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt;)renderbufferStorage:(&lt;span class=&quot;built_in&quot;&gt;NSUInteger&lt;/span&gt;)target fromDrawable:(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;&amp;lt;EAGLDrawable&amp;gt;)drawable;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;PS：&lt;/p&gt;
&lt;p&gt;这个函数内部，会使用 drawable（_eaglLayer）的相关信息（设置存储在 drawableProperties 属性中）作为参数，调用 glRenderbufferStorage(GLenum target, GLenum internalformat, GLsizei width, GLsizei height);&lt;/p&gt;
&lt;p&gt; &lt;code&gt;glRenderbufferStorage&lt;/code&gt; 指定存储在 renderbuffer 中图像的宽高以及颜色格式，并按照此规格为之分配存储空间。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;至此，我们的第一个 buffer 创建完毕了。注意理解 &lt;strong&gt;gen&lt;/strong&gt; 和 &lt;strong&gt;bind&lt;/strong&gt; 这两个概念，它将会贯穿我们 OpenGL ES 的整个学习过程。&lt;/p&gt;
&lt;h2 id=&quot;4-_Framebuffer&quot;&gt;4. Framebuffer&lt;/h2&gt;&lt;p&gt;接下去我们将会创建 framebuffer object，它通常也被称之为 &lt;strong&gt;FBO&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;我们之前提到过了，它相当于 buffer（color, depth, stencil）的管理者，三大 buffer 可以附加到一个  FBO 上。&lt;/p&gt;
&lt;p&gt;它的创建过程如下：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)setupFrameBuffer &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 释放旧的 framebuffer&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (_framebuffer) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        glDeleteFramebuffers(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &amp;amp;_framebuffer);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        _framebuffer = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 生成 framebuffer ( framebuffer = 画布 )&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    glGenFramebuffers(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &amp;amp;_framebuffer);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 绑定 fraembuffer&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    glBindFramebuffer(GL_FRAMEBUFFER, _framebuffer);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// framebuffer 不对渲染的内容做存储, 所以这一步是将 framebuffer 绑定到 renderbuffer ( 渲染的结果就存在 renderbuffer )&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    glFramebufferRenderbuffer(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                              GL_RENDERBUFFER, _renderbuffer);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;之前的 gen，bin 操作和 renderbuffer 中对应的都是一致的，只是做相应的替换，比如 renderbuffer 改成 framebuffer 即可，这里就不细说，重点看一下 &lt;code&gt;glFramebufferRenderbuffer&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;之前说过，framebuffer 不对渲染的内容做存储，而 &lt;code&gt;glFramebufferRenderbuffer&lt;/code&gt; 的作用正是将相关的 buffer（三大 buffer 之一）装配到 framebuffer 上，使得 framebuffer 能索引到对应的渲染内容。它的原型为：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;glFramebufferRenderbuffer&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;target：表示当前 framebuffer，必须是 GL_FRAMEBUFFER。&lt;/li&gt;
&lt;li&gt;attachment：指定 renderbuffer 被装配到那个装配点上，其值是 GL_COLOR_ATTACHMENT0，GL_DEPTH_ATTACHMENT，GL_STENCIL_ATTACHMENT 中的一个，分别对应 color，depth 和  stencil 三大 buffer。&lt;/li&gt;
&lt;li&gt;renderbuffertarget：表示当前 renderbuffer，必须是 &lt;strong&gt;GL_RENDERBUFFER&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;renderbuffer：某个 renderbuffer 对应的 id，表示需要装配的 renderbuffer。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;PS：&lt;/p&gt;
&lt;p&gt;为了安全起见，可以通过 &lt;code&gt;glCheckFramebufferStatus&lt;/code&gt; 来检查 framebuffer 的创建情况，并根据对应的 log，来排查错误。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt;)checkFramebuffer:(&lt;span class=&quot;built_in&quot;&gt;NSError&lt;/span&gt; *__autoreleasing *)error &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 检查 framebuffer 是否创建成功&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    GLenum status = glCheckFramebufferStatus(GL_FRAMEBUFFER);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *errorMessage = &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt; result = &lt;span class=&quot;literal&quot;&gt;NO&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt; (status)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; GL_FRAMEBUFFER_U&lt;span class=&quot;built_in&quot;&gt;NSUPPORTED&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            errorMessage = &lt;span class=&quot;string&quot;&gt;@&quot;framebuffer不支持该格式&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            result = &lt;span class=&quot;literal&quot;&gt;NO&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; GL_FRAMEBUFFER_CO&lt;span class=&quot;built_in&quot;&gt;MPLETE&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;framebuffer 创建成功&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            result = &lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; GL_FRAMEBUFFER_INCO&lt;span class=&quot;built_in&quot;&gt;MPLETE_MISSING_ATTACHMENT&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            errorMessage = &lt;span class=&quot;string&quot;&gt;@&quot;Framebuffer不完整 缺失组件&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            result = &lt;span class=&quot;literal&quot;&gt;NO&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; GL_FRAMEBUFFER_INCO&lt;span class=&quot;built_in&quot;&gt;MPLETE_DIMENSIONS&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            errorMessage = &lt;span class=&quot;string&quot;&gt;@&quot;Framebuffer 不完整, 附加图片必须要指定大小&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            result = &lt;span class=&quot;literal&quot;&gt;NO&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// 一般是超出GL纹理的最大限制&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            errorMessage = &lt;span class=&quot;string&quot;&gt;@&quot;未知错误 error !!!!&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            result = &lt;span class=&quot;literal&quot;&gt;NO&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;%@&quot;&lt;/span&gt;,errorMessage ? errorMessage : &lt;span class=&quot;string&quot;&gt;@&quot;&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    *error = errorMessage ? [&lt;span class=&quot;built_in&quot;&gt;NSError&lt;/span&gt; errorWithDomain:&lt;span class=&quot;string&quot;&gt;@&quot;com.colin.error&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                code:status&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                            userInfo:@&amp;#123;&lt;span class=&quot;string&quot;&gt;@&quot;ErrorMessage&quot;&lt;/span&gt; : errorMessage&amp;#125;] : &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; result;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;至此，我们需要的环境配置以及相关 buffer 资源都已经准备好了，接下去就是渲染部分了。&lt;/p&gt;
&lt;h2 id=&quot;5-_最简单的渲染，设置背景色&quot;&gt;5. 最简单的渲染，设置背景色&lt;/h2&gt;&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)render &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    glClearColor(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    glClear(GL_COLOR_BUFFER_BIT);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 做完所有绘制操作后，最终呈现到屏幕上&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [_context presentRenderbuffer:GL_RENDERBUFFER];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;glClearColor&lt;/code&gt; 用来设置清屏颜色，它的原型为：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;glClearColor&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;glClear (GLbitfield mask)&lt;/code&gt; 用来指定要用清屏颜色来清除由 mask 指定的 buffer，mask 可以是 GL_COLOR_BUFFER_BIT，GL_DEPTH_BUFFER_BIT 和 GL_STENCIL_BUFFER_BIT 的自由组合。&lt;/p&gt;
&lt;p&gt;在这里我们只使用到 color buffer，所以清除的就是 clolor buffer。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;presentRenderbuffer&lt;/code&gt; 是将指定 renderbuffer 呈现在屏幕上。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;PS：&lt;/p&gt;
&lt;p&gt;在此之前，建议使用 &lt;code&gt;glBindFramebuffer&lt;/code&gt;，&lt;code&gt;glBindRenderbuffer&lt;/code&gt; 来重新绑定当前 buffer 对象。因为 GL 的所有 API 都是基于最后一次绑定的对象作为作用对象。所以每次在修改 GL 对象时，先绑定一次要修改的对象。有很多错误是因为没有绑定或者绑定了错误的对象导致得到了错误的结果。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;6-_收工，检验&quot;&gt;6. 收工，检验&lt;/h2&gt;&lt;p&gt;至此，关于 OpenGL ES 环境搭建的相关准备东西都已就绪，接下去只要按需调用相关方法，即可。&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (instancetype)initWithCoder:(&lt;span class=&quot;built_in&quot;&gt;NSCoder&lt;/span&gt; *)aDecoder &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ((&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; = [&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; initWithCoder:aDecoder])) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; setup];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)didMoveToWindow &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; didMoveToWindow];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; render];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#pragma mark - Setup&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)setup &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; setupLayer];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; setupContext];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; setupRenderBuffer];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; setupFrameBuffer];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSError&lt;/span&gt; *error;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSAssert1&lt;/span&gt;([&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; checkFramebuffer:&amp;amp;error], &lt;span class=&quot;string&quot;&gt;@&quot;%@&quot;&lt;/span&gt;,error.userInfo[&lt;span class=&quot;string&quot;&gt;@&quot;ErrorMessage&quot;&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里不出意外的话，你将会看到开头的那个纯色背景。&lt;/p&gt;
&lt;p&gt;你可能注意到了，这个过程我们并没有涉及到所谓的图形渲染管线，如果你试着使用 kEAGLRenderingAPIOpenGLES1 来创建 context，会发现这是完成可以的。&lt;/p&gt;
&lt;p&gt;最终的工程可以从&lt;a href=&quot;https://github.com/colin1994/OpenGLES/blob/master/Lesson02/OpenGLESDemo_1.zip&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;下载。有了这个基础，模版，接下去，我们将会围绕渲染管线，实现一系列的炫酷效果，一起期待吧～&lt;/p&gt;
</content:encoded>
      
      <comments>http://http://colin1994.github.io/2017/04/09/OpenGLES-Lesson02/#disqus_thread</comments>
    </item>
    
    <item>
      <title>OpenGL ES 基础概念</title>
      <link>http://http://colin1994.github.io/2017/04/01/OpenGLES-Lesson01/</link>
      <guid>http://http://colin1994.github.io/2017/04/01/OpenGLES-Lesson01/</guid>
      <pubDate>Sat, 01 Apr 2017 14:30:10 GMT</pubDate>
      <description>
      
        &lt;p&gt;这里主要描述一些 OpenGL ES 必须先了解的一些概念，为之后的实战铺路。&lt;/p&gt;
&lt;h2 id=&quot;状态机&quot;&gt;状态机&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;OpenGL 是一个状态机，它维持自己的状态，并根据用户调用的函数来改变自己的状态。&lt;/p&gt;
&lt;p&gt;根据状态的不同，调用同样的函数也可能产生不同的效果。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在 OpenGL 的世界里，&lt;strong&gt;大多数元素都可以用状态来描述&lt;/strong&gt;，比如：&lt;/p&gt;
      
      </description>
      
      <content:encoded>&lt;p&gt;这里主要描述一些 OpenGL ES 必须先了解的一些概念，为之后的实战铺路。&lt;/p&gt;
&lt;h2 id=&quot;状态机&quot;&gt;状态机&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;OpenGL 是一个状态机，它维持自己的状态，并根据用户调用的函数来改变自己的状态。&lt;/p&gt;
&lt;p&gt;根据状态的不同，调用同样的函数也可能产生不同的效果。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在 OpenGL 的世界里，&lt;strong&gt;大多数元素都可以用状态来描述&lt;/strong&gt;，比如：&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;颜色、纹理坐标、光源的各种参数…&lt;/li&gt;
&lt;li&gt;是否启用了光照、是否启用了纹理、是否启用了混合、是否启用了深度测试…&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;OpenGL 会保持状态，除非我们调用 OpenGL 函数来改变它。&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;比如你用 &lt;code&gt;glEnablexxx&lt;/code&gt; 开启了一个状态，在以后的渲染中将一直保留并应用这个状态，除非你调用 &lt;code&gt;glDisablexxx&lt;/code&gt; 及同类函数来改变该状态或程序退出。&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;又或者当前颜色是一个状态变量，可以把当前颜色设置为白色、红色或其他任何颜色，在此之后绘制的所有物体都将使用这种颜色，直到把当前颜色设置为其他颜色。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;理解了状态机这个概念，我们再来看 OpenGL ES 提供的 API，就会非常明了，因为OpenGL 当中很多 API，其实仅仅是向 OpenGL 这个状态机传数据或者读数据。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xkc7a.com1.z0.glb.clouddn.com/201701114141530D41464-66AF-4A71-80E5-9BF8AABC016F.png&quot; alt=&quot;201701114141530D41464-66AF-4A71-80E5-9BF8AABC016F.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;100 来个接口，如果按照不同的数据类型（GLfloat，GLint，GLsize …），不同的元素（Uniform，Color，Texture…）划分开来，再看各个分类的接口，（&lt;del&gt;无法&lt;/del&gt;）无非就是围绕状态展开的。&lt;/p&gt;
&lt;p&gt;比如：&lt;code&gt;glClearColor&lt;/code&gt; 函数是一个状态设置函数，而 &lt;code&gt;glClear&lt;/code&gt; 函数则是一个状态应用的函数。&lt;/p&gt;
&lt;h2 id=&quot;上下文&quot;&gt;上下文&lt;/h2&gt;&lt;p&gt;上面提到的各种状态值，将保存在对应的上下文（&lt;strong&gt;Context&lt;/strong&gt;）中。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;OpenGL ES 上下文（EAGLContext） : 管理所有 iOS 要绘制的 OpenGL ES 信息。&lt;/p&gt;
&lt;p&gt;类似在 Core Graphics 中做任何事情都需要一个 Core Graphics 上下文。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;通过放置这些状态到上下文中，上下文可以跟踪用于渲染的帧缓存、用于几何数据、颜色等的缓存。还会决定是否使用如纹理、灯光等功能以及会为渲染定义当前的坐标系统等。并且在多任务的情况下，就能很容易的共享硬件设备，而互不影响各自的状态。&lt;/p&gt;
&lt;p&gt;因此渲染的时候，要&lt;strong&gt;指定对应的当前上下文&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&quot;渲染管线&quot;&gt;渲染管线&lt;/h2&gt;&lt;p&gt;在 OpenGL 中，任何事物都在 3D 空间中，而屏幕和窗口却是 2D 像素数组，这导致 OpenGL 的大部分工作都是关于把 3D 坐标转变为适应你屏幕的 2D 像素。3D 坐标转为 2D 坐标的处理过程是由 OpenGL 的图形渲染管线（Graphics Pipeline，实际上指的是一堆原始图形数据途经一个输送管道，期间经过各种变化处理最终出现在屏幕的过程）管理的。图形渲染管线可以被划分为两个主要部分：&lt;strong&gt;第一部分把你的3D 坐标转换为 2D 坐标，第二部分是把 2D 坐标转变为实际的有颜色的像素。&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;2D 坐标和像素也是不同的，2D 坐标精确表示一个点在 2D 空间中的位置，而 2D 像素是这个点的近似值，2D 像素受到你的屏幕/窗口分辨率的限制。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;图形渲染管线可以被划分为几个阶段，每个阶段将会把前一个阶段的输出作为输入。所有这些阶段都是高度专门化的（它们都有一个特定的函数），并且很容易并行执行。&lt;strong&gt;它的工作过程和车间流水线一致，各个模块各司其职但是又相互依赖。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;下图就是渲染管线：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xkc7a.com1.z0.glb.clouddn.com/20170112148420103614414.jpg?imageView2/0/format/jpg&quot; alt=&quot;20170112148420103614414.jpg&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;PS：OpenGL ES 采用&lt;strong&gt;服务器/客户端编程模型&lt;/strong&gt;，客户端运行在 CPU 上，服务端运行在 GPU 上，调用 OpenGL ES 函数的时，由客户端发送至服务器端，并被服务端转换成底层图形硬件支持的绘制命令。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xkc7a.com1.z0.glb.clouddn.com/20170111148411873373682.jpg?imageView2/0/format/jpg&quot; alt=&quot;20170111148411873373682.jpg&quot;&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;左边的客户端程序通过调用 OpenGL ES 接口，将顶点，着色器程序，纹理，以及其他一些 GL 状态参数传入右边的 GL 服务端， 然后在客户端调用绘制命令的时候， GL 便会将输入的图元，逐一执行渲染管线的每个阶段，然后将每个像素的颜色值写入到帧缓存中， 最后视窗系统就可以将帧缓存中的颜色值显示在屏幕上。 此外，应用程序也可以从帧缓存中读取数据到客户端。&lt;/p&gt;
&lt;p&gt;在整个管线中，&lt;strong&gt;顶点着色器和片段着色器是可编程的部分&lt;/strong&gt;，应用程序可以通过提供着色器程序在 GPU 中被作用于渲染管线，可编程就是说这个操作可以动态编程实现而不必固定写死在代码中。可动态编程实现这一功能一般都是脚本提供的，在 OpenGL ES 中也一样，编写这样脚本的能力是由 OpenGL 着色语言（OpenGL Shading Language, GLSL）提供的。&lt;/p&gt;
&lt;p&gt;那可编程管线有什么好处呢？&lt;strong&gt;方便我们动态修改渲染过程，而无需重写编译代码&lt;/strong&gt;。当然也和很多脚本语言一样，调试起来不太方便。其他阶段则只能使用一些固定的 GL 命令来影响该阶段的执行。&lt;/p&gt;
&lt;p&gt;下面以&lt;strong&gt;绘制一个三角形为例&lt;/strong&gt;，针对渲染管线的各个阶段，详细分析。&lt;/p&gt;
&lt;h3 id=&quot;1-_顶点数组&quot;&gt;1. 顶点数组&lt;/h3&gt;&lt;p&gt;为了渲染一个三角形，我们以数组的形式传递3个 3D 坐标作为图形渲染管线的输入，用来表示一个三角形，这个数组叫做顶点数据（Vertex Data）；&lt;strong&gt;顶点数据是一系列顶点的集合。&lt;/strong&gt;一个顶点（Vertex）是一个 3D 坐标的数据的集合。而顶点数据是用顶点属性（Vertex Attribute）表示的，它可以包含任何我们想用的数据，但是简单起见，我们假定每个顶点只由一个 3D 位置和一些颜色值组成。&lt;/p&gt;
&lt;p&gt;至此，你可能会疑惑，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我们仅仅是传递了三个点，但是 OpenGL ES 是怎么知道它们用来组成三角形呢？&lt;/li&gt;
&lt;li&gt;加入我要绘制一个 3D 模型，那么要怎么传入顶点数据？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为了让 OpenGL 知道我们的坐标和颜色值构成的到底是什么，OpenGL 需要你去指定这些数据所表示的渲染类型。我们是希望把这些数据渲染成一系列的点？一系列的三角形？还是仅仅是一个长长的线？做出的这些提示叫做图元（Primitive），任何一个绘制指令的调用都将把图元传递给 OpenGL 。OpenGL 支持三种基本图元：点，线和三角形。&lt;/p&gt;
&lt;p&gt;当然，OpenGL ES 并不提供对 3D 模型的定义，在传入 OpenGL ES 之前应用程序应该首先将 3D 模型转换为一组图元的集合。每个模型是独立绘制的，修改其中一个模型的一些设置并不会影响其他模型。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xkc7a.com1.z0.glb.clouddn.com/20170112148420555397978.jpg?imageView2/0/format/jpg&quot; alt=&quot;20170112148420555397978.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;每个图元由一个或者多个顶点组成，每个顶点定义一个点，一条边的一端或者三角形的一个角。每个顶点关联一些数据，这些数据包括顶点坐标，颜色，法向量以及纹理坐标等。所有这些顶点相关的信息就构成顶点数据，这些数据首先被上传到 GL 服务端，然后就可以进行绘制。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;PS：OpenGL 中的命令总是按照它被接收到的顺序执行，这意味着一组图元必须被全部绘制完毕才会开始绘制下一组图元。同时也意味着程序对帧缓冲的像素读取的结果一定是该命令之前所有 OpenGL 命令执行的结果。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;2-_顶点着色器&quot;&gt;2. 顶点着色器&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://7xkc7a.com1.z0.glb.clouddn.com/2017011229641BBC4CB30-3B94-4F28-8FAB-AF502E37E641.png&quot; alt=&quot;2017011229641BBC4CB30-3B94-4F28-8FAB-AF502E37E641.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;顶点着色器对每个顶点执行一次运算&lt;/strong&gt;，它可以使用顶点数据来计算该顶点的坐标，颜色，光照，纹理坐标等，在渲染管线中每个顶点都是独立地被执行。&lt;/p&gt;
&lt;p&gt;在顶点着色器中最重要的任务是执行顶点坐标变换，应用程序中设置的图元顶点坐标通常是针对本地坐标系的。本地坐标系简化了程序中的坐标计算，但是 GL 并不识别本地坐标系，所以在顶点着色器中要对本地坐标执行模型视图变换，将本地坐标转化为裁剪坐标系的坐标值。&lt;/p&gt;
&lt;p&gt;顶点着色器的另一个功能是向后面的片段着色器提供一组易变变量（varying）。易变变量会在图元装配阶段之后被执行插值计算，如果是单重采样，其插值点为片段的中心，如果多重采样，其插值点可能为多个采样片段中的任意一个位置。易变变量可以用来保存插值计算片段的颜色，纹理坐标等信息。&lt;/p&gt;
&lt;h3 id=&quot;3-_图元装配&quot;&gt;3. 图元装配&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://7xkc7a.com1.z0.glb.clouddn.com/2017011250662FC720569-D123-4FC5-9F0D-C99287364AC7.png&quot; alt=&quot;2017011250662FC720569-D123-4FC5-9F0D-C99287364AC7.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;在顶点着色器程序输出顶点坐标之后，各个顶点被按照绘制命令中的图元类型参数，以及顶点索引数组被组装成一个个图元。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xkc7a.com1.z0.glb.clouddn.com/20170112148421538042641.jpg?imageView2/0/format/jpg&quot; alt=&quot;20170112148421538042641.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;顶点数组首先通过 GL 命令输入到 GL 渲染管线中，此时顶点坐标位于应用程序的本地坐标系；在经过顶点着色器的计算之后，顶点坐标被转化到裁剪坐标系中，这通常通过向顶点着色器传入一个模型视图变换矩阵，然后在顶点着色器中执行坐标变换。&lt;/p&gt;
&lt;p&gt;裁剪坐标系被定义在一个视锥体裁剪的空间里，视锥体是游戏场景的一个可视空间，它由6个裁剪平面构成，分别是：近平面，远平面，左平面，右平面，上平面和下平面。&lt;/p&gt;
&lt;p&gt;视锥体在 3D 应用程序中通常表现为一个摄像机，其观察点为裁剪坐标系的原点，方向为穿过远近平面的中点。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xkc7a.com1.z0.glb.clouddn.com/20170112148421539517039.jpg?imageView2/0/format/jpg&quot; alt=&quot;20170112148421539517039.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;处于视锥体以外的图元将被丢弃，如果该图元与视锥体相交则会发生裁剪产生新的图元。值得注意的是透视裁剪是一个比较影响性能的过程，因为每个图元都需要和 6 个面进行相交计算，并产生新的图元。但是一般在x，y方向超出屏幕之外的，则无需产生新的图元，这些顶点能在视口变换的时候被更高效的丢弃。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;通过图元装配，所有 3D 的图元已经被转化为屏幕上 2D 的图元。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;4-_光栅化&quot;&gt;4. 光栅化&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://7xkc7a.com1.z0.glb.clouddn.com/20170112706113F85123B-6006-4633-9D8C-C4C4DB4BA3AC.png&quot; alt=&quot;20170112706113F85123B-6006-4633-9D8C-C4C4DB4BA3AC.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在光栅化阶段，基本图元被转换为供片段着色器使用的片段&lt;/strong&gt;（Fragment），Fragment 表示可以被渲染到屏幕上的像素，它包含位置，颜色，纹理坐标等信息，这些值是由图元的顶点信息进行插值计算得到的。这些片元接着被送到片元着色器中处理。&lt;strong&gt;这是从顶点数据到可渲染在显示设备上的像素的质变过程。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在片段着色器运行之前会执行裁切（Clipping）。裁切会丢弃超出你的视图以外的所有像素，用来提升执行效率。&lt;/p&gt;
&lt;h3 id=&quot;5-_片段着色器&quot;&gt;5. 片段着色器&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://7xkc7a.com1.z0.glb.clouddn.com/20170112997054573CDB0-956C-4A00-837F-6BDA9BA4F550.png&quot; alt=&quot;20170112997054573CDB0-956C-4A00-837F-6BDA9BA4F550.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;可编程的片段着色器是实现一些高级特效如纹理贴图，光照，环境光，阴影等功能的基础。&lt;strong&gt;片段着色器的主要作用是计算每一个片段最终的颜色值（或者丢弃该片段）。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在片段着色器之前的阶段，渲染管线都只是在和顶点，图元打交道。在 3D 图形程序开发中，贴图是最重要的部分，程序可以通过 GL 命令上传纹理数据至 GL 内存中，这些纹理可以被片段着色器使用。片段着色器可以根据顶点着色器输出的顶点纹理坐标对纹理进行采样，以计算该片段的颜色值。&lt;/p&gt;
&lt;p&gt;另外，片段着色器也是执行光照等高级特效的地方，比如可以传给片段着色器一个光源位置和光源颜色，可以根据一定的公式计算出一个新的颜色值，这样就可以实现光照特效。&lt;/p&gt;
&lt;h3 id=&quot;6-_片段测试&quot;&gt;6. 片段测试&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://7xkc7a.com1.z0.glb.clouddn.com/2017011371566F6C27776-D170-48EF-8877-E0E541F6F193.png&quot; alt=&quot;2017011371566F6C27776-D170-48EF-8877-E0E541F6F193.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;片段着色器输出的颜色值，还要经过几个阶段的片段操作，这些操作可能会修改片段的颜色值，或者丢弃该片段，&lt;strong&gt;最终的片段颜色值才会被写入到帧缓冲中。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xkc7a.com1.z0.glb.clouddn.com/2017011214842168484373.jpg?imageView2/0/format/jpg&quot; alt=&quot;2017011214842168484373.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;像素所有权测试用来判断帧缓冲区中该位置的像素是否属于当前 OpenGL ES，例如在窗口系统中该位置可能会被其他应用程序窗口遮挡，此时该像素则不会被显示。&lt;/p&gt;
&lt;p&gt;在片段测试之后，片段要么被丢弃，要么每个片段对应的颜色，深度，模板值会被写入帧缓冲区，最终呈现在设备屏幕上。帧缓冲区中的颜色值也可以被读回到客户端应用程序中，这样可以实现绘制到纹理的效果。&lt;/p&gt;
&lt;p&gt;至此，OpenGL ES 渲染管道最终将每个像素点的颜色，深度，模板等数据输送到帧缓存中（Framebuffer）。&lt;/p&gt;
&lt;h2 id=&quot;帧缓存_/_渲染缓存&quot;&gt;帧缓存 / 渲染缓存&lt;/h2&gt;&lt;p&gt;那么，帧缓存和渲染缓存到底代表什么，又用来做什么呢？&lt;/p&gt;
&lt;p&gt;总的来说，&lt;strong&gt;帧缓存是接收渲染结果的缓冲区，为GPU指定存储渲染结果的区域&lt;/strong&gt;。它存储着 OpenGL ES 绘制每个像素点最终的所有信息：颜色，深度和模板值。更通俗点，可以理解成存储屏幕上最终显示的一帧画面的区域。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xkc7a.com1.z0.glb.clouddn.com/20170112148423006492580.jpg?imageView2/0/format/jpg&quot; alt=&quot;20170112148423006492580.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;而&lt;strong&gt;渲染缓存则存储呈现在屏幕上的渲染图像，它也被称作颜色缓冲区&lt;/strong&gt;，因为它本质上是存储要显示的颜色。多个纹理对象或多个渲染缓存对象，可通过连接点（attachment points）连接到帧缓存对象上。&lt;/p&gt;
&lt;p&gt;可以同时存在很多帧缓存，并且可以通过 OpenGL ES 让 GPU 把渲染结果存储到任意数量的帧缓存中。但是，只有将内容绘制到视窗体提供的帧缓存中，才能将内容输出到显示设备。视图系统提供的帧缓存通常由两个缓存对象组成，一个前端缓存，一个后端缓存。&lt;/p&gt;
&lt;p&gt;前帧缓存决定了屏幕上显示的像素颜色。程序的渲染结果通常保存在后帧缓存在内的其他帧缓存，当渲染后的后帧缓存包含一个完成的图像时，前后帧缓存会立即互换，前帧缓存变成新的后帧缓存，后帧缓存变成新的前帧缓存。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xkc7a.com1.z0.glb.clouddn.com/20170113188548B1802A3-32BF-465F-A4E0-DDC1A4D6CFF2.png&quot; alt=&quot;20170113188548B1802A3-32BF-465F-A4E0-DDC1A4D6CFF2.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;但是前后帧我们无法去操纵，它是由系统控制的。我们只能显式的告诉系统，要展示哪个帧缓存了，然后由系统去完成前后帧的切换。&lt;/p&gt;
&lt;h2 id=&quot;纹理&quot;&gt;纹理&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;纹理是一个用来保存图像的色值的 OpenGL ES 缓存。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;现实生活中，纹理最通常的作用是装饰我们的物体模型，它就像是贴纸一样贴在物体表面，使得物体表面拥有图案。&lt;/p&gt;
&lt;p&gt;但实际上在 OpenGL 中，纹理的作用不仅限于此，它可以用来存储大量的数据。一个典型的例子就是利用纹理存储画笔笔刷的 mask 信息。&lt;/p&gt;
&lt;h2 id=&quot;坐标系&quot;&gt;坐标系&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://7xkc7a.com1.z0.glb.clouddn.com/20170116148453735421681.jpg?imageView2/0/format/jpg&quot; alt=&quot;20170116148453735421681.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;OpenGL 渲染管线整个流程中，涉及了多个坐标系变化，看起来非常繁琐。但是针对 2D 图像处理，我们其实不需要关心这些变化，我们只需要了解&lt;strong&gt;标准化设备坐标&lt;/strong&gt;即可。&lt;/p&gt;
&lt;p&gt;标准化设备坐标是一个 x、y 和 z 值在 -1.0 到 1.0 的一小段空间。任何落在范围外的坐标都会被丢弃／裁剪，不会显示在你的屏幕上。下面你会看到我们定义的在标准化设备坐标中的三角形（忽略 z 轴，仅处理 2D 图像，z 轴设置为 0.0）：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xkc7a.com1.z0.glb.clouddn.com/20170116148453238386304.jpg?imageView2/0/format/jpg&quot; alt=&quot;20170116148453238386304.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;与通常的屏幕（UIKit）坐标不同，y 轴正方向为向上，(0, 0)坐标是这个图像的中心，而不是左上角。&lt;/p&gt;
&lt;p&gt;为了方便记忆，可以借助右手左边系。&lt;/p&gt;
&lt;p&gt;按照惯例，OpenGL 是一个右手坐标系。简单来说，就是正 x 轴在你的右手边，正 y 轴朝上，而正 z 轴是朝向后方的。想象你的屏幕处于三个轴的中心，则正 z 轴穿过你的屏幕朝向你。坐标系画起来如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xkc7a.com1.z0.glb.clouddn.com/20170116148453800669809.jpg?imageView2/0/format/jpg&quot; alt=&quot;20170116148453800669809.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xkc7a.com1.z0.glb.clouddn.com/20170116148453810158450.jpg?imageView2/0/format/jpg&quot; alt=&quot;20170116148453810158450.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;另外，为了能够把纹理映射到三角形上，我们需要指定三角形的每个顶点各自对应纹理的哪个部分。这样每个顶点就会关联着一个纹理坐标，用来标明该从纹理图像的哪个部分采样（采集片段颜色）。之后在图形的其它片段上进行片段插值。&lt;/p&gt;
&lt;p&gt;纹理坐标在 x 和 y 轴上，范围为 0 到 1 之间（我们使用的是 2D 纹理图像）。使用纹理坐标获取纹理颜色叫做采样。纹理坐标起始于（0, 0），也就是纹理图片的左下角，终始于（1, 1），即纹理图片的右上角。下面的图片展示了我们是如何把纹理坐标映射到三角形上。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xkc7a.com1.z0.glb.clouddn.com/20170116148453793035367.jpg?imageView2/0/format/jpg&quot; alt=&quot;20170116148453793035367.jpg&quot;&gt;&lt;/p&gt;
</content:encoded>
      
      <comments>http://http://colin1994.github.io/2017/04/01/OpenGLES-Lesson01/#disqus_thread</comments>
    </item>
    
    <item>
      <title>OpenGL ES 开篇</title>
      <link>http://http://colin1994.github.io/2017/04/01/OpenGLES-Lesson00/</link>
      <guid>http://http://colin1994.github.io/2017/04/01/OpenGLES-Lesson00/</guid>
      <pubDate>Sat, 01 Apr 2017 11:30:10 GMT</pubDate>
      <description>
      
        &lt;p&gt;在学习 OpenGL ES 之前，总结下我自己接触 OpenGL ES 时的一些疑惑，我相信这也是初学者都会遇到的一些困惑。&lt;/p&gt;
&lt;h2 id=&quot;Q_&amp;amp;_A&quot;&gt;Q &amp;amp; A&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Q：OpenGL 是什么 ?&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A：&lt;strong&gt;OpenGL&lt;/strong&gt;（Open Graphics Library）是 Khronos Group （一个图形软硬件行业协会，该协会主要关注图形和多媒体方面的开放标准）开发维护的一个规范，它是硬件无关的。它主要为我们定义了用来操作图形和图片的一系列函数的 API，需要注意的是 &lt;strong&gt;OpenGL 本身并非 API&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;而 GPU 的硬件开发商则需要提供满足 OpenGL 规范的实现，这些实现通常被称为”驱动“，它们负责将 OpenGL 定义的 API 命令翻译为 GPU 指令。&lt;strong&gt;所以你可以用同样的 OpenGL 代码在不同的显卡上跑&lt;/strong&gt;，因为它们实现了同一套规范，尽管内部实现可能存在差异。&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded>&lt;p&gt;在学习 OpenGL ES 之前，总结下我自己接触 OpenGL ES 时的一些疑惑，我相信这也是初学者都会遇到的一些困惑。&lt;/p&gt;
&lt;h2 id=&quot;Q_&amp;amp;_A&quot;&gt;Q &amp;amp; A&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Q：OpenGL 是什么 ?&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A：&lt;strong&gt;OpenGL&lt;/strong&gt;（Open Graphics Library）是 Khronos Group （一个图形软硬件行业协会，该协会主要关注图形和多媒体方面的开放标准）开发维护的一个规范，它是硬件无关的。它主要为我们定义了用来操作图形和图片的一系列函数的 API，需要注意的是 &lt;strong&gt;OpenGL 本身并非 API&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;而 GPU 的硬件开发商则需要提供满足 OpenGL 规范的实现，这些实现通常被称为”驱动“，它们负责将 OpenGL 定义的 API 命令翻译为 GPU 指令。&lt;strong&gt;所以你可以用同样的 OpenGL 代码在不同的显卡上跑&lt;/strong&gt;，因为它们实现了同一套规范，尽管内部实现可能存在差异。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;&lt;strong&gt;Q：OpenGL ES 和 OpenGL 有什么关系 ?&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A：OpenGL ES（OpenGL for Embedded Systems）是 OpenGL 的子集，针对手机、PDA和游戏主机等嵌入式设备而设计。该规范也是由 Khronos Group 开发维护。&lt;/p&gt;
&lt;p&gt;OpenGL ES 是从 OpenGL 裁剪定制而来的，去除了 glBegin/glEnd，四边形（GL_QUADS）、多边形（GL_POLYGONS）等复杂图元等许多非绝对必要的特性，剩下最核心有用的部分。&lt;/p&gt;
&lt;p&gt;可以理解成是一个&lt;strong&gt;在移动平台上能够支持 OpenGL 最基本功能的精简规范&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xkc7a.com1.z0.glb.clouddn.com/20170111148411873373682.jpg?imageView2/0/format/jpg&quot; alt=&quot;20170111148411873373682.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;OpenGL ES 横跨在两个处理器之间，&lt;strong&gt;协调两个内存区域之间的数据交换&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Q：为什么要使用 OpenGL ES ?&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A：通常来说，计算机系统中 CPU、GPU 是协同工作的。CPU 计算好显示内容提交到 GPU，GPU 渲染完成后将渲染结果放入帧缓冲区，随后视频控制器会按照 VSync 信号逐行读取帧缓冲区的数据，经过可能的数模转换传递给显示器显示。所以，尽可能让 CPU 和 GPU 各司其职发挥作用是提高渲染效率的关键。&lt;/p&gt;
&lt;p&gt;正如我们之前提到过，OpenGL 正是给我们提供了访问 GPU 的能力，不仅如此，它还引入了&lt;strong&gt;缓存&lt;/strong&gt;（Buffer）这个概念，大大提高了处理效率。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xkc7a.com1.z0.glb.clouddn.com/20170111148411700373589.jpg?imageView2/0/format/jpg&quot; alt=&quot;20170111148411700373589.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;图中的剪头，代表着数据交换，也是主要的性能瓶颈。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;从一个内存区域复制到另一个内存区域的速度是相对较慢的&lt;/strong&gt;，并且在内存复制的过程中，CPU 和 GPU 都不能处理这区域内存，避免引起错误。此外，CPU / GPU 执行计算的速度是很快的，而内存的访问是相对较慢的，这也导致&lt;strong&gt;处理器的性能处于次优状态&lt;/strong&gt;，这种状态叫做“&lt;strong&gt;数据饥饿&lt;/strong&gt;”，简单来说就是&lt;strong&gt;空有一身本事却无用武之地&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;针对此，OpenGL 为了提升渲染的性能，为两个内存区域间的数据交换定义了&lt;strong&gt;缓存&lt;/strong&gt;。缓存是指 &lt;strong&gt;GPU 能够控制和管理的连续 RAM&lt;/strong&gt;。程序从 CPU 的内存复制数据到 OpenGL ES 的缓存。通过独占缓存，GPU 能够尽可能以有效的方式读写内存。 GPU 把它处理数据的能力异步地应用在缓存上，意味着 GPU 使用缓存中的数据工作的同时，运行在 CPU 中的程序可以继续执行。&lt;/p&gt;
&lt;p&gt;另外，在 iOS 平台上，&lt;a href=&quot;https://developer.apple.com/library/content/documentation/GraphicsAnimation/Conceptual/SpriteKit_PG/Introduction/Introduction.html#//apple_ref/doc/uid/TP40013043&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SpriteKit&lt;/a&gt;，&lt;a href=&quot;https://developer.apple.com/library/content/documentation/GraphicsImaging/Conceptual/CoreImaging/ci_intro/ci_intro.html#//apple_ref/doc/uid/TP30001185&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Core Image&lt;/a&gt;，&lt;a href=&quot;https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/CoreAnimation_guide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40004514&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Core Animation&lt;/a&gt; 也都是基于 OpenGL ES 实现的，所以在它们各自的领域，也都有不错的表现。&lt;/p&gt;
&lt;p&gt;在图像处理方面，Core Image 提供了便捷的使用以及高效的性能，但是使用原生的 OpenGL ES 会更灵活，可定制性更高，同时支持跨平台。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Q：学习 OpenGL ES 需要关注哪些内容，本系列会如何介绍 OpenGL ES ?&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A：当然，如果你想全面系统的了解 OpenGL ES，那么每个接口，每种数据类型，OpenGL 工作原理，图形渲染管线每个阶段做了什么，如何编写着色器脚本等等都是需要了解的。这样的话，对着红蓝宝书学习是没有错的。&lt;/p&gt;
&lt;p&gt;毋庸置疑，这样的学习必定是漫长枯燥的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;你可能看了半天，学会渲染一个旋转的立方体，然后被一堆矩阵变换公式折腾的死去活来…&lt;/li&gt;
&lt;li&gt;又或者看了半天，了解了一大堆概念，混合，深度测试，模版测试，面剔除等等，但是却不知道什么时候该用…&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;无可厚非，OpenGL 需要学习的东西太多太多（至少我个人还只是学了点皮毛），但是它们也有轻重之分，也有更好的学习方式。&lt;/p&gt;
&lt;p&gt;本系列要做的，就是先详述必备的概念，便于之后的学习。然后用最直接的方式，&lt;strong&gt;针对图像处理，逐步实现各种效果&lt;/strong&gt;，来慢慢深入学习 OpenGL。毕竟真正做出了东西，才会有学习的动力。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Q：该系列会使用哪个版本的 OpenGL ES ?&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A：OpenGL ES 2.0&lt;/p&gt;
&lt;p&gt;目前 iOS 平台支持的有 OpenGL ES 1.0，2.0，3.0。&lt;/p&gt;
&lt;p&gt;OpenGL ES 1.0 是&lt;strong&gt;固定管线&lt;/strong&gt;，就是只可配置的管线，实现不同效果就好像在电路中打开不同的开关一样，可定制程度低，当然不选择它。&lt;/p&gt;
&lt;p&gt;OpenGL ES 2.0，3.0 都是&lt;strong&gt;可编程管线&lt;/strong&gt;，各种效果及他们的组合可以通过一般编程的方式实现，自由度高得多。虽然 OpenGL ES 3.0 加入了一些新的特性，但是它除了需要 &lt;strong&gt;iOS 7.0&lt;/strong&gt; 以上之外，还对硬件有要求。&lt;strong&gt;需要 iPhone 5S 之后的设备才支持&lt;/strong&gt;，这意味着包括 iPhone 5C 上使用的 PowerVR Series6 的 GPU 也是不支持。&lt;/p&gt;
&lt;p&gt;出于现有主流设备的考虑，选择了 OpenGL ES 2.0。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;至此，如果觉得本系列文章还值得期待，那么，让我们一起努力吧～&lt;/p&gt;
</content:encoded>
      
      <comments>http://http://colin1994.github.io/2017/04/01/OpenGLES-Lesson00/#disqus_thread</comments>
    </item>
    
    <item>
      <title>OpenGL ES， 初学者的自我总结</title>
      <link>http://http://colin1994.github.io/2017/04/01/OpenGLES-Menu/</link>
      <guid>http://http://colin1994.github.io/2017/04/01/OpenGLES-Menu/</guid>
      <pubDate>Sat, 01 Apr 2017 11:18:10 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;前言：&quot;&gt;前言：&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;学习 OpenGL ES 一段时间了，&lt;strong&gt;深知这个过程的不容易&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;尤其是入门，OpenGL 到底好在哪里？什么是渲染管线？什么是状态机？纹理是不是就是图片？深度测试，模版测试又是什么鬼？…&lt;/p&gt;
&lt;p&gt;OpenGL &lt;strong&gt;有太多太多的东西需要学习&lt;/strong&gt;。我最初接触 OpenGL，就是想借助它，实现美图秀秀里的一些功能。然而，不知道看了多少教程，实现了多少个旋转立方体，困惑了多少次，放弃了多少回…&lt;/p&gt;
&lt;p&gt;慢慢地，似乎找到了一些门路…&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以导入照片处理并保存了&lt;/li&gt;
&lt;li&gt;可以实现简单的滤镜了&lt;/li&gt;
&lt;li&gt;可以实现画笔功能了&lt;/li&gt;
&lt;li&gt;可以实现马赛克功能了&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;于是，这系列的文章应运而生。&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded>&lt;h2 id=&quot;前言：&quot;&gt;前言：&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;学习 OpenGL ES 一段时间了，&lt;strong&gt;深知这个过程的不容易&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;尤其是入门，OpenGL 到底好在哪里？什么是渲染管线？什么是状态机？纹理是不是就是图片？深度测试，模版测试又是什么鬼？…&lt;/p&gt;
&lt;p&gt;OpenGL &lt;strong&gt;有太多太多的东西需要学习&lt;/strong&gt;。我最初接触 OpenGL，就是想借助它，实现美图秀秀里的一些功能。然而，不知道看了多少教程，实现了多少个旋转立方体，困惑了多少次，放弃了多少回…&lt;/p&gt;
&lt;p&gt;慢慢地，似乎找到了一些门路…&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以导入照片处理并保存了&lt;/li&gt;
&lt;li&gt;可以实现简单的滤镜了&lt;/li&gt;
&lt;li&gt;可以实现画笔功能了&lt;/li&gt;
&lt;li&gt;可以实现马赛克功能了&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;于是，这系列的文章应运而生。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;目标&quot;&gt;目标&lt;/h2&gt;&lt;p&gt;这系列文章主要是个人学习过程中的一些总结，因为本人也是初学者，所以会从初学者角度，介绍 OpenGL ES 图像处理最直接的一些知识。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;利用 OpenGL ES，学习如何在 iOS 平台上进行图像处理，实现各种效果。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这，就是我想学到的，也是想分享给大家的。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;PS：时间允许的话，希望能保证一个星期输出一篇文章，鞭策自己～&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;目录&quot;&gt;目录&lt;/h2&gt;&lt;h3 id=&quot;基础扫盲：&quot;&gt;基础扫盲：&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://colin1994.github.io/2017/04/01/OpenGLES-Lesson00/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;OpenGL ES 开篇&lt;/a&gt; : 以 Q&amp;amp;A 的形式，列举出在学习 OpenGL ES 之前会存在的一些疑惑。权衡是否该继续学习 OpenGL ES。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://colin1994.github.io/2017/04/01/OpenGLES-Lesson01/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;OpenGL ES 基础概念&lt;/a&gt;：扫盲篇，先介绍一些必须了解的知识，便于之后能直接进入实战阶段。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://colin1994.github.io/2017/04/09/OpenGLES-Lesson02/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;OpenGL ES 环境搭建&lt;/a&gt;：详解 OpenGL ES 接入方式，以最基础效果（设置背景色）来阐述。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://colin1994.github.io/2017/04/18/OpenGLES-Lesson03/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;渲染基本图元，三角形&lt;/a&gt;：详细介绍可编程图形渲染管线是如何工作的。&lt;/li&gt;
&lt;li&gt;GLSL 详解（基础篇）：详细介绍 OpenGL ES 2.0 着色器语言 GLSL 基础语法。&lt;/li&gt;
&lt;li&gt;GLSL 详解（高级篇）：详细介绍 OpenGL ES 2.0 着色器语言高级特性。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;Demo_讲解：&quot;&gt;Demo 讲解：&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;显示图片&lt;/li&gt;
&lt;li&gt;视图封装&lt;/li&gt;
&lt;li&gt;滤镜：色温（简单全局应用）&lt;/li&gt;
&lt;li&gt;滤镜：Vignette，晕映（根据距离，区分处理）&lt;/li&gt;
&lt;li&gt;形变：马赛克（简单形变，几点汇聚成一点）&lt;/li&gt;
&lt;li&gt;形变：素描效果（根据边缘点，动态计算取样点色值）&lt;/li&gt;
&lt;li&gt;基于 Lookup Table（Lut）的滤镜实现（用查找表替代浮点计算，提高效率）&lt;/li&gt;
&lt;li&gt;多重滤镜叠加（实现及优化）&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;实战训练：&quot;&gt;实战训练：&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;敬请期待&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;学习资料&quot;&gt;学习资料&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;PS：这里将罗列个人学习过程中，认为好的一些书籍，教程，Demo等。&lt;/p&gt;
&lt;p&gt;该系列的文章中，一些阐述，配图，可能是从其它文章或者书籍中摘录整理的。为保证阅读以及书写方便，这部分出处说明统一放到学习资料里。&lt;/p&gt;
&lt;p&gt;本人也处于学习阶段，精力有限，难免引用前人优秀教程。如果对您造成不必要的麻烦，请及时告知。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;书籍&quot;&gt;书籍&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://www.khronos.org/opengles/sdk/docs/reference_cards/OpenGL-ES-2_0-Reference-card.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;OpenGL ES 2.0 API 快速参考卡片&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.amazon.com/OpenGL-Programming-Guide-Official-Learning/dp/0134495497&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;红宝书：OpenGL Programming Guide&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.amazon.com/OpenGL-Superbible-Comprehensive-Tutorial-Reference/dp/0672337479&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;蓝宝书：OpenGL Superbible&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;教程&quot;&gt;教程&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/library/content/documentation/3DDrawing/Conceptual/OpenGLES_ProgrammingGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40008793-CH1-SW1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;OpenGL ES Programming Guide for iOS&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://learnopengl.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Learn OpenGL&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.edwinho.org/lessons/2015-08/opengl-es.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;OpenGL ES_Max&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/kesalin/article/details/8221393&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;OpenGL ES 01 OpenGL ES之初体验&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Demo&quot;&gt;Demo&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/twenty3/GLImageProcessing&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GLImageProcessing&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/BradLarson/GPUImage&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GPUImage&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Ciechan/BCMeshTransformView&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;BCMeshTransformView&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Idea&quot;&gt;Idea&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://www.shadertoy.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Shadertoy&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://photofunia.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PhotoFunia&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;PS：本人也处于 OpenGL ES 学习阶段，所以文章中&lt;strong&gt;难免存在问题&lt;/strong&gt;，或者待优化地方。如果有任何不对，&lt;strong&gt;欢迎指出交流&lt;/strong&gt;～&lt;/p&gt;
&lt;/blockquote&gt;
</content:encoded>
      
      <comments>http://http://colin1994.github.io/2017/04/01/OpenGLES-Menu/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Core Image 之自定义 Filter~</title>
      <link>http://http://colin1994.github.io/2016/10/21/Core-Image-Custom-Filter/</link>
      <guid>http://http://colin1994.github.io/2016/10/21/Core-Image-Custom-Filter/</guid>
      <pubDate>Fri, 21 Oct 2016 14:37:08 GMT</pubDate>
      <description>
      
        &lt;p&gt;Core Image 系列，目前的文章如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://colin1994.github.io/2016/10/21/Core-Image-OverView/&quot;&gt;Core Image 你需要了解的那些事~&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://colin1994.github.io/2016/10/21/Core-Image-Custom-Filter/&quot;&gt;Core Image 之自定义 Filter~&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://xiaozhuanlan.com/topic/3095648721&quot;&gt;Core Image【3】—— 2017 新特性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://xiaozhuanlan.com/topic/5094762183&quot;&gt;Core Image【4】—— 2018 新特性&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;&lt;p&gt;最近在研究 Core Image 自定义 Filter 相关内容，重新学习了 Core Image，对 Core Image 的一些优化点也有了一定的了解。故此记录，与君交流~&lt;/p&gt;
&lt;p&gt;本文主要讲解 Core Image 自定义滤镜部分的内容，包括如何使用自定义 Filter，如何编写 kernel，QC 工具介绍，注意点以及一些开发技巧。&lt;/p&gt;
&lt;p&gt;在这之前，我默认你了解 Core Image 的基本原理以及使用方式。如果没有，我建议你花点时间看看我的上一篇文章：&lt;a href=&quot;http://colin1994.github.io/2016/10/21/Core-Image-OverView/&quot;&gt;Core Image 你需要了解的那些事~&lt;/a&gt;，它介绍 Core Image 相关基础概念、使用方式、注意点以及和其他图像处理方案的对比，想必会有所收获。&lt;/p&gt;
&lt;p&gt;现在，开始吧～&lt;img src=&quot;http://wanzao2.b0.upaiyun.com/system/pictures/1/original/27.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded>&lt;p&gt;Core Image 系列，目前的文章如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://colin1994.github.io/2016/10/21/Core-Image-OverView/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Core Image 你需要了解的那些事~&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://colin1994.github.io/2016/10/21/Core-Image-Custom-Filter/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Core Image 之自定义 Filter~&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://xiaozhuanlan.com/topic/3095648721&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Core Image【3】—— 2017 新特性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://xiaozhuanlan.com/topic/5094762183&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Core Image【4】—— 2018 新特性&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;&lt;p&gt;最近在研究 Core Image 自定义 Filter 相关内容，重新学习了 Core Image，对 Core Image 的一些优化点也有了一定的了解。故此记录，与君交流~&lt;/p&gt;
&lt;p&gt;本文主要讲解 Core Image 自定义滤镜部分的内容，包括如何使用自定义 Filter，如何编写 kernel，QC 工具介绍，注意点以及一些开发技巧。&lt;/p&gt;
&lt;p&gt;在这之前，我默认你了解 Core Image 的基本原理以及使用方式。如果没有，我建议你花点时间看看我的上一篇文章：&lt;a href=&quot;http://colin1994.github.io/2016/10/21/Core-Image-OverView/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Core Image 你需要了解的那些事~&lt;/a&gt;，它介绍 Core Image 相关基础概念、使用方式、注意点以及和其他图像处理方案的对比，想必会有所收获。&lt;/p&gt;
&lt;p&gt;现在，开始吧～&lt;img src=&quot;http://wanzao2.b0.upaiyun.com/system/pictures/1/original/27.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;自定义_Filter_流程&quot;&gt;自定义 Filter 流程&lt;/h2&gt;&lt;p&gt;自定义的 Filter 和系统内置的各种 CIFilter，使用起来方式是一样的。我们唯一要做的，就是实现一个符合规范的 CIFilter 的子类，然后该怎么用怎么用。&lt;/p&gt;
&lt;p&gt;这里总结起来就3步：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;编写 CIKernel：使用 CIKL，自定义滤镜效果。&lt;/li&gt;
&lt;li&gt;加载 CIKernel：CIFilter 读取编写好的 CIKernel。&lt;/li&gt;
&lt;li&gt;设置参数：设置 CIKernel 需要的输入参数以及 DOD 和 ROI。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不难看出，这些操作都是围绕 &lt;strong&gt;CIKernel&lt;/strong&gt; 展开的，那么，它是什么？ CIKL，DOD，ROI 又是什么鬼？&lt;img src=&quot;http://wanzao2.b0.upaiyun.com/system/pictures/14/original/5.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;先撇开这些麻烦的东西，我们先这样简单的认为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CIKernel 是我们 Filter 对应的脚本，它描述 Filter 的具体工作原理。&lt;/li&gt;
&lt;li&gt;CIKL （Core Image Kernel Language）是编写 CIKernel 的语言。&lt;/li&gt;
&lt;li&gt;DOD，ROI 当做普通的参数处理。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;弄清了这些，我们再来看具体操作过程。&lt;/p&gt;
&lt;p&gt;拿一个图片翻转效果举例，效果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xkc7a.com1.z0.glb.clouddn.com/2016101449356mirrorX.png&quot; alt=&quot;2016101449356mirrorX.png&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;1-_编写_CIKernel&quot;&gt;1. 编写 CIKernel&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;File —&amp;gt; New —&amp;gt; File —&amp;gt; Empty&lt;/strong&gt;， 创建一个名为 &lt;strong&gt;MirrorX.cikernel&lt;/strong&gt; 的文件。&lt;/p&gt;
&lt;p&gt;编辑 .cikernel 文件，比如：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;kernel vec2 mirrorX ( &lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt; imageWidth ) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  	&lt;span class=&quot;comment&quot;&gt;// 获取待处理点的位置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  	vec2 currentVec = destCoord();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 返回最终显示位置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; vec2 ( imageWidth - currentVec.x , currentVec.y ); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;PS：这个 kernel 如果有不懂的，可以先跳过。下文会重点说明。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;2-_加载_CIKernel&quot;&gt;2. 加载 CIKernel&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;File —&amp;gt; New —&amp;gt; File —&amp;gt; Cocoa Touch Clas&lt;/strong&gt;，新建一个继承自 CIFilter 的类，比如 &lt;strong&gt;MirrorXFilter&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;在 &lt;strong&gt;MirrorXFilter.m&lt;/strong&gt; 中，添加如下代码：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;CIKernel&lt;/span&gt; *customKernel = &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (instancetype)init &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; = [&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (customKernel == &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;NSBundle&lt;/span&gt; *bundle = [&lt;span class=&quot;built_in&quot;&gt;NSBundle&lt;/span&gt; bundleForClass: [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; class]];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;NSURL&lt;/span&gt; *kernelURL = [bundle URLForResource:&lt;span class=&quot;string&quot;&gt;@&quot;MirrorX&quot;&lt;/span&gt; withExtension:&lt;span class=&quot;string&quot;&gt;@&quot;cikernel&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;NSError&lt;/span&gt; *error;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *kernelCode = [&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; stringWithContentsOfURL:kernelURL&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                            encoding:&lt;span class=&quot;built_in&quot;&gt;NSUTF8StringEncoding&lt;/span&gt; error:&amp;amp;error];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (kernelCode == &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;Error loading kernel code string in %@\n%@&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                      &lt;span class=&quot;built_in&quot;&gt;NSStringFromSelector&lt;/span&gt;(_cmd),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                      [error localizedDescription]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                abort();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;NSArray&lt;/span&gt; *kernels = [&lt;span class=&quot;built_in&quot;&gt;CIKernel&lt;/span&gt; kernelsWithString:kernelCode];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            customKernel = [kernels objectAtIndex:&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这段代码很简单，重写 &lt;strong&gt;init&lt;/strong&gt; 方法，主要就是读取 .cikernel 文件中代表 CIKernel 的字符串（当然， CIKernel 也可以直接写在 NSString 里头，免去文件读取这步），然后使用 &lt;strong&gt;kernelsWithString&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;方法获取到真正的 CIKernel 对象。&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;+ (nullable &lt;span class=&quot;built_in&quot;&gt;NSArray&lt;/span&gt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;CIKernel&lt;/span&gt; *&amp;gt; *)kernelsWithString:(&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *)string  &lt;span class=&quot;built_in&quot;&gt;NS_AVAILABLE&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;_4, &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;_0);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;至此，CIKernel 加载完毕。&lt;/p&gt;
&lt;h3 id=&quot;3-_设置参数&quot;&gt;3. 设置参数&lt;/h3&gt;&lt;p&gt;在 &lt;strong&gt;MirrorXFilter.m&lt;/strong&gt; 中，添加需要的成员变量。&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MirrorXFilter&lt;/span&gt; () &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;CIImage&lt;/span&gt;  *inputImage;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里只需要一个成员变量，&lt;strong&gt;inputImage&lt;/strong&gt; 表示我们的输入图片。&lt;/p&gt;
&lt;p&gt;之后，就是设置参数，传入 kernel 中。&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 使用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;CIImage&lt;/span&gt; *)outputImage&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;CGFloat&lt;/span&gt; inputWidth = inputImage.extent.size.width;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;CIImage&lt;/span&gt; *result = [customKernel applyWithExtent: inputImage.extent roiCallback: ^( &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; index, &lt;span class=&quot;built_in&quot;&gt;CGRect&lt;/span&gt; rect ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; rect;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; inputImage: inputImage arguments: @[@(inputWidth)]];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; result;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里只需要重写 outputImage 方法即可。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;extent&lt;/strong&gt; 用于返回 CIImage 对象对应的 bounds，通过它可以拿到图片的宽度。&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* Return a rect the defines the bounds of non-(0,0,0,0) pixels */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;NS_NONATOMIC_IOSONLY&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;readonly&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;CGRect&lt;/span&gt; extent;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后通过  applyWithExtent 来设置对应的参数。&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (nullable &lt;span class=&quot;built_in&quot;&gt;CIImage&lt;/span&gt; *)applyWithExtent:(&lt;span class=&quot;built_in&quot;&gt;CGRect&lt;/span&gt;)extent&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                          roiCallback:(&lt;span class=&quot;built_in&quot;&gt;CIKernelROICallback&lt;/span&gt;)callback&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                           inputImage:(&lt;span class=&quot;built_in&quot;&gt;CIImage&lt;/span&gt;*)image&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            arguments:(nullable &lt;span class=&quot;built_in&quot;&gt;NSArray&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;&amp;gt; *)args;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里有4个参数。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;extent，也就是之前提到的 DOD，暂且略过。&lt;/li&gt;
&lt;li&gt;callback，也就是之前提到的 ROI，暂且略过。&lt;/li&gt;
&lt;li&gt;image，缺省的 inputImage，传入我们的成员变量 inputImage 即可。&lt;/li&gt;
&lt;li&gt;args，输入参数数组，与 CIKernel 中定义的一一对应。这里只有一个 inputWidth。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;PS：这里可能有同学会有疑惑，为什么 inputImage 可以缺省，inputWidth 就需要传入呢。这里暂且不纠结，下面会详细说明~&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如此，一个自定义 Filter 就完成了。简单吧~&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://wanzao2.b0.upaiyun.com/system/pictures/16/original/15.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;4-_使用&quot;&gt;4. 使用&lt;/h3&gt;&lt;p&gt;至于使用上，则和普通的 CIFilter 基本一致。&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#import &lt;span class=&quot;meta-string&quot;&gt;&quot;MirrorXFilter.h&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 1. 将UIImage转换成CIImage&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;CIImage&lt;/span&gt; *ciImage = [[&lt;span class=&quot;built_in&quot;&gt;CIImage&lt;/span&gt; alloc] initWithImage:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.imageView.image];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 2. 创建滤镜&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.filter = [[MirrorXFilter alloc] init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 设置相关参数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.filter setValue:ciImage forKey:&lt;span class=&quot;string&quot;&gt;@&quot;inputImage&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 3. 渲染并输出CIImage&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;CIImage&lt;/span&gt; *outputImage = [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.filter outputImage];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 4. 获取绘制上下文&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.context = [&lt;span class=&quot;built_in&quot;&gt;CIContext&lt;/span&gt; contextWithOptions:&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 5. 创建输出CGImage&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;CGImageRef&lt;/span&gt; cgImage = [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.context create&lt;span class=&quot;built_in&quot;&gt;CGImage&lt;/span&gt;:outputImage fromRect:[outputImage extent]];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;UIImage&lt;/span&gt; *image = [&lt;span class=&quot;built_in&quot;&gt;UIImage&lt;/span&gt; imageWith&lt;span class=&quot;built_in&quot;&gt;CGImage&lt;/span&gt;:cgImage];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 6. 释放CGImage&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;CGImageRelease&lt;/span&gt;(cgImage);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如此，我们便可得到翻转后的图片。&lt;/p&gt;
&lt;h3 id=&quot;5-_更多&quot;&gt;5. 更多&lt;/h3&gt;&lt;p&gt;当然，如果你是一个完美主义者，我觉得你还还可以做更多~&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;NSDictionary&lt;/span&gt; *)customAttributes&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; @&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;@&quot;inputDistance&quot;&lt;/span&gt; :  @&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            k&lt;span class=&quot;built_in&quot;&gt;CIAttributeMin&lt;/span&gt;       : @&lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            k&lt;span class=&quot;built_in&quot;&gt;CIAttributeMax&lt;/span&gt;       : @&lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            k&lt;span class=&quot;built_in&quot;&gt;CIAttributeSliderMin&lt;/span&gt; : @&lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            k&lt;span class=&quot;built_in&quot;&gt;CIAttributeSliderMax&lt;/span&gt; : @&lt;span class=&quot;number&quot;&gt;0.7&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            k&lt;span class=&quot;built_in&quot;&gt;CIAttributeDefault&lt;/span&gt;   : @&lt;span class=&quot;number&quot;&gt;0.2&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            k&lt;span class=&quot;built_in&quot;&gt;CIAttributeIdentity&lt;/span&gt;  : @&lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            k&lt;span class=&quot;built_in&quot;&gt;CIAttributeType&lt;/span&gt;      : k&lt;span class=&quot;built_in&quot;&gt;CIAttributeTypeScalar&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;@&quot;inputSlope&quot;&lt;/span&gt; : @&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            k&lt;span class=&quot;built_in&quot;&gt;CIAttributeSliderMin&lt;/span&gt; : @&lt;span class=&quot;number&quot;&gt;-0.01&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            k&lt;span class=&quot;built_in&quot;&gt;CIAttributeSliderMax&lt;/span&gt; : @&lt;span class=&quot;number&quot;&gt;0.01&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            k&lt;span class=&quot;built_in&quot;&gt;CIAttributeDefault&lt;/span&gt;   : @&lt;span class=&quot;number&quot;&gt;0.00&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            k&lt;span class=&quot;built_in&quot;&gt;CIAttributeIdentity&lt;/span&gt;  : @&lt;span class=&quot;number&quot;&gt;0.00&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            k&lt;span class=&quot;built_in&quot;&gt;CIAttributeType&lt;/span&gt;      : k&lt;span class=&quot;built_in&quot;&gt;CIAttributeTypeScalar&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         k&lt;span class=&quot;built_in&quot;&gt;CIInputColorKey&lt;/span&gt; : @&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         k&lt;span class=&quot;built_in&quot;&gt;CIAttributeDefault&lt;/span&gt; : [&lt;span class=&quot;built_in&quot;&gt;CIColor&lt;/span&gt; colorWithRed:&lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                               green:&lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                blue:&lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                               alpha:&lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以为自定义的 Filter 添加对应的参数描述，以及默认值，范围限制等。&lt;/p&gt;
&lt;p&gt;这不是必须的，但却是可取的。至于如何设置，可以参考 CIFilter 对应的 &lt;strong&gt;attributes&lt;/strong&gt; 属性，或者参照上面这个例子。&lt;/p&gt;
&lt;p&gt;另外，iOS 9之后，引入了 &lt;strong&gt;registerFilterName&lt;/strong&gt; , 你可以通过重写 &lt;code&gt;+ (CIFilter *)filterWithName: (NSString *)name;&lt;/code&gt; ，然后外部使用的时候，跟 CIFilter 一模一样。&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/** Publishes a new filter called &#39;name&#39;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; The constructor object &#39;anObject&#39; should implement the filterWithName: method.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; That method will be invoked with the name of the filter to create.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; The class attributes must have a kCIAttributeFilterCategories key associated with a set of categories.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; @param   attributes    Dictionary of the registration attributes of the filter. See below for attribute keys.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+ (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)registerFilterName:(&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *)name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               constructor:(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;CIFilterConstructor&lt;/span&gt;&amp;gt;)anObject&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           classAttributes:(&lt;span class=&quot;built_in&quot;&gt;NSDictionary&lt;/span&gt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *,&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;&amp;gt; *)attributes &lt;span class=&quot;built_in&quot;&gt;NS_AVAILABLE&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;_4, &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;_0);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;不过需要 iOS 9以上才支持，另外一般用于打包成 Image Units 给他人使用。&lt;/p&gt;
&lt;p&gt;正常情况下应该是用不到。如果真有这个需求，可以参考这篇文章： &lt;a href=&quot;https://developer.apple.com/library/prerelease/content/documentation/GraphicsImaging/Conceptual/CoreImaging/ci_image_units/ci_image_units.html#//apple_ref/doc/uid/TP30001185-CH7-SW12&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Packaging and Loading Image Units&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;至此，自定义 Filter 的流程就算走完了，我们很容易就可以配置好需要的环境。&lt;/p&gt;
&lt;p&gt;然而，真正的自定义部分，才刚刚开始！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://wanzao2.b0.upaiyun.com/system/pictures/183/original/%E5%BC%80%E5%BF%8336.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;DOD_&amp;amp;_ROI&quot;&gt;DOD &amp;amp; ROI&lt;/h2&gt;&lt;h3 id=&quot;1-_DOD&quot;&gt;1. DOD&lt;/h3&gt;&lt;p&gt;DOD ( domain of definition ) ，简单来说就是 Filter 处理后，输入的图片区域。&lt;/p&gt;
&lt;p&gt;一般来说，Filter 操作都是基于原图，添加上效果，但是并不会改变图片的大小，显示区域。所以一般与原图的一致即可。&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;CGRect&lt;/span&gt; dod = inputImage.extent;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;但是针对形变类的 Filter，则需要根据输出图片大小，设置正确的 DOD。&lt;/p&gt;
&lt;h3 id=&quot;2-_ROI&quot;&gt;2. ROI&lt;/h3&gt;&lt;p&gt;ROI ( region of interest )，在一定的时间内特别感兴趣的区域，即当前处理区域。&lt;/p&gt;
&lt;p&gt;可以简单的理解为：当前处理区域对应于原图中的哪个区域。&lt;/p&gt;
&lt;p&gt;ROI 的定义如下：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* Block callback used by Core Image to ask what rectangles of a kernel&#39;s input images&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * are needed to produce a desired rectangle of the kernel&#39;s output image.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * &#39;index&#39; is the 0-based index specifying which of the kernel&#39;s input images is being queried.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * &#39;destRect&#39; is the extent rectangle of kernel&#39;s output image being queried.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * Returns the rectangle of the index&#39;th input image that is needed to produce destRect.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * Returning CGRectNull indicates that the index&#39;th input image is not needed to produce destRect.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * The returned rectangle need not be contained by the extent of the index&#39;th input image.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;CGRect&lt;/span&gt; (^&lt;span class=&quot;built_in&quot;&gt;CIKernelROICallback&lt;/span&gt;)(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; index, &lt;span class=&quot;built_in&quot;&gt;CGRect&lt;/span&gt; destRect);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;CIKernelROICallback 在 Core Image 内部进行处理的时候，会多次调用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;index&lt;/strong&gt; 表示输入图片的下标，顺序和 kernel 中的入参顺序一致，从0开始。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;destRect&lt;/strong&gt; 表示输出图片的区域。 也就是我们先前设置的 DOD。&lt;/p&gt;
&lt;p&gt;那，我们为什么要显示设置 ROI 呢 ？&lt;/p&gt;
&lt;p&gt;因为输入图片中，参与处理的实际区域，Core Image 是无法知道的，我们需要显式的告诉 CI 这个区域。&lt;/p&gt;
&lt;p&gt;这么讲可能有点难以理解，下面我们看两个具体的例子。&lt;/p&gt;
&lt;p&gt;先看一个旋转的例子。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xkc7a.com1.z0.glb.clouddn.com/2016101449433roi_1.png&quot; alt=&quot;2016101449433roi_1.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;这里就是进行了 x，y 互换操作。很容易得到我们的 DOD：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;CGRect&lt;/span&gt; dod = &lt;span class=&quot;built_in&quot;&gt;CGRectMake&lt;/span&gt;(inputImage.extent.origin.y, inputImage.extent.origin.x, inputImage.extent.size.height, inputImage.extent.size.width);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// e.g.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 原图片extent (0, 0, 200, 300)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 旋转后的输出图片 (0, 0, 300, 200)，也就是 DOD&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;那 ROI 应该怎么设置呢 ？我们之前说过，ROI 计算就是计算当前处理区域对应于原图中的哪个区域。&lt;/p&gt;
&lt;p&gt;也就是一个逆向过程。&lt;/p&gt;
&lt;p&gt;假如，A：输入图片中的某点   B：输出图片中的某点。那么 ROI 计算可以理解成  ROI（B）= A。&lt;/p&gt;
&lt;p&gt;理解好这点，我们不难写出这个操作对应的 ROI：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;CIKernelROICallback&lt;/span&gt; callback = ^(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; index, &lt;span class=&quot;built_in&quot;&gt;CGRect&lt;/span&gt; rect) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;CGRectMake&lt;/span&gt;(rect.origin.y, rect.origin.x, rect.size.height, rect.size.width);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;另外，当输入图片不止一个的时候，则需要根据 &lt;strong&gt;index&lt;/strong&gt; 来做区别。因为这里的 &lt;strong&gt;rect&lt;/strong&gt; 每次都是返回 &lt;strong&gt;DOD&lt;/strong&gt;，而不是当前图片的 extent。&lt;/p&gt;
&lt;h2 id=&quot;CIKernel_介绍&quot;&gt;CIKernel 介绍&lt;/h2&gt;&lt;p&gt;终于到了本文最重要的部分了，CIKernel 介绍！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://wanzao2.b0.upaiyun.com/system/pictures/187/original/%E5%BC%80%E5%BF%83ForeverAloneExcited.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;在此之前，我们先了解下它的一些背景知识。&lt;/p&gt;
&lt;p&gt;CIKernel 需要使用 Core Image Kernel Language (CIKL) 来编写，CIKL 是 OpenGL Shading Language (GLSL) 的子集，如果你之前有过 OpenGL 着色器编写的经验，这部分你会感觉格外亲切。CIKL 集成了 GLSL 绝大部分的参数类型和内置函数，另外它还添加了一些适应 Core Image 的参数类似和函数。&lt;/p&gt;
&lt;p&gt;一个 kernel 的处理过程，可以用下面伪代码表示：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; ... image.width&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; j &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; ... image.height&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        New_Image[i][j] = CustomKernel(Current_Image[i][j])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;也就是说，每个需要处理的 fragment 都会调用一次 kernel 相关操作，每次操作的目的就是返回当前 fragment 对应的结果 fragment，这里 fragment 可以理解为像素点。&lt;/p&gt;
&lt;p&gt;所以我们的 kernel，应该是针对一个点，而不是一张图片。&lt;/p&gt;
&lt;p&gt;Core Image 内置了3种适用于不同场景的 Kernel，可以根据实际需求来选择。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CIColorKernel：用于处理色值变化的 Filter。&lt;/li&gt;
&lt;li&gt;CIWarpKernel：用于处理形变的 Filter。&lt;/li&gt;
&lt;li&gt;CIKernel：通用。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;CIColorKernel，CIWarpKernel 是官方推荐使用的。某个 Filter，在使用它们能实现的情况下，应该使用它们，即使是一个 CIKernel 拆分成多个 CIColorKernel 以及 CIWarpKernel，也应该用这种方式。因为 Core Image 内部对这两张 Kernel 做了优化。&lt;/p&gt;
&lt;p&gt;当然，它们的使用时有限制的。目的一定要很纯粹，比如 CIColorKernel 只能处理色值上的变化。否则就算定义为 CIColorKernel，如果实现上涉及了其他 CIColorKernel 不允许的操作，Core Image 也会当做普通的 CIFilter 处理。&lt;/p&gt;
&lt;p&gt;另外，kernel 的入参只支持下面这么几种：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Kernel routine input parameter&lt;/th&gt;
&lt;th&gt;Object&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;sampler&lt;/td&gt;
&lt;td&gt;CISampler&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;__table sampler&lt;/td&gt;
&lt;td&gt;CISampler&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;__color&lt;/td&gt;
&lt;td&gt;&lt;code&gt;CIColor&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;float&lt;/td&gt;
&lt;td&gt;NSNumber&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;vec2, vec3, or vec4&lt;/td&gt;
&lt;td&gt;CIVector&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;简单说明一下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;sampler：可以理解成纹理，或者图片。外部以 CIImage 形式传入。&lt;/li&gt;
&lt;li&gt;__table sampler：表示颜色查找表（lookup table），虽然它也是图片，但是添加该声明可以避免被修改。外部以 CIImage 形式传入。&lt;/li&gt;
&lt;li&gt;__color：表示颜色。外部以 CIColor 形式传入。&lt;/li&gt;
&lt;li&gt;float：kernel 内部处理都是 float 类型。外部以 NSNumber 形式传入。&lt;/li&gt;
&lt;li&gt;vecN：表示一个多元向量。比如 vec2 可以表示一个点，vec4 可以表示一个色值。外部以 CIVector 形式传入。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;至于 kernel 中可以使用的函数，那就太多了。这里不一一枚举，在下面的具体讲解中，会说明几个常用的。如果想了解更多，可以参考  &lt;a href=&quot;https://developer.apple.com/library/content/documentation/GraphicsImaging/Reference/CIKernelLangRef/Introduction/Introduction.html#//apple_ref/doc/uid/TP40004397&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Core Image Kernel Language Reference&lt;/a&gt;，以及 &lt;a href=&quot;http://www.shaderific.com/glsl/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;OpenGL ES Shading Language Reference&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;下面我会通过一个 Demo，讲解这三种 Kernel 的具体用法。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;PS：建议阅读之前，下载 &lt;a href=&quot;https://github.com/colin1994/CoreImageDemo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;源码&lt;/a&gt; 配合着看。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;1-_CIColorKernel&quot;&gt;1. CIColorKernel&lt;/h3&gt;&lt;p&gt;首先看下官方的定义：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * CIColorKernel is an object that encapsulates a Core Image Kernel Language&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * routine that processes only the color information in images.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * Color kernels functions are declared akin to this example:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *   kernel vec4 myColorKernel (__sample fore, __sample back, vec4 params)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * The function must take a __sample argument for each input image.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * Additional arguments can be of type float, vec2, vec3, vec4, or __color.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * The destination pixel location is obtained by calling destCoord().&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * The kernel should not call sample(), sampleCoord(), or samplerTransform().&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * The function must return a vec4 pixel color.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NS_CLASS_AVAILABLE&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;_11, &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;_0)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;CIColorKernel&lt;/span&gt; : &lt;span class=&quot;title&quot;&gt;CIKernel&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;很重要的一点：&lt;strong&gt;processes only the color information in images&lt;/strong&gt;，它只处理图片的颜色信息。&lt;/p&gt;
&lt;p&gt;所以在使用它之前，一定要确保该 Filter 只涉及颜色处理。&lt;/p&gt;
&lt;p&gt;CIKL 的语法和大多数 C 阵营一样，变量，运算符，控制结构，函数等都大同小异，所以它的学习成本是很低的。&lt;/p&gt;
&lt;p&gt;真正的核心应该是：&lt;strong&gt;如果用这样的语言来实现这个滤镜，也就是我们经常说的算法。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;下面我们以一个 &lt;strong&gt;Vignette&lt;/strong&gt; 来实际讲解一下。&lt;/p&gt;
&lt;p&gt;它的效果如下所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xkc7a.com1.z0.glb.clouddn.com/2016101796011vignette_demo.gif&quot; alt=&quot;2016101796011vignette_demo.gif&quot;&gt;&lt;/p&gt;
&lt;p&gt;不难看出，Vignette 滤镜，它实际上就是一个FOV（Field of View） 的效果，即视野中央看的最清楚，清晰程度与到中心距离呈反比，与人类的视觉是类似的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xkc7a.com1.z0.glb.clouddn.com/2016101524815vignette.png&quot; alt=&quot;2016101524815vignette.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;所以针对图片上的每个像素点 A，经过 Vignette 滤镜处理后得到的 B，应该满足：&lt;/p&gt;
&lt;p&gt;Vignette（A）＝ A * Darken ＝ B； 而 Darken 的计算依赖 A 与中心点的距离。&lt;/p&gt;
&lt;p&gt;如此，我们可以很容易的写出对应的 kernel：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;kernel vec4 vignetteKernel(__sample image, vec2 center, &lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt; radius, &lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt; alpha)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 计算出当前点与中心的距离&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt; distance = distance(destCoord(), center) ;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 根据距离计算出暗淡程度&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt; darken = &lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt; - (distance / radius * alpha);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 返回该像素点最终的色值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    image.rgb *= darken;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; image.rgba;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;和 C 语言的一样，函数需要具备：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;返回类型：vec4&lt;/li&gt;
&lt;li&gt;函数名：vignetteKernel&lt;/li&gt;
&lt;li&gt;参数列表：__sample image, vec2 center, float radius, float alpha）&lt;/li&gt;
&lt;li&gt;函数体：｛｝中的具体实现&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有所不同的，kernel 函数需要带上 kernel 关键字，与其它普通函数做区分。一个 .cikernel 文件中，允许包括多个函数，甚至是多个 kernel 函数，不过&lt;strong&gt;函数调用要出现在函数定义之后&lt;/strong&gt;！&lt;/p&gt;
&lt;p&gt;另外，这里有个特别的参数类型，&lt;strong&gt;__sample&lt;/strong&gt; ，和之前讲的 &lt;strong&gt;sampler&lt;/strong&gt; 有所不同。因为这里我们使用的是 &lt;strong&gt;CIColorKernel&lt;/strong&gt;，在得到高效性能的同时，也有一定的局限性。因为只是处理图片当前位置的颜色信息，所以 &lt;strong&gt;__sample&lt;/strong&gt; 提供的 &lt;strong&gt;rgba&lt;/strong&gt; 变量足够了，无法获取一些其它的信息。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;比如在 CIKernel 中，可以通过 sample() 等函数获取其它位置的色值，而在 CIColorKernel 中，无法使用 sample()， sampleCoord() 以及 samplerTransform() 。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;下面逐行解释这个 kernel。&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 计算出当前点与中心的距离&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt; distance = distance(destCoord(), center) ;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;destCoord&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;varying vec2 destCoord ()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;返回当前正在处理的像素点所处坐标。(working space coordinates)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里使用的 CIKL 内置的函数 destCoord，它返回的坐标是基于 &lt;strong&gt;working space&lt;/strong&gt; 的。所谓 working space，即工作空间，它的取值范围对应图片实际大小。比如 inputImage 的大小为 300 * 200，那么 destCoord() 返回坐标的取值范围在 (0, 0) - (300, 200)。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;distance&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;float distance (vec2 p0, vec2 p1)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;计算向量p0，p1之间的距离&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如此便能很容易得到当前点与中心的距离。&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 根据距离计算出暗淡程度&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt; darken = &lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt; - (distance / radius * alpha);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;之后根据清晰程度与到中心距离呈反比这一原理，结合外部控制的 &lt;strong&gt;alpha&lt;/strong&gt; 变量，计算出暗淡程度。&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 返回该像素点最终的色值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;image.rgb *= darken;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; image.rgba;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里之前提到，&lt;strong&gt;__sample&lt;/strong&gt; 有个 rgba 变量，通过它可以获取到当前处理点的色值。&lt;/p&gt;
&lt;p&gt;在 CIKL 中，vec4 的任何一个分量都可以单独获取，也可以组合获取，例如 &lt;strong&gt;image.a&lt;/strong&gt;，&lt;strong&gt;image.rrgg&lt;/strong&gt; 等，都是可行的。&lt;/p&gt;
&lt;p&gt;CIColorKernel 是针对色值的处理，所以它的返回值必须是一个代表色值的 vec4 类型变量。&lt;/p&gt;
&lt;p&gt;至此，这个 vignetteKernel 就分析完毕了。很简单吧～&lt;/p&gt;
&lt;h3 id=&quot;2-_CIWarpKernel&quot;&gt;2. CIWarpKernel&lt;/h3&gt;&lt;p&gt;同样，先看下文档定义：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * CIWarpKernel is an object that encapsulates a Core Image Kernel Language&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * function that processes only the geometry of an image.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * Warp kernels functions are declared akin to this example:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *   kernel vec2 myWarpKernel (vec4 params)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * Additional arguments can be of type float, vec2, vec3, vec4.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * The destination pixel location is obtained by calling destCoord().&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * The kernel should not call sample(), sampleCoord(), or samplerTransform().&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * The function must return a vec2 source location.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NS_CLASS_AVAILABLE&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;_11, &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;_0)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;CIWarpKernel&lt;/span&gt; : &lt;span class=&quot;title&quot;&gt;CIKernel&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;同样，它也有很重要一点：&lt;strong&gt;processes only the geometry of an image&lt;/strong&gt;。它只处理图片的几何形状。&lt;/p&gt;
&lt;p&gt;所谓的改变几何形状，也就是形变，把原本放置在 A 处的点，用 B 处的点去填充，或者反过来，把原本 B 处的点，挪到 A 处去，也是一样的。&lt;/p&gt;
&lt;p&gt;它可以用这个表达式表示：&lt;strong&gt;Warp（A）＝ B；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;所以它和之前的 CIColorKernel 不同，它的返回值是 vec2，代表点的坐标。另外它只允许传入一张图片，所以这里的 inputImage 缺省了。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;同样的，在 CIWarpKernel 中，无法使用 sample()， sampleCoord() 以及 samplerTransform() 。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;下面以一个马赛克，像素化（Pixellate）的例子来讲解。它的效果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xkc7a.com1.z0.glb.clouddn.com/2016101762677pixellate_demo.gif&quot; alt=&quot;2016101762677pixellate_demo.gif&quot;&gt;&lt;/p&gt;
&lt;p&gt;马赛克，比较简单的一种算法是按照固定的间隔取像素点，将图片分割成一些小块，然后每个小块内选择一个像素点，然后把这个区域全部用这个像素点填充即可。这里的每个小块，称作晶格，晶格越大，马赛克效果越好。&lt;/p&gt;
&lt;p&gt;依照这个简单算法，我们可以很容易的写出对应的 kernel：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;kernel vec2 pixellateKernel(&lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt; radius)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    vec2 positionOfDestPixel, centerPoint;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 获取当前点坐标&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    positionOfDestPixel = destCoord();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 获取对应晶格内的中心像素点&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    centerPoint.x = positionOfDestPixel.x - mod(positionOfDestPixel.x, radius * &lt;span class=&quot;number&quot;&gt;2.0&lt;/span&gt;) + radius;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    centerPoint.y = positionOfDestPixel.y - mod(positionOfDestPixel.y, radius * &lt;span class=&quot;number&quot;&gt;2.0&lt;/span&gt;) + radius;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; centerPoint;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;同样的，先是获取到当前处理点的坐标，positionOfDestPixel。&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 获取对应晶格内的中心像素点&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;centerPoint.x = positionOfDestPixel.x - mod(positionOfDestPixel.x, radius * &lt;span class=&quot;number&quot;&gt;2.0&lt;/span&gt;) + radius;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;centerPoint.y = positionOfDestPixel.y - mod(positionOfDestPixel.y, radius * &lt;span class=&quot;number&quot;&gt;2.0&lt;/span&gt;) + radius;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后这里的 &lt;strong&gt;mod (x, y)&lt;/strong&gt; 和平时使用的一样，计算 &lt;strong&gt;x / y 的余数&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;至于为什么这个式子能获得&lt;strong&gt;中心像素点坐标&lt;/strong&gt;，想必一看就懂了吧～（不懂的可以拿张纸画画）&lt;/p&gt;
&lt;p&gt;最后返回中心点坐标，替换当前点。&lt;/p&gt;
&lt;p&gt;如此，一个简单的马赛克就完成了～&lt;/p&gt;
&lt;h3 id=&quot;3-_CIKernel&quot;&gt;3. CIKernel&lt;/h3&gt;&lt;p&gt;我们之前说过，CIColorKernel 和 CIWarpKernel 内部做了优化，要尽可能的使用它们。除非真的有特殊需求，是它们无法实现的。下面罗列了 CIColorKernel 和 CIWarpKernel 的一些局限：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CIColorKernel ：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;只处理当前处理点色值，无法获取到其它点的状态。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;CIWarpKernel：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;只处理当前处理点位置，无法获取到其它点的状态。&lt;/li&gt;
&lt;li&gt;只能传入一张图片。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;比如说，美图秀秀里面的一些简单马赛克，效果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xkc7a.com1.z0.glb.clouddn.com/2016101864134mosaic_demo.gif&quot; alt=&quot;2016101864134mosaic_demo.gif&quot;&gt;&lt;/p&gt;
&lt;p&gt;它的实现方式，我们可以简单的这么理解：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;判断当前点是否在传入点的处理范围内。&lt;/li&gt;
&lt;li&gt;如果在，返回马赛克贴图中对应的像素点色值。&lt;/li&gt;
&lt;li&gt;如果不在，返回当前点色值。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;很明显，它需要两张图片，一张我们的待处理图片，一张马赛克贴图。所以 CIWarpKernel 不适用。&lt;/p&gt;
&lt;p&gt;另外，待处理图片与马赛克贴图之前不是一一对应关系，在第二步，返回马赛克贴图中对应的像素点色值中，需要一个映射计算，即当前点对应马赛克贴图中的某点。所以 CIColorKernel 也不适用。&lt;/p&gt;
&lt;p&gt;这种情况下，就要使用通用的 CIKernel 了。&lt;/p&gt;
&lt;p&gt;下面是对应的 kernel：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;kernel vec4 mosaicKernel(sampler image, sampler maskImage, &lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt; radius, vec2 point, &lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt; maskWidth, &lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt; maskHeight)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 获取当前点坐标&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    vec2 textureCoordinate = destCoord();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 计算当前点与传入点的距离&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt; distance = distance(textureCoordinate, point);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (distance &amp;lt; radius) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 在处理范围内, 计算对应马赛克贴图中的位置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt; resultX = mod(textureCoordinate.x, maskWidth);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt; resultY = mod(textureCoordinate.y, maskHeight);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; sample(maskImage, samplerTransform(maskImage, vec2(resultX, resultY)));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 返回原图对应像素点色值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; sample(image, samplerTransform(image, textureCoordinate));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里参数比较多，分别对应：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;image：待处理图片&lt;/li&gt;
&lt;li&gt;maskImage：马赛克贴图&lt;/li&gt;
&lt;li&gt;radius：处理范围，半径&lt;/li&gt;
&lt;li&gt;point：传入点，即当前触摸的点&lt;/li&gt;
&lt;li&gt;maskWidth：马赛克贴图宽度&lt;/li&gt;
&lt;li&gt;maskHeight：马赛克贴图高度&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上面的 kernel，使用了两个新的函数，sample 和 samplerTransform。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;vec4 sample (uniform sampler src, vec2 point)&lt;/code&gt;&lt;br&gt;Returns the pixel value produced from sampler src at the position point, where point is specified in sampler space.&lt;/p&gt;
&lt;p&gt;返回图片 src 指定点 point 处的色值。point 是基于 sampler space。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;vec2 samplerTransform (uniform sampler src, vec2 point)&lt;/code&gt;&lt;br&gt;Returns the position in the coordinate space of the source (the first argument) that is associated with the position defined in working-space coordinates (the second argument). (Keep in mind that the working space coordinates reflect any transformations that you applied to the working space.) For example, if you are modifying a pixel in the working space, and you need to retrieve the pixels that surround this pixel in the original image, you would make calls similar to the following, where d is the location of the pixel you are modifying in the working space, and image is the image source for the pixels.&lt;/p&gt;
&lt;p&gt;返回图片 src 指定点 point 处坐标对应的基于 sampler space 的坐标。point 是基于working space。&lt;/p&gt;
&lt;p&gt;sampler space 的取值是 0.0 - 1.0，左下角为原点，向右，向上递增。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;了解了这两个函数的用法，想必这段代码就没什么需要特别说明的地方了，注释已经很清楚，不再累述。&lt;/p&gt;
&lt;h2 id=&quot;注意点&quot;&gt;注意点&lt;/h2&gt;&lt;h3 id=&quot;1-_premultiply&quot;&gt;1. premultiply&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;vec4 premultiply (vec4 color)&lt;/code&gt;&lt;br&gt;Multiplies the red, green, and blue components of the color parameter by its alpha component.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;将颜色变量的r、g、b元素值分别于 alpha 相乘，返回一个新的四维颜色向量。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;vec4 unpremultiply (vec4 color)&lt;/code&gt;&lt;br&gt;If the alpha component of the color parameter is greater than 0, divides the red, green and blue components by alpha. If alpha is 0, this function returns color.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;将颜色变量的r、g、b元素值分别除以 alpha ，返回一个新的四维颜色向量。&lt;/p&gt;
&lt;p&gt;pixel（R, G, B, A） —— (premultiply) ——&amp;gt; (R＊A, G＊A, B＊A, A)&lt;/p&gt;
&lt;p&gt;—— (unpremultiply) ——&amp;gt; （R, G, B, A）。&lt;/p&gt;
&lt;p&gt;在 Core Image 中，默认颜色空间是 sRGB，在 kernel 中得到的色值，都经过了 Premultiplied Alpha 处理。&lt;/p&gt;
&lt;p&gt;至于为什么要执行 Premultiplied Alpha 操作，具体的可以参考这篇文章：&lt;a href=&quot;https://boundary.cc/2015/07/why-premultiplied-alpha/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;为什么要PREMULTIPLIED ALPHA呢？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;所以如果 kernel 涉及 alpha 相关操作，则需要先执行 unpremultiply，返回正确的 rgba。处理完之后，再执行 premultiply 操作。&lt;/p&gt;
&lt;p&gt;比如一个反相滤镜，&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xkc7a.com1.z0.glb.clouddn.com/2016101643860rever_1.gif&quot; alt=&quot;2016101643860rever_1.gif&quot;&gt;&lt;img src=&quot;http://7xkc7a.com1.z0.glb.clouddn.com/20161016903rever_2.gif&quot; alt=&quot;20161016903rever_2.gif&quot;&gt;&lt;/p&gt;
&lt;p&gt;它对应的 kernel 应该是这样的：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;kernel vec4 _invertColor(sampler source_image)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    vec4 pixValue;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// samplerCoord 返回当前像素点在 sampler space 中的位置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// kernel 无法知道该图片是否进行了某些变换操作，所以确保转换为 sampler space 中的位置 是有必要的&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pixValue = sample(source_image, samplerCoord(source_image));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 执行 unpremultiply 操作, 得到真正的 RGB 值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// (R＊A, G＊A, B＊A, A) ——(unpremultiply)——&amp;gt; (R, G, B, A)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Core Image is always RGB based.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    unpremultiply(pixValue); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// invertColor&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pixValue.r = &lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt; - pixValue.r; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pixValue.g = &lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt; - pixValue.g;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pixValue.b = &lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt; - pixValue.b;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// premultiply. (R, G, B, A) —&amp;gt; (R＊A, G＊A, B＊A, A)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; premultiply(pixValue); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 优化：&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 避免了 unpremultiply 和 premultiply 操作，能更高效执行。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// pixValue 是 (R＊A, G＊A, B＊A, A)， pixValue.a - pixValue.r = (1-r)*a. 和最终 premultiply 得到的结果一样.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;kernel vec4 _invertColor(sampler source_image)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    vec4 pixValue;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pixValue = sample(source_image, samplerCoord(source_image));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pixValue.rgb = pixValue.aaa - pixValue.rgb;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; pixValue;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;2-_关键字&quot;&gt;2. 关键字&lt;/h3&gt;&lt;p&gt;和 C 语言等一样，CIKL 中变量的命名不能和关键字相同。&lt;/p&gt;
&lt;p&gt;下面是官方 Session 中翻转对应的 kernel 脚本，这里用到了 input 关键字，导致整个 kernel 错误。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xkc7a.com1.z0.glb.clouddn.com/2016101638470session_error.png&quot; alt=&quot;2016101638470session_error.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;所以这点一定要牢记。&lt;/p&gt;
&lt;p&gt;下面是在 Github 上引起的灾难..&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xkc7a.com1.z0.glb.clouddn.com/2016101685335error_1.png&quot; alt=&quot;2016101685335error_1.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xkc7a.com1.z0.glb.clouddn.com/2016101697866error_2.png&quot; alt=&quot;2016101697866error_2.png&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;3-_GLSL&quot;&gt;3. GLSL&lt;/h3&gt;&lt;p&gt;CIKL 是 GLSL 的子集，所以&lt;strong&gt;不是 GLSL 中定义的任何东西在 CIKL 中都适用&lt;/strong&gt;。但是 glsl 中大多数关键字都是可以用的。另外，CIKL 还提供了 glsl 不支持的，额外的数据类型，关键字，方法，来完善 CIKernel。&lt;/p&gt;
&lt;h3 id=&quot;4-_Array,_Mat&quot;&gt;4. Array, Mat&lt;/h3&gt;&lt;p&gt; In addition, the following are not implemented:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Data types: &lt;code&gt;mat2&lt;/code&gt;, &lt;code&gt;mat3&lt;/code&gt;, &lt;code&gt;mat4&lt;/code&gt;, &lt;code&gt;struct&lt;/code&gt;, &lt;code&gt;arrays&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些数据类型 Core Image 不支持。但是在 kernel 内部却可以使用 … &lt;/p&gt;
&lt;p&gt;如果当做参数传入，则会报错：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;invalid kernel parameter type; valid types are:  ‘float’, ‘vec2’, ‘vec3’, ‘vec4’, ‘sampler’, ‘sample’, ‘color’&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://wanzao2.b0.upaiyun.com/system/pictures/229/original/%E6%82%B2%E4%BC%A41.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;这也导致了一些依赖关键点的算法无法实现。&lt;/p&gt;
&lt;h3 id=&quot;5-_坐标系&quot;&gt;5. 坐标系&lt;/h3&gt;&lt;p&gt;UIKit 坐标系，原点在屏幕左上，x轴向右，y轴向下。&lt;/p&gt;
&lt;p&gt;Core Image 和 OpenGL 坐标系原点在屏幕的左下，x轴向右，y轴向上。&lt;/p&gt;
&lt;p&gt;所以位置的处理上要注意。&lt;/p&gt;
&lt;h3 id=&quot;6-_局限&quot;&gt;6. 局限&lt;/h3&gt;&lt;p&gt;kernel 的输入和输出像素可以相互映射。大多数像素处理都可以用这种方式表达，但是有的图像处理操作很困难，甚至不可能。&lt;/p&gt;
&lt;p&gt;kernel 的使用上还是有一定的局限性。比如说通过输入图像映射计算直方图是很困难的。也不可以执行种子填充算法或者其他需要复杂条件语句的图像分析操作。&lt;/p&gt;
&lt;h3 id=&quot;7-_性能优化&quot;&gt;7. 性能优化&lt;/h3&gt;&lt;p&gt;kernel 中的内容要尽可能简单，高效。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;展开循环操作会更快。&lt;/li&gt;
&lt;li&gt;外部能传入的变量，尽量不要在 kernel 中计算获取。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;开发技巧&quot;&gt;开发技巧&lt;/h2&gt;&lt;h3 id=&quot;1-_Log&quot;&gt;1. Log&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;+(id)kernelsWithString:(id)arg1 messageLog:(id)arg2 ;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这是  &lt;a href=&quot;https://github.com/CPDigitalDarkroom/iOS9-SpringBoard-Headers/blob/a11be523d5644a178614585ff57f9638300c2cc0/System/Library/Frameworks/CoreImage.framework/CIKernel.h&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CIKernel.h&lt;/a&gt; 里面的私有方法，在调试阶段可以利用它来打印 kernel 中的错误。&lt;/p&gt;
&lt;p&gt;比如：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSMutableArray&lt;/span&gt; *messageLog = [&lt;span class=&quot;built_in&quot;&gt;NSMutableArray&lt;/span&gt; array];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSArray&lt;/span&gt; *kernels = [[&lt;span class=&quot;built_in&quot;&gt;CIKernel&lt;/span&gt; class] 		 performSelector:&lt;span class=&quot;keyword&quot;&gt;@selector&lt;/span&gt;(kernelsWithString:messageLog:) withObject:kernelCode withObject:messageLog];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ( messageLog.count &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  	&lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;Error: %@&quot;&lt;/span&gt;, messageLog.description);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;customKernel = [kernels objectAtIndex:&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 错误 log&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Error: (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;CIKernelMessageLineNumber&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;CIKernelMessageType&lt;/span&gt; = &lt;span class=&quot;built_in&quot;&gt;CIKernelMessageTypeError&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        k&lt;span class=&quot;built_in&quot;&gt;CIKernelMessageDescription&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;unkown type or function name &#39;destCoordE&#39;; did you mean &#39;destCoord&#39;?&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        k&lt;span class=&quot;built_in&quot;&gt;CIKernelMessageOffset&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;142&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;CIKernelMessageLineNumber&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;CIKernelMessageType&lt;/span&gt; = &lt;span class=&quot;built_in&quot;&gt;CIKernelMessageTypeError&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        k&lt;span class=&quot;built_in&quot;&gt;CIKernelMessageDescription&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;invalid operands to binary expression (&#39;float&#39; and &#39;int&#39;)&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        k&lt;span class=&quot;built_in&quot;&gt;CIKernelMessageOffset&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;281&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;2-_CI_PRINT_TREE&quot;&gt;2. CI_PRINT_TREE&lt;/h3&gt;&lt;p&gt;这里 Core Image 中非常实用的一个环境变量，通过设置它，可以很方便的查看 Core Image 工作过程中到底做了什么。比如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;工作在 GPU 还是 CPU 上？&lt;/li&gt;
&lt;li&gt;各个 kernel 的参数值？&lt;/li&gt;
&lt;li&gt;Core Image 是如何链接 kernel？&lt;/li&gt;
&lt;li&gt;DOD，ROI 如何设置的？&lt;/li&gt;
&lt;li&gt;对于大图如何拆分处理？&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;PS ： 至于 CI_PRINT_TREE 具体应该如何使用，没有找到相关资料，只是在 Session 中提到过。&lt;/p&gt;
&lt;p&gt;包括 ObjC 中国 上的翻译：你可以通过在 Xcode 中设置计划配置（scheme configuration）里的 CI_PRINT_TREE 环境变量为 1 来决定用 CPU 还是 GPU 来渲染，也是很不准确的。&lt;/p&gt;
&lt;p&gt;这里的结论都是自己摸索后的总结，所以可能存在错误或者遗漏，欢迎补充交流～&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;CI_PRINT_TREE 的设置大致是这样的：分成 A B 两部分，它们可以结合使用。&lt;/p&gt;
&lt;p&gt;其中 A 是主要分类，B 是辅助功能。&lt;/p&gt;
&lt;p&gt;A 包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1  initial graph &lt;/li&gt;
&lt;li&gt;2  optimized graph &lt;/li&gt;
&lt;li&gt;4  tile graph &lt;/li&gt;
&lt;li&gt;8  programs graph &lt;/li&gt;
&lt;li&gt;16  timing graph &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;B 包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;graphviz &lt;/li&gt;
&lt;li&gt;dump-inputs &lt;/li&gt;
&lt;li&gt;dump-intermediates &lt;/li&gt;
&lt;li&gt;skip-cpu &lt;/li&gt;
&lt;li&gt;skip-gpu  &lt;/li&gt;
&lt;li&gt;skip-small &lt;/li&gt;
&lt;li&gt;frame-&lt;number&gt; &lt;/number&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用上，比如简单的查看 initial graph 做了什么，即我们添加这个 Filter 的时候，初始化过程执行了什么，传入了哪些参数。当然，这个过程它并没有真正得到渲染，只是一个操作流程列表。设置 CI_PRINT_TREE ＝ 1，如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xkc7a.com1.z0.glb.clouddn.com/2016101786999ci_print_tree.png&quot; alt=&quot;2016101786999ci_print_tree.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;它的结果如下：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;initial graph render_to_display (opengles2 context &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; frame &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) format=RGBA8 roi=[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;156&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;750&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;748&lt;/span&gt;] = &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  clamptoalpha roi=[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;156&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;750&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;748&lt;/span&gt;] extent=[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;156&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;750&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;748&lt;/span&gt;] opaque&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    colormatch workingspace-to-devicergb roi=[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;156&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;750&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;748&lt;/span&gt;] extent=[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;156&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;750&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;748&lt;/span&gt;] opaque&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      affine [&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;156&lt;/span&gt;] roi=[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;156&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;750&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;748&lt;/span&gt;] extent=[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;156&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;750&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;748&lt;/span&gt;] opaque&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        colorkernel &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  roi=[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;375&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;374&lt;/span&gt;] extent=[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;375&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;374&lt;/span&gt;] opaque&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          affine [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;374&lt;/span&gt;] roi=[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;375&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;374&lt;/span&gt;] extent=[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;375&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;374&lt;/span&gt;] opaque&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            colormatch &lt;span class=&quot;string&quot;&gt;&quot;sRGB IEC61966-2.1&quot;&lt;/span&gt;-to-workingspace roi=[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;375&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;374&lt;/span&gt;] extent=[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;375&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;374&lt;/span&gt;] opaque&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;built_in&quot;&gt;CGImageRef&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0x1701c4380&lt;/span&gt; RGBX8 &lt;span class=&quot;number&quot;&gt;375&lt;/span&gt;x374  alpha_one roi=[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;375&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;374&lt;/span&gt;] extent=[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;375&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;374&lt;/span&gt;] opaque&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里有很多关键信息，十分详细。它的阅读顺序是从下往上，我们简单分析下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;CGImageRef&lt;/strong&gt;： 指代我们传入的图片。&lt;/li&gt;
&lt;li&gt;每个阶段的 &lt;strong&gt;ROI，DOD&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;colormatch “sRGB IEC61966-2.1”-to-workingspace&lt;/strong&gt; ：传入的颜色空间&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;vignetteKernel(image,center=[187.5 187],radius=187.5,alpha=0.0537634)&lt;/strong&gt; ：kernel 的每个参数&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;colormatch workingspace-to-devicergb&lt;/strong&gt;：  输出的颜色空间&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;opengles2&lt;/strong&gt; ：工作在 GPU 上&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;context 1 frame 1&lt;/strong&gt; ：分别指代当前 context 以及第几帧。每次渲染 frame + 1&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当然，这只是 CI_PRINT_TREE 的一部分功能，如果你设置 CI_PRINT_TREE = 8 (programs graph )，你又会得到这样的信息：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;programs graph render_to_display (opengles2 context &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; frame &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; tile &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) format=RGBA8 roi=[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;111&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;640&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;640&lt;/span&gt;] = &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  program affine(clamp_to_alpha(linear_to_srgb(vignetteKernel(affine(srgb_to_linear(swizzle_bgr1())))))) rois=[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;111&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;640&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;640&lt;/span&gt;] extent=[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;111&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;640&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;640&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    IOSurface &lt;span class=&quot;number&quot;&gt;0x60000019ddc0&lt;/span&gt; RGBA8 &lt;span class=&quot;number&quot;&gt;375&lt;/span&gt;x374 alpha_one edge_clamp rois=[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;375&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;374&lt;/span&gt;] extent=[infinite][&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;375&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;374&lt;/span&gt;] opaque&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里描述了程序图表，即真正涉及到的操作。&lt;/p&gt;
&lt;p&gt;如果觉得这样看比较杂乱，可以试试添加 B 类辅助功能。 比如：&lt;strong&gt;CI_PRINT_TREE = 8 graphviz&lt;/strong&gt; ，这样就可以导出 DOT 语言脚本。然后使用 &lt;a href=&quot;http://www.graphviz.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Graphviz&lt;/a&gt; 工具，即可绘制这个 DOT 语言脚本描述的图形。&lt;/p&gt;
&lt;p&gt;比如上面 Log 对应绘制得到的图形如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xkc7a.com1.z0.glb.clouddn.com/201610186930programs_graph.png&quot; alt=&quot;201610186930programs_graph.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;同样是从下往上看，各个操作的层级关系就很明显了。除了我们提供的 vignetteKernel，Core Image 内部还做了其他的操作，比如 &lt;strong&gt;linear_to_srgb，clamp_to_alpha&lt;/strong&gt; 等。它们的具体实现如下：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Filter DAG:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Node: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  original source: vec4 _ci_clamp_to_alpha(vec4 s) &amp;#123; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; clamp(s, &lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt;, s.a); &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  printed AST: vec4 _ci_clamp_to_alpha(vec4 s) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; clamp(s, &lt;span class=&quot;number&quot;&gt;0.000000e+00&lt;/span&gt;, s.a);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  children: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;End Filter Node&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Node: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  original source: vec4 _ci_premultiply(vec4 s) &amp;#123; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; vec4(s.rgb*s.a, s.a); &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  printed AST: vec4 _ci_premultiply(vec4 s) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; vec4(s.rgb * s.a, s.a);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  children: &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;End Filter Node&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Node: &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  original source: vec4 _ci_linear_to_srgb(vec4 s)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  s.rgb = sign(s.rgb)*mix(s.rgb*&lt;span class=&quot;number&quot;&gt;12.92&lt;/span&gt;, pow(abs(s.rgb), vec3(&lt;span class=&quot;number&quot;&gt;0.4166667&lt;/span&gt;)) * &lt;span class=&quot;number&quot;&gt;1.055&lt;/span&gt; - &lt;span class=&quot;number&quot;&gt;0.055&lt;/span&gt;, step(&lt;span class=&quot;number&quot;&gt;0.0031308&lt;/span&gt;, abs(s.rgb)));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; s;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  printed AST: vec4 _ci_linear_to_srgb(vec4 s) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  s.rgb = sign(s.rgb) * mix(s.rgb * &lt;span class=&quot;number&quot;&gt;1.292000e+01&lt;/span&gt;, (pow(abs(s.rgb), vec3(&lt;span class=&quot;number&quot;&gt;4.166667e-01&lt;/span&gt;)) * &lt;span class=&quot;number&quot;&gt;1.055000e+00&lt;/span&gt;) - &lt;span class=&quot;number&quot;&gt;5.500000e-02&lt;/span&gt;, step(&lt;span class=&quot;number&quot;&gt;3.130800e-03&lt;/span&gt;, abs(s.rgb)));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; s;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  children: &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;End Filter Node&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Node: &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  original source: vec4 _ci_unpremultiply(vec4 s) &amp;#123; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; vec4(s.rgb/max(s.a,&lt;span class=&quot;number&quot;&gt;0.00001&lt;/span&gt;), s.a); &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  printed AST: vec4 _ci_unpremultiply(vec4 s) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; vec4(s.rgb / max(s.a, &lt;span class=&quot;number&quot;&gt;1.000000e-05&lt;/span&gt;), s.a);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  children: &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;End Filter Node&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Node: &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;sample with transform&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  original source: vec4 read_pixel(sampler2D image, vec2 c, mat3 m)&amp;#123; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; texture2D(image, (vec3(c, &lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt;) * m).xy);&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  printed AST: vec4 read_pixel_6(sampler2D image, vec2 c, mat3 m) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; texture2D(image, (vec3(c, &lt;span class=&quot;number&quot;&gt;1.000000e+00&lt;/span&gt;) * m).xy);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  children: &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;End Filter Node&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Node: &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  image: &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  printed: uniform lowp sampler2D image6_0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;End Filter Node&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Node: &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  position use &amp;lt;_dc&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;End Filter Node&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Node: &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;transform&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  uniform: &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;End Filter Node&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这个 DAG（有向无环图），具体描述了相关操作的实现过程，比较简单，可以自己看看，这里不累述。&lt;/p&gt;
&lt;h2 id=&quot;工具介绍&quot;&gt;工具介绍&lt;/h2&gt;&lt;p&gt;Quartz Composer 是一款图形化的编程工具，专门用来生成各种动态视觉效果，包括可交互的界面原型。当然，它也支持 Core Image 滤镜图表的原型。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xkc7a.com1.z0.glb.clouddn.com/2016092073920quartz_1.png&quot; alt=&quot;2016092073920quartz_1.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;另外，在 QC 上编写 Kernel，除了代码高亮，实时调整效果也很棒。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xkc7a.com1.z0.glb.clouddn.com/2016101158579quartz_2.png&quot; alt=&quot;2016101158579quartz_2.png&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;PS ：&lt;a href=&quot;https://developer.apple.com/downloads/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Quartz Composer 下载地址&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;有精力的话建议把 QC 内自带的所有 example 找出来仔细研究，苹果自己的例子是最好的。它们藏在 /Applications/Quartz Composer.app/Contents/Resources/Examples/Patches（找到 Quartz Composer.app 点右键，选择「Show Package Content」）&lt;/p&gt;
&lt;p&gt; 简单了解 Quartz Composer。QCDesigners 上有比较简要的介绍：&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//qcdesigners.com/index.php/forums/topic/2/new-to-quartz-composer-start-he&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;QC Designers&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://7xkc7a.com1.z0.glb.clouddn.com/2016092059430download_Graphic_Tools_for_XCode.png&quot; alt=&quot;2016092059430download_Graphic_Tools_for_XCode.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;QC 已经内置了适合 Core Image 的模板，并且实现了动态模糊滤镜效果。不过这里为了了解 QC 的使用方式，不使用内置的模板，从头开始。&lt;strong&gt;File —&amp;gt; New Blank&lt;/strong&gt;，创建一个空白的 QC 工程。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;PS： QC 的功能很强大，这里只介绍 Core Image Filter 编辑过程中会用到的，以及我所掌握的…&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;0-_概念介绍&quot;&gt;0. 概念介绍&lt;/h3&gt;&lt;p&gt;在讲解使用方式之前，介绍几个基本概念。&lt;/p&gt;
&lt;p&gt;一次滤镜操作，可以简单理解成： &lt;strong&gt;输入—&amp;gt;(Patch)—&amp;gt;输出&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;Patch 可以理解成 Kernel。&lt;/p&gt;
&lt;p&gt;输入则与 Kernel 的参数相对应，可以是 image，color，float…&lt;/p&gt;
&lt;p&gt;输入这里一般就是处理后的图像。&lt;/p&gt;
&lt;p&gt;还有一个比较特殊的 Patch，Layer。相当于画布，可以把结果图显示在上面，它也有层的概念。&lt;/p&gt;
&lt;h3 id=&quot;1-_工作区介绍&quot;&gt;1.  工作区介绍&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;编辑区：&lt;/strong&gt; 这是主面板，主要衔接各个 Patch，以及它们的输入，输出。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xkc7a.com1.z0.glb.clouddn.com/2016101175676panel_1.png&quot; alt=&quot;2016101175676panel_1.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Library：&lt;/strong&gt; 这里陈列了 QC 内置的所有 Patch（也可以添加自定义的 Patch 进来），以及它们的详细使用介绍。(通过点击主面板左上角的 Patch Library 打开)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xkc7a.com1.z0.glb.clouddn.com/2016101159731panel_2.png&quot; alt=&quot;2016101159731panel_2.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参数区：&lt;/strong&gt; 这里设置各个 Patch 需要的输入参数。(通过点击主面板工具栏上的 Parameters 打开)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xkc7a.com1.z0.glb.clouddn.com/2016101163517panel_3.png&quot; alt=&quot;2016101163517panel_3.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Viewer：&lt;/strong&gt; 显示窗口，这里可以对 Layer 做处理，也可以响应用户操作。比如鼠标点击，移动，滑动等。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xkc7a.com1.z0.glb.clouddn.com/2016101121147panel_4.png&quot; alt=&quot;2016101121147panel_4.png&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;2-_Filter_编辑_&amp;amp;_放大眼睛实战&quot;&gt;2. Filter 编辑 &amp;amp; 放大眼睛实战&lt;/h3&gt;&lt;p&gt;首先，点击 Patch Library，添加一个 Core Image Filter。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xkc7a.com1.z0.glb.clouddn.com/2016101898471qc_demo_1.png&quot; alt=&quot;2016101898471qc_demo_1.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;选中这个 Filter，点击 Patch Inspector，选择 Settings，进入编辑页面。&lt;/p&gt;
&lt;p&gt;改成如下放大眼睛核心代码：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;kernel vec4 coreImageKernel(sampler image, vec2 centerPostion, &lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt; radius, &lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt; scaleRatio, &lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt; aspectRatio)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	vec2 currentPosition = destCoord();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	vec2 positionToUse = currentPosition;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     vec2 currentPositionToUse = vec2(currentPosition.x, currentPosition.y * aspectRatio + &lt;span class=&quot;number&quot;&gt;0.5&lt;/span&gt; - &lt;span class=&quot;number&quot;&gt;0.5&lt;/span&gt; * aspectRatio);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     vec2 centerPostionToUse = vec2(centerPostion.x, centerPostion.y * aspectRatio + &lt;span class=&quot;number&quot;&gt;0.5&lt;/span&gt; - &lt;span class=&quot;number&quot;&gt;0.5&lt;/span&gt; * aspectRatio);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt; r = distance(currentPositionToUse, centerPostionToUse);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(r &amp;lt; radius)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt; alpha = &lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt; - scaleRatio * (r / radius - &lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt;)*( r / radius - &lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         positionToUse = centerPostion + alpha * (currentPosition - centerPostion);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; sample(image, samplerTransform(image, positionToUse));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; sample(image, samplerTransform(image, positionToUse));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;http://7xkc7a.com1.z0.glb.clouddn.com/201610185070qc_demo_2.png&quot; alt=&quot;201610185070qc_demo_2.png&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;PS：这里不再讲解这个眼睛放大 kernel 的实现原理。&lt;/p&gt;
&lt;p&gt;我强烈建议你在了解了前面的内容后，自己试着解读这个 kernel。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;另外，这里还有几个需要说明的地方。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Define Outp Image Domain of Definition as Union of Input Sampler DODs：输入输出图片的 DOD 一致。&lt;/li&gt;
&lt;li&gt;Show Advanced Input Sampler Options：显示更多选项。&lt;/li&gt;
&lt;li&gt;Edit Filter Function：编辑 Filter 函数。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一般选中第一项就好。 如果有特殊需求，需要自定义 DOD，ROI，则选择 &lt;strong&gt;Edit Filter Function&lt;/strong&gt;，进入编辑模式。&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;function __image main(__image image, __vec2 centerPostion, __number radius, __number scaleRatio, __number aspectRatio) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; coreImageKernel.apply(image.definition, null, image, centerPostion, radius, scaleRatio, aspectRatio);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这样就可以对默认的 function 进行编辑。在这个 Demo 里面我们不需要，感兴趣可以自己实践下，很简单。&lt;/p&gt;
&lt;p&gt;这个时候，主面板应该长这样：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xkc7a.com1.z0.glb.clouddn.com/201610184625qc_demo_3.png&quot; alt=&quot;201610184625qc_demo_3.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;然后拖拽一张图片到主面板中，把图片的 Output Image 与 Filter 的 Input Image 想连接。&lt;/p&gt;
&lt;p&gt;再从 Patch Library 中选择 Billboard。把 Filter 的 Output Image 与 Billboard 的 Input Image 相连接。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xkc7a.com1.z0.glb.clouddn.com/2016101846779qc_demo_4.png&quot; alt=&quot;2016101846779qc_demo_4.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;然后选中 Filter，打开 Parameters 面板，输入参数值，即可。&lt;/p&gt;
&lt;p&gt;当然，放大眼睛这里需要定位到眼睛的位置，是否可以通过鼠标操作来获取点呢？再或者，眼睛放大效果不够直观，有没有办法鼠标按下显示效果图，松开显示原图呢？在 QC 里头，这些都不是问题~不过工具类的使用，更多的还是得靠自己去摸索，这里不再累述。可以参考 EnlargeEyes.qtz 文件，了解更多的操作。&lt;/p&gt;
&lt;p&gt;最终的效果应该是这样的：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xkc7a.com1.z0.glb.clouddn.com/201610184575enlargeEyes_demo.gif&quot; alt=&quot;201610184575enlargeEyes_demo.gif&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;&lt;p&gt;至此，关于 Core Image 自定义 Filter 相关的内容，就已经都讲完了。这篇近万字的文章，花了很多功夫总结出来，希望，对你有所帮助！&lt;/p&gt;
&lt;p&gt;那么，打开脑洞，创造更有趣的 Filter 吧~&lt;/p&gt;
&lt;p&gt;Have fun~   &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PS：源码下载地址：&lt;/strong&gt; &lt;a href=&quot;https://github.com/colin1994/CoreImageDemo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CoreImageDemo&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;延伸阅读&quot;&gt;延伸阅读&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/library/content/documentation/GraphicsImaging/Reference/CIKernelLangRef/Introduction/Introduction.html#//apple_ref/doc/uid/TP40004397-CH1-SW1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Core Image Kernel Language Reference&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Core Image Kernel Language 官方概述。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/library/content/documentation/GraphicsImaging/Conceptual/ImageUnitTutorial/WritingKernels/WritingKernels.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Writing Kernels&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;官方教程。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://developer.apple.com/library/mac/documentation/GraphicsImaging/Conceptual/ImageUnitTutorial/Overview/Overview.html#//apple_ref/doc/uid/TP40004531-CH6-SW4&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Kernel Routine Rules&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;官方准则。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/library/content/documentation/GraphicsImaging/Conceptual/ImageUnitTutorial/Overview/Overview.html#//apple_ref/doc/uid/TP40004531-CH6-SW2&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Region-of-Interest Methods&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;ROI 教程。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/library/content/documentation/GraphicsImaging/Conceptual/QuartzComposerUserGuide/qc_intro/qc_intro.html#//apple_ref/doc/uid/TP40005381-CH201-TPXREF101&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Quartz Composer User Guide&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;QC 官方指南。&lt;/p&gt;
</content:encoded>
      
      <comments>http://http://colin1994.github.io/2016/10/21/Core-Image-Custom-Filter/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Core Image 你需要了解的那些事~</title>
      <link>http://http://colin1994.github.io/2016/10/21/Core-Image-OverView/</link>
      <guid>http://http://colin1994.github.io/2016/10/21/Core-Image-OverView/</guid>
      <pubDate>Fri, 21 Oct 2016 14:31:29 GMT</pubDate>
      <description>
      
        &lt;p&gt;Core Image 系列，目前的文章如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://colin1994.github.io/2016/10/21/Core-Image-OverView/&quot;&gt;Core Image 你需要了解的那些事~&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://colin1994.github.io/2016/10/21/Core-Image-Custom-Filter/&quot;&gt;Core Image 之自定义 Filter~&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://xiaozhuanlan.com/topic/3095648721&quot;&gt;Core Image【3】—— 2017 新特性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://xiaozhuanlan.com/topic/5094762183&quot;&gt;Core Image【4】—— 2018 新特性&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;&lt;p&gt;最近在研究 Core Image 自定义 Filter 相关内容，重新学习了 Core Image，对 Core Image 的一些优化点也有了一定的了解。故此记录，与君交流~&lt;/p&gt;
&lt;p&gt;本文将会介绍逐一介绍 Core Image 相关基础概念、使用方式、注意点以及和其他图像处理方案的对比。也算是下一篇文章： &lt;a href=&quot;http://colin1994.github.io/2016/10/21/Core-Image-Custom-Filter/&quot;&gt;Core Image 自定义 Filter~&lt;/a&gt; 的预备知识，毕竟只有了解了 Core Image 的作用以及它的优势，才有学习自定义 Filter 的动力。&lt;/p&gt;
&lt;p&gt;现在，开始吧～&lt;img src=&quot;http://wanzao2.b0.upaiyun.com/system/pictures/24/original/6.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded>&lt;p&gt;Core Image 系列，目前的文章如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://colin1994.github.io/2016/10/21/Core-Image-OverView/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Core Image 你需要了解的那些事~&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://colin1994.github.io/2016/10/21/Core-Image-Custom-Filter/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Core Image 之自定义 Filter~&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://xiaozhuanlan.com/topic/3095648721&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Core Image【3】—— 2017 新特性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://xiaozhuanlan.com/topic/5094762183&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Core Image【4】—— 2018 新特性&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;&lt;p&gt;最近在研究 Core Image 自定义 Filter 相关内容，重新学习了 Core Image，对 Core Image 的一些优化点也有了一定的了解。故此记录，与君交流~&lt;/p&gt;
&lt;p&gt;本文将会介绍逐一介绍 Core Image 相关基础概念、使用方式、注意点以及和其他图像处理方案的对比。也算是下一篇文章： &lt;a href=&quot;http://colin1994.github.io/2016/10/21/Core-Image-Custom-Filter/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Core Image 自定义 Filter~&lt;/a&gt; 的预备知识，毕竟只有了解了 Core Image 的作用以及它的优势，才有学习自定义 Filter 的动力。&lt;/p&gt;
&lt;p&gt;现在，开始吧～&lt;img src=&quot;http://wanzao2.b0.upaiyun.com/system/pictures/24/original/6.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;Core_Image_概述&quot;&gt;Core Image 概述&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://7xkc7a.com1.z0.glb.clouddn.com/2016100195437core_image.png&quot; alt=&quot;2016100195437core_image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;Core Image 是 iOS5 新加入到 iOS 平台的一个图像处理框架，提供了强大高效的图像处理功能， 用来对基于像素的图像进行操作与分析， 内置了很多强大的滤镜(Filter) (目前数量超过了180种)， 这些Filter 提供了各种各样的效果， 并且还可以通过 &lt;code&gt;滤镜链&lt;/code&gt; 将各种效果的 &lt;code&gt;Filter叠加&lt;/code&gt; 起来形成强大的自定义效果。&lt;/p&gt;
&lt;p&gt;一个 &lt;strong&gt;滤镜&lt;/strong&gt; 是一个对象，有很多输入和输出，并执行一些变换。例如，模糊滤镜可能需要输入图像和一个模糊半径来产生适当的模糊后的输出图像。&lt;/p&gt;
&lt;p&gt;一个 &lt;strong&gt;滤镜链&lt;/strong&gt; 是一个链接在一起的滤镜网络，使得一个滤镜的输出可以是另一个滤镜的输入。以这种方式，可以实现精心制作的效果。&lt;/p&gt;
&lt;p&gt; iOS8 之后更是支持自定义 CIFilter，可以定制满足业务需求的复杂效果。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Core Image is an image processing and analysis technology designed to provide near real-time processing for still and video images. It operates on image data types from the Core Graphics, Core Video, and Image I/O frameworks, using either a GPU or CPU rendering path. Core Image hides the details of low-level graphics processing by providing an easy-to-use application programming interface (API). You don’t need to know the details of OpenGL or OpenGL ES to leverage the power of the GPU, nor do you need to know anything about Grand Central Dispatch (GCD) to get the benefit of multicore processing. Core Image handles the details for you.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这是苹果官方文档对于 Core Image 的介绍，大致意思是：Core Image 是一种为静态图像和 Video 提供处理和分析的技术，它可以使用 GPU/CPU 的方式对图像进行处理。Core Image 提供了简洁的 API 给用户，隐藏了图像处理中复杂的底层内容。你可以在不了解 OpenGL、OpenGL ES 甚至是 GCD 的基础上对其进行使用，他已经帮你对这些复杂的内容进行处理了。&lt;/p&gt;
&lt;p&gt;废话这么多，苹果就想告诉我们一件事：&lt;strong&gt;所有的底层细节他都帮你做好了，你只需要放心调用API就行了。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这就是 Core Image 的基础概念，比较简短，正如它的使用方式一样简洁。&lt;/p&gt;
&lt;p&gt;然而在我个人学习过程中，我有一种强烈的感觉：&lt;strong&gt;Apple 很重视 Core Image，Core Image 一定会越来越棒。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://wanzao2.b0.upaiyun.com/system/pictures/149/original/%E5%91%86%E8%90%8C_%E5%89%AF%E6%9C%AC.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每年的 WWDC Session 中，都有提及 Core Image 的相关优化。&lt;/li&gt;
&lt;li&gt;从最初的几十种内置滤镜到如今的180多种。&lt;/li&gt;
&lt;li&gt;从最初只支持 macOS，到如今也支持 iOS。&lt;/li&gt;
&lt;li&gt;iOS8 之后支持自定义 Filter。&lt;/li&gt;
&lt;li&gt;iOS8 增强 GPU 渲染，在后台也能继续使用 GPU 进行处理。&lt;/li&gt;
&lt;li&gt;引入 CIDetector，提供一些常用的图片识别功能。包括人脸识别、条形码识别、文本识别等。&lt;/li&gt;
&lt;li&gt;与越来越多的框架相结合：OpenGLES，PhotoExtension，SceneKit，SpriteKit，Metal。&lt;/li&gt;
&lt;li&gt;iOS 10之后，支持对原生 RAW 格式图片的处理。&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So，它真的值得学习！&lt;/p&gt;
&lt;h2 id=&quot;使用方式&quot;&gt;使用方式&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://7xkc7a.com1.z0.glb.clouddn.com/2016100259378process.png&quot; alt=&quot;2016100259378process.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;这里我们从它的基础 API 介绍起。&lt;/p&gt;
&lt;p&gt;Core Image 的 API 主要就是三类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CIImage 保存图像数据的类，可以通过UIImage，图像文件或者像素数据来创建，包括未处理的像素数据。&lt;/li&gt;
&lt;li&gt;CIFilter 表示应用的滤镜，这个框架中对图片属性进行细节处理的类。它对所有的像素进行操作，用一些键-值设置来决定具体操作的程度。&lt;/li&gt;
&lt;li&gt;CIContext 表示上下文，如 Core Graphics 以及 Core Data 中的上下文用于处理绘制渲染以及处理托管对象一样，Core Image 的上下文也是实现对图像处理的具体对象。可以从其中取得图片的信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;至于使用，相当的方便。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://wanzao2.b0.upaiyun.com/system/pictures/22/original/16.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;下面以 “动态模糊” 举例，我们使用系统提供的 &lt;strong&gt;CIMotionBlur&lt;/strong&gt; 来实现。&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 传入滤镜名称(e.g. @&quot;CIMotionBlur&quot;), 输出处理后的图片&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;UIImage&lt;/span&gt; *)outputImageWithFilterName:(&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *)filterName &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 1. 将UIImage转换成CIImage&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;CIImage&lt;/span&gt; *ciImage = [[&lt;span class=&quot;built_in&quot;&gt;CIImage&lt;/span&gt; alloc] initWithImage:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.imageView.image];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 2. 创建滤镜&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.filter = [&lt;span class=&quot;built_in&quot;&gt;CIFilter&lt;/span&gt; filterWithName:filterName keysAndValues:k&lt;span class=&quot;built_in&quot;&gt;CIInputImageKey&lt;/span&gt;, ciImage, &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 设置相关参数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.filter setValue:@(&lt;span class=&quot;number&quot;&gt;10.&lt;/span&gt;f) forKey:&lt;span class=&quot;string&quot;&gt;@&quot;inputRadius&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 3. 渲染并输出CIImage&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;CIImage&lt;/span&gt; *outputImage = [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.filter outputImage];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 4. 获取绘制上下文&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.context = [&lt;span class=&quot;built_in&quot;&gt;CIContext&lt;/span&gt; contextWithOptions:&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 5. 创建输出CGImage&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;CGImageRef&lt;/span&gt; cgImage = [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.context create&lt;span class=&quot;built_in&quot;&gt;CGImage&lt;/span&gt;:outputImage fromRect:[outputImage extent]];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;UIImage&lt;/span&gt; *image = [&lt;span class=&quot;built_in&quot;&gt;UIImage&lt;/span&gt; imageWith&lt;span class=&quot;built_in&quot;&gt;CGImage&lt;/span&gt;:cgImage];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 6. 释放CGImage&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;CGImageRelease&lt;/span&gt;(cgImage);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; image;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;效果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xkc7a.com1.z0.glb.clouddn.com/2016100243119blurCompre.png&quot; alt=&quot;2016100243119blurCompre.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;至于滤镜链，则是和普通滤镜的使用没什么差别。只要把前一个滤镜的输出，当作后一个滤镜的输入，即可实现，就不累述了。&lt;/p&gt;
&lt;p&gt;另外，如果想查阅 Filter 的属性，可以通过 &lt;strong&gt;attributes&lt;/strong&gt; 属性来获取。比如这个例子中的 &lt;strong&gt;CIMotionBlur&lt;/strong&gt;：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;CIAttributeFilterAvailable_Mac&quot;&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;10.4&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;CIAttributeFilterAvailable_iOS&quot;&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;8.3&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;CIAttributeFilterCategories&lt;/span&gt; =     (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;CICategoryBlur&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;CICategoryStillImage&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;CICategoryVideo&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;CICategoryBuiltIn&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;CIAttributeFilterDisplayName&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;Motion Blur&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;CIAttributeFilterName&lt;/span&gt; = &lt;span class=&quot;built_in&quot;&gt;CIMotionBlur&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;CIAttributeReferenceDocumentation&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;http://developer.apple.com/library/ios/documentation/GraphicsImaging/Reference/CoreImageFilterReference/index.html#//apple_ref/doc/filter/ci/CIMotionBlur&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    inputAngle =     &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;CIAttributeClass&lt;/span&gt; = &lt;span class=&quot;built_in&quot;&gt;NSNumber&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;CIAttributeDefault&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;CIAttributeDescription&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;The angle of the motion determines which direction the blur smears.&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;CIAttributeDisplayName&lt;/span&gt; = Angle;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;CIAttributeIdentity&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;CIAttributeSliderMax&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;3.141592653589793&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;CIAttributeSliderMin&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;-3.141592653589793&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;CIAttributeType&lt;/span&gt; = &lt;span class=&quot;built_in&quot;&gt;CIAttributeTypeAngle&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    inputImage =     &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;CIAttributeClass&lt;/span&gt; = &lt;span class=&quot;built_in&quot;&gt;CIImage&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;CIAttributeDescription&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;The image to use as an input image. For filters that also use a background image, this is the foreground image.&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;CIAttributeDisplayName&lt;/span&gt; = Image;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;CIAttributeType&lt;/span&gt; = &lt;span class=&quot;built_in&quot;&gt;CIAttributeTypeImage&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    inputRadius =     &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;CIAttributeClass&lt;/span&gt; = &lt;span class=&quot;built_in&quot;&gt;NSNumber&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;CIAttributeDefault&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;CIAttributeDescription&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;The radius determines how many pixels are used to create the blur. The larger the radius, the blurrier the result.&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;CIAttributeDisplayName&lt;/span&gt; = Radius;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;CIAttributeIdentity&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;CIAttributeMin&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;CIAttributeSliderMax&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;CIAttributeSliderMin&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;CIAttributeType&lt;/span&gt; = &lt;span class=&quot;built_in&quot;&gt;CIAttributeTypeDistance&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;以上的介绍，可能偏显苍白，但是我想说的是，使用内置的滤镜，就是这么简单。如果你还想了解更多，可以继续阅读以下这几篇文章，它们对 Core Image 的基础概念介绍的更加详细。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://objccn.io/issue-21-6/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Core Image 介绍&lt;/a&gt; ： ObjC 的文章，值得看看。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/zhangao0086/article/details/39012231&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iOS8 Core Image In Swift&lt;/a&gt; ：这个系列是对官方文档的一个完整实战，讲的比较全面。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.apple.com/library/content/documentation/GraphicsImaging/Reference/CoreImageFilterReference/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Core Image Filter Reference&lt;/a&gt;：内置的所有滤镜及其用法示例。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/FlexMonkey/Filterpedia&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Filterpedia&lt;/a&gt; ：演示了内置滤镜及一些自定义滤镜的效果，基于 Swift 实现的。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面，才是本文着重想要介绍的，算是 Core Image 的一些高级应用。让我们继续往下看～&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://wanzao2.b0.upaiyun.com/system/pictures/11/original/28.png&quot; alt=&quot;goon&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;注意点&quot;&gt;注意点&lt;/h2&gt;&lt;h3 id=&quot;1-_image-CIImage_==_nil&quot;&gt;1. image.CIImage == nil&lt;/h3&gt;&lt;p&gt;为了获取 CIImage，可能有的同学会直接通 UIImage.CIImage 的方式去获取，但是这样的方式是无法保证获取到 CIImage 对象的。定义如下：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt;(nullable,&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;readonly&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;CIImage&lt;/span&gt; *&lt;span class=&quot;built_in&quot;&gt;CIImage&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;NS_AVAILABLE_IOS&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;_0); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// returns underlying CIImage or nil if CGImageRef based&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里已经很明确说明了，UIImage 对象可能不是基于 CIImage 创建的（比如它是由 &lt;code&gt;imageWithCIImage:&lt;/code&gt; 生成的），这样就无法获取到 CIImage 对象。&lt;/p&gt;
&lt;p&gt;正确的姿势应该是：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;CIImage&lt;/span&gt; *ciImage = [[&lt;span class=&quot;built_in&quot;&gt;CIImage&lt;/span&gt; alloc] initWithImage:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.originalImage];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;2-_CIContext&quot;&gt;2. CIContext&lt;/h3&gt;&lt;p&gt;在创建结果 UIImage 的时候，最简单的方式就是通过 &lt;strong&gt;imageWithCIImage&lt;/strong&gt; 来实现。这种情况下，不需要显示的声明 &lt;strong&gt;CIContext&lt;/strong&gt;，因为 &lt;strong&gt;imageWithCIImage&lt;/strong&gt; 内部自动完成了这个步骤。这使得使用 Core Image 更加的方便。当然，它也引起了另外一个问题，每次都会重新创建一个 &lt;strong&gt;CIContext&lt;/strong&gt;，然而 &lt;strong&gt;CIContext&lt;/strong&gt; 的代价是非常高的。&lt;/p&gt;
&lt;p&gt;并且，CIContext 和 CIImage 对象是不可变的，在线程之间共享这些对象是安全的。所以多个线程可以使用同一个 GPU 或者 CPU CIContext 对象来渲染 CIImage 对象。&lt;/p&gt;
&lt;p&gt;所以重用 CIContext 是很有必要的。这意味着，我们不应该使用 &lt;strong&gt;imageWithCIImage&lt;/strong&gt; 来生成 UIImage，而应该自己创建维护 CIContext。&lt;/p&gt;
&lt;p&gt;比如：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.context = [&lt;span class=&quot;built_in&quot;&gt;CIContext&lt;/span&gt; contextWithOptions:&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;CGImageRef&lt;/span&gt; cgImage = [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.context create&lt;span class=&quot;built_in&quot;&gt;CGImage&lt;/span&gt;:outputImage fromRect:[outputImage extent]];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;UIImage&lt;/span&gt; *image = [&lt;span class=&quot;built_in&quot;&gt;UIImage&lt;/span&gt; imageWith&lt;span class=&quot;built_in&quot;&gt;CGImage&lt;/span&gt;:cgImage];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;3-_CPU_/_GPU&quot;&gt;3. CPU / GPU&lt;/h3&gt;&lt;p&gt;Core Image 的另外一个优势，就是可以根据需求选择 CPU 或者 GPU 来处理。&lt;/p&gt;
&lt;p&gt;Context 创建的时候，我们可以给它设置为是基于 GPU 还是 CPU。&lt;/p&gt;
&lt;p&gt;基于 GPU 的话，处理速度更快，因为利用了 GPU 硬件的并行优势。可以使用 OpenGLES 或者 Metal 来渲染图像，这种方式CPU完全没有负担，应用程序的运行循环不会受到图像渲染的影响。&lt;/p&gt;
&lt;p&gt;但是 GPU 受限于硬件纹理尺寸，而且如果你的程序在后台继续处理和保存图片的话，那么需要使用 CPU，因为当 App 切换到后台状态时 GPU 处理会被打断。使用 CPU 渲染的 iOS 会采用 GCD 来对图像进行渲染，这保证了 CPU 渲染在大部分情况下更可靠，比 GPU 渲染更容易使用，可以在后台实现渲染过程。&lt;/p&gt;
&lt;p&gt;综上，对于复杂的图像滤镜使用 GPU 更好，但是如果在处理视频并保存文件，或保存照片到照片库中时，为避免程序进入后台对图片保存造成影响，这时应该使用 CPU 进行渲染。&lt;/p&gt;
&lt;p&gt;用 Apple 官方的一句话来描述再合适不过了：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;CPU is still what will give you the best fidelity where as the GPU will give you the best performance.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;具体的设置方式，可以参考下面的例子：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 创建基于 CPU 的 CIContext 对象 (默认是基于 GPU，CPU 需要额外设置参数)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;context = [&lt;span class=&quot;built_in&quot;&gt;CIContext&lt;/span&gt; contextWithOptions: [&lt;span class=&quot;built_in&quot;&gt;NSDictionary&lt;/span&gt; dictionaryWithObject:[&lt;span class=&quot;built_in&quot;&gt;NSNumber&lt;/span&gt; numberWithBool:&lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;] forKey:k&lt;span class=&quot;built_in&quot;&gt;CIContextUseSoftwareRenderer&lt;/span&gt;]];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 创建基于 GPU 的 CIContext 对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;context = [&lt;span class=&quot;built_in&quot;&gt;CIContext&lt;/span&gt; contextWithOptions: &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 创建基于 GPU 的 CIContext 对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;EAGLContext *eaglctx = [[EAGLContext alloc] initWithAPI:kEAGLRenderingAPIOpenGLES2];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;context = [&lt;span class=&quot;built_in&quot;&gt;CIContext&lt;/span&gt; contextWithEAGLContext:eaglctx];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;同样是基于  GPU 的，它们之间也是有区别的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;contextWithOptions&lt;/strong&gt; 创建的 context 并没有实时性能， 虽然渲染是在 GPU 上执行，但是其输出的 image 是不能显示的，只有当其被复制回 CPU 存储器上时，才会被转成一个可被显示的 image 类型，比如 UIImage。&lt;/p&gt;
&lt;p&gt;它的渲染过程大致如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xkc7a.com1.z0.glb.clouddn.com/2016100325659cpu.png&quot; alt=&quot;2016100325659cpu.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;当使用 Core Image 在 GPU 上渲染图片的时候，先是把图像传递到 GPU 上，然后执行滤镜相关操作。但是当需要生成  CGImage 对象的时候，图像又被复制回 CPU 上。最后要在视图上显示的时候，又返回 GPU 进行渲染。这样在 GPU 和 CPU 之前来回切换，会造成很严重的性能损耗。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;contextWithEAGLContext&lt;/strong&gt; 创建的 context 支持实时渲染，渲染图像的过程始终在 GPU 上进行，并且永远不会复制回 CPU 存储器上，这就保证了更快的渲染速度和更好的性能。&lt;/p&gt;
&lt;p&gt;当然，这个前提是利用实时渲染的特效，而不是每次操作都产生一个 UIImage，然后再设置到视图上。&lt;/p&gt;
&lt;p&gt;比如 OpenGLES：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 设置 OpenGLES 渲染环境&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;EAGLContext *eaglContext = [[EAGLContext alloc] 	  initWithAPI:kEAGLRenderingAPIOpenGLES2];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.glkView.context = eaglContext;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.context = [&lt;span class=&quot;built_in&quot;&gt;CIContext&lt;/span&gt; contextWithEAGLContext:eaglContext];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 实时渲染&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.pixellateFilter setValue:@(sender.value) forKey:&lt;span class=&quot;string&quot;&gt;@&quot;inputRadius&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.context drawImage:_pixellateFilter.outputImage inRect:_targetBounds  fromRect:_inputImage.extent];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.glkView.context presentRenderbuffer:GL_RENDERBUFFER];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;它的渲染过程大致如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xkc7a.com1.z0.glb.clouddn.com/2016100328506gpu.png&quot; alt=&quot;2016100328506gpu.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;并且，iOS8 后增强了 GPU 渲染，在后台也能继续使用 GPU 进行处理。这点会在下文详细说明。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;所以应该尽可能的使用 GPU 去做图像处理。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;另外，Apple 对 Core Image 内部进行了优化，如果通过&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 创建基于 GPU 的 CIContext 对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;context = [&lt;span class=&quot;built_in&quot;&gt;CIContext&lt;/span&gt; contextWithOptions: &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;创建 &lt;strong&gt;context&lt;/strong&gt;，那么它内部的渲染器会根据设备最优选择。依次为 &lt;strong&gt;Metal，OpenGLES，CoreGraphics。&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;PS：Metal 需要 iOS8 + A7，且模拟器不支持 Metal。OpenGLES3 需要 iOS7 + A7&lt;/p&gt;
&lt;p&gt;测试结果：&lt;/p&gt;
&lt;p&gt;iPhone 6s， iOS 10， 模拟器：OpenGLES3&lt;/p&gt;
&lt;p&gt;iPhone 6s，iOS 10，真机：Metal&lt;/p&gt;
&lt;p&gt;iPhone 5，iOS 8， 模拟器：OpenGLES&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;4-_CIFilter&quot;&gt;4. CIFilter&lt;/h3&gt;&lt;p&gt;之前提到 CIContext 是线程安全的，然而 CIFilter 并不是线程安全的，这意味着 一个 CIFilter 对象不能在多个线程间共享。如果你的操作是多线程的，每个线程都必须创建自己的 CIFilter 对象。否则，你的 App 将产生不可预期的结果。&lt;/p&gt;
&lt;h2 id=&quot;Core_Image_vs_GPUImage&quot;&gt;Core Image vs GPUImage&lt;/h2&gt;&lt;p&gt;其他图像处理方案的对比，这里比较有争议的就是 OpenGLES 和 Core Image 了。&lt;/p&gt;
&lt;p&gt;在 OpenGLES 部分，拿主流的 &lt;a href=&quot;https://github.com/BradLarson/GPUImage&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GPUImage&lt;/a&gt; 来做对比，分析一下它们各自的优缺点。只有对比了才知道，Core Image 好在哪里，是否值得使用。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;PS：以下的优势阐述，撇去了两个框架都具备的，仅保留对比后各自的优势。&lt;/p&gt;
&lt;p&gt;另外，GPUImage 我没有深入学习过，对于它的一些优势，主要是总结它的开发者 Brad 描述的，以及简单的 Demo 进行对比。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;GPUImage 优势：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;最低支持 iOS 4.0，iOS 5.0 之后就支持自定义滤镜。&lt;/li&gt;
&lt;li&gt;在低端机型上，GPUImage 有更好的表现。（这个我没用真正的设备对比过，GPUImage 的主页上是这么说的）&lt;/li&gt;
&lt;li&gt;GPUImage 在视频处理上有更好的表现。&lt;/li&gt;
&lt;li&gt;GPUImage 的代码完成公开，实现透明。&lt;/li&gt;
&lt;li&gt;可以根据自己的业务需求，定制更加复杂的管线操作。可定制程度高。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Core Image 优势：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;官方框架，使用放心，维护方便。&lt;/li&gt;
&lt;li&gt;支持 CPU 渲染，可以在后台继续处理和保存图片。&lt;/li&gt;
&lt;li&gt;一些滤镜的性能更强劲。例如由 Metal Performance Shaders 支持的模糊滤镜等。&lt;/li&gt;
&lt;li&gt;支持使用 Metal 渲染图像。而 Metal 在 iOS 平台上有更好的表现。&lt;/li&gt;
&lt;li&gt;与 Metal，SpriteKit，SceneKit，Core Animation 等更完美的配合。&lt;/li&gt;
&lt;li&gt;支持图像识别功能。包括人脸识别、条形码识别、文本识别等。&lt;/li&gt;
&lt;li&gt;支持自动增强图像效果，会分析图像的直方图，图像属性，脸部区域，然后通过一组滤镜来改善图像效果。&lt;/li&gt;
&lt;li&gt;支持对原生 RAW 格式图片的处理。&lt;/li&gt;
&lt;li&gt;滤镜链的性能比 GPUImage 高。(没有验证过，GPUImage 的主页上是这么说的)。&lt;/li&gt;
&lt;li&gt;支持对大图进行处理，超过 GPU 纹理限制 (4096 * 4096)的时候，会自动拆分成几个小块处理(Automatic tiling)。GPUImage 当处理超过纹理限制的图像时候，会先做判断，压缩成最大纹理限制的图像，导致图像质量损失。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;至此，我觉得 Core Image 的优势很明显了，尤其是与 Metal 的配合，自动增强图像效果，支持处理大图以及滤镜链的优化。&lt;/p&gt;
&lt;p&gt;下面关于这几点优化，做个简单的描述。&lt;/p&gt;
&lt;h3 id=&quot;1-_滤镜链&quot;&gt;1. 滤镜链&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;if you chain together a sequence of filters, Core Image will automatically concatenate these subroutines into a single program.The idea behind this is to improve performance and quality, by reducing the number of intermediate buffers.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://7xkc7a.com1.z0.glb.clouddn.com/2016100749763filters.png&quot; alt=&quot;2016100749763filters.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;Core Image 会自动把多个滤镜组合成一个新的程序（program），通过减少中间缓冲区的数量，来提高性能和质量。&lt;/p&gt;
&lt;h3 id=&quot;2-_支持大图&quot;&gt;2. 支持大图&lt;/h3&gt;&lt;p&gt;超过 GPU 纹理限制 （4096 * 4096）的时候，会自动拆分成几个小块处理 （Automatic tiling）。&lt;/p&gt;
&lt;p&gt;图片大小：（8374，7780），验证结果：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;PS： rois 表示当前处理区域。 extent 表示图像实际大小。&lt;/p&gt;
&lt;p&gt;这个输出是 Core Image 在处理过程中打印的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) rois=[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2092&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3888&lt;/span&gt;] extent=[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;8374&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;7780&lt;/span&gt;]  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) rois=[&lt;span class=&quot;number&quot;&gt;2092&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2092&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3888&lt;/span&gt;] extent=[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;8374&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;7780&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;) rois=[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3888&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2092&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3892&lt;/span&gt;] extent=[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;8374&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;7780&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;) rois=[&lt;span class=&quot;number&quot;&gt;2092&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3888&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2092&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3892&lt;/span&gt;] extent=[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;8374&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;7780&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;) rois=[&lt;span class=&quot;number&quot;&gt;4184&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2092&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3888&lt;/span&gt;] extent=[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;8374&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;7780&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;) rois=[&lt;span class=&quot;number&quot;&gt;6276&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2098&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3888&lt;/span&gt;] extent=[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;8374&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;7780&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;) rois=[&lt;span class=&quot;number&quot;&gt;4184&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3888&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2092&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3892&lt;/span&gt;] extent=[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;8374&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;7780&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;) rois=[&lt;span class=&quot;number&quot;&gt;6276&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3888&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2098&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3892&lt;/span&gt;] extent=[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;8374&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;7780&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果按序讲每个区域进行拼凑，就是原图的实际区域了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xkc7a.com1.z0.glb.clouddn.com/2016101313942automatic_tiling.png&quot; alt=&quot;2016101313942automatic_tiling.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;另外，Core Image 对大图和小图的处理上，也有所不同。&lt;strong&gt;小图提前解码，大图延迟解码 !&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当传入的 image 是小图 (size &amp;lt; inputImageMaximumSize)时，在调用 &lt;strong&gt;initWithCGImage&lt;/strong&gt; 获取输入图像 &lt;strong&gt;CIImage&lt;/strong&gt; 的时候，这个 image 就被完全解码了。这是很有必要的。因为小图可能多次被用到，把编码的工作提前并且只做一次，一定程度上优化性能。&lt;/p&gt;
&lt;p&gt;而对于大图来说，它的解码操作是尽可能延后的（&lt;strong&gt;being lazy&lt;/strong&gt;），直到真正需要显示， CIContext 执行 render 相关操作。因为大图的解码代价较大，并且不常用，无脑提前解码，放到内存中是没有必要的。&lt;/p&gt;
&lt;p&gt;下面是验证结果，选了两个相差不大的图片，但是介于 4096 左右。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4000 * 4000，小图：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xkc7a.com1.z0.glb.clouddn.com/20161005272964000_memory.png&quot; alt=&quot;20161005272964000_memory.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xkc7a.com1.z0.glb.clouddn.com/20161005205644000_decode.png&quot; alt=&quot;20161005205644000_decode.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;很明显的，&lt;strong&gt;Memory 占有率高&lt;/strong&gt;，并且调用了 &lt;strong&gt;decode&lt;/strong&gt; 相关操作。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4100 * 4100，大图：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xkc7a.com1.z0.glb.clouddn.com/20161005838734100_memory.png&quot; alt=&quot;20161005838734100_memory.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xkc7a.com1.z0.glb.clouddn.com/20161005840444100.png&quot; alt=&quot;20161005840444100.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;这里的 &lt;strong&gt;Memory 占用较低&lt;/strong&gt;，并且没有看到 &lt;strong&gt;decode&lt;/strong&gt; 相关操作。&lt;/p&gt;
&lt;p&gt;同样的，当通过 CIImage 获取输出 CGImage 的时候，如果输出 CGImage 是小图的话，那么当 &lt;strong&gt;[CIContext createCGImage]&lt;/strong&gt; 调用的时候，image 就被完全渲染了。而对于大图，要等到 CGImage 真正需要渲染显示的时候，这个 image 才会被渲染。&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* Render the region &#39;fromRect&#39; of image &#39;image&#39; into a temporary buffer using&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * the context, then create and return a new CoreGraphics image with&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * the results. The caller is responsible for releasing the returned image.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * The return value will be null if size is empty or too big. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#if !defined(SWIFT_CLASS_EXTRA) || (defined(SWIFT_SDK_OVERLAY_COREIMAGE_EPOCH) &amp;amp;&amp;amp; SWIFT_SDK_OVERLAY_COREIMAGE_EPOCH &amp;gt;= 2)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (nullable &lt;span class=&quot;built_in&quot;&gt;CGImageRef&lt;/span&gt;)create&lt;span class=&quot;built_in&quot;&gt;CGImage&lt;/span&gt;:(&lt;span class=&quot;built_in&quot;&gt;CIImage&lt;/span&gt; *)image&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            fromRect:(&lt;span class=&quot;built_in&quot;&gt;CGRect&lt;/span&gt;)fromRect;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;经过这样的优化处理后，对于大图，&lt;a href=&quot;https://developer.apple.com/videos/play/wwdc2014/514/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Session 514&lt;/a&gt; 给出了直观的数据对比：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xkc7a.com1.z0.glb.clouddn.com/2016100518100largeCompare.png&quot; alt=&quot;2016100518100largeCompare.png&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;3-_GPU_优化&quot;&gt;3. GPU 优化&lt;/h3&gt;&lt;p&gt;另外一个很重要的优化就是：&lt;strong&gt;提高了 iOS 上 Core Image 使用 GPU 进行渲染的性能&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;具体体现在：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.后台操作&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;短时间内，进入后台后会依旧使用高效的 GPU 进行渲染。&lt;/li&gt;
&lt;li&gt;后台操作的 GPU 优先级低，不会对前台的渲染造成性能影响。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;2.多线程&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;iOS 8之前，如果主线程使用 GPU 做相关操作，次要线程想使用 Core Image 的时候，通常要使用安全的 CPU 来实现，避免引起意想不到的问题。&lt;/p&gt;
&lt;p&gt;在 iOS 8之后，可以在次要线程设置 Context 的 &lt;strong&gt;kCIContextPriorityRequestLow&lt;/strong&gt; 值为 YES，这样就标记为当前 Context 在 GPU 上渲染的时候优先级低，从而不会影响到 GPU 上高优先级的渲染。&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;CIContext&lt;/span&gt; *context = [&lt;span class=&quot;built_in&quot;&gt;CIContext&lt;/span&gt; contextWithOptions: [&lt;span class=&quot;built_in&quot;&gt;NSDictionary&lt;/span&gt; dictionaryWithObject:[&lt;span class=&quot;built_in&quot;&gt;NSNumber&lt;/span&gt; numberWithBool:&lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;] forKey:k&lt;span class=&quot;built_in&quot;&gt;CIContextPriorityRequestLow&lt;/span&gt;]];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;所以，应该尽可能的使用 GPU 进行渲染，来提高性能。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;综上，我认为在某需求 Core Image 能实现的时候，使用 Core Image 应该是 iOS 平台上最好的选择。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;至此，我所了解的 Core Image 使用上的注意点已经总结完了，希望你能有所获~&lt;/p&gt;
&lt;p&gt;当然，如果你还想了解更多，那么我的下一篇文章： &lt;a href=&quot;http://colin1994.github.io/2016/10/21/Core-Image-Custom-Filter/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Core Image 自定义 Filter~&lt;/a&gt;  值得你期待。&lt;/p&gt;
&lt;p&gt;Have fun~&lt;/p&gt;
&lt;h2 id=&quot;延伸阅读&quot;&gt;延伸阅读&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/library/content/documentation/GraphicsImaging/Reference/CoreImageFilterReference/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Core Image Filter Reference&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;包含了 Core Image 所提供图像滤镜的完整列表以及用法示例。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://objccn.io/issue-21-6/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Core Image 介绍&lt;/a&gt; &lt;/p&gt;
&lt;p&gt; ObjC 的文章，详细介绍了 Core Image，值得看看。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/search/?q=Core%20Image&amp;amp;type=Videos&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Core Image Sessions&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;关于 Core Image 的 Session，内容很全。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/library/prerelease/content/documentation/GraphicsImaging/Conceptual/CoreImaging/ci_intro/ci_intro.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Core Image Programming Guide&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;官方 Core Image 编程指南。&lt;/p&gt;
</content:encoded>
      
      <comments>http://http://colin1994.github.io/2016/10/21/Core-Image-OverView/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Call Directory Extension 初探</title>
      <link>http://http://colin1994.github.io/2016/06/17/Call-Directory-Extension-Study/</link>
      <guid>http://http://colin1994.github.io/2016/06/17/Call-Directory-Extension-Study/</guid>
      <pubDate>Fri, 17 Jun 2016 14:33:15 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt;iOS 10中引入了许多令人振奋的新特性，其中 CallKit让我特别感兴趣。这是一个非常重要的 API，继2014年苹果推出 VoIP证书后，这次 VoIP 接口的开放，以及一个全新的 App Extension，简直是VOIP的福音，可见苹果对VOIP的重视。并且，&lt;strong&gt;”that enable call blocking and caller identification. You can create an app extension that can associate a phone number with a name or tell the system when a number should be blocked.”&lt;/strong&gt; 这意味着现在可以通过 Call Directory Extension 来实现电话黑名单功能了。Cool~ 本文简单阐述了如果实现简单的来电黑名单功能。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;阅读须知：目前学习的资料也仅限相关 API，另外 API也没有详细的注释，所以本文主要是个人探索所得，如果有什么错误，还望见谅并予以指正。现在，让我们开始吧~&lt;/strong&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded>&lt;blockquote&gt;
&lt;p&gt;iOS 10中引入了许多令人振奋的新特性，其中 CallKit让我特别感兴趣。这是一个非常重要的 API，继2014年苹果推出 VoIP证书后，这次 VoIP 接口的开放，以及一个全新的 App Extension，简直是VOIP的福音，可见苹果对VOIP的重视。并且，&lt;strong&gt;”that enable call blocking and caller identification. You can create an app extension that can associate a phone number with a name or tell the system when a number should be blocked.”&lt;/strong&gt; 这意味着现在可以通过 Call Directory Extension 来实现电话黑名单功能了。Cool~ 本文简单阐述了如果实现简单的来电黑名单功能。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;阅读须知：目前学习的资料也仅限相关 API，另外 API也没有详细的注释，所以本文主要是个人探索所得，如果有什么错误，还望见谅并予以指正。现在，让我们开始吧~&lt;/strong&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;API介绍&quot;&gt;API介绍&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Extension&lt;/strong&gt; 一直给我的印象就是很轻量，单一的，就如之前接触的  &lt;a href=&quot;http://colin1994.github.io/2016/03/12/Photo-Editing-Extension/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Photo Editing Extension&lt;/a&gt; 一样，使用起来十分简单。这次的 &lt;strong&gt;Call Directory Extension&lt;/strong&gt; 也不出例外，出奇的简单。只涉及了两个类，四个方法。下面我们逐一介绍：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//  CXCallDirectoryProvider.h&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//  CallKit&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//  Copyright © 2016 Apple. All rights reserved.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@available&lt;/span&gt;(iOS &lt;span class=&quot;number&quot;&gt;10.0&lt;/span&gt;, *)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;CXCallDirectoryProvider&lt;/span&gt; : &lt;span class=&quot;title&quot;&gt;NSObject&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;NSExtensionRequestHandling&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;beginRequest&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(with context: CXCallDirectoryExtensionContext)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;首先是第一个类 &lt;strong&gt;CXCallDirectoryProvider&lt;/strong&gt;，它是来电的响应者，为我们提供了 &lt;strong&gt;beginRequest&lt;/strong&gt; 方法，该方法在 Containing App 调用 reload 或者在 设置 —&amp;gt; 电话 —&amp;gt; Call Blocking &amp;amp; Identification里开启权限的时候，会自动被调用。所以我们之后将要重写它，来实现黑名单相关逻辑。怎么样，简单吧~ &lt;img src=&quot;http://wanzao2.b0.upaiyun.com/system/pictures/2/original/21.png&quot; alt=&quot;emoji_1&quot;&gt;&lt;/p&gt;
&lt;p&gt;Now, Go on~&lt;/p&gt;
&lt;p&gt;接下来是另外一个类 &lt;strong&gt;CXCallDirectoryExtensionContext&lt;/strong&gt;，它提供了另外三个方法，如下所示：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//  CXCallDirectoryExtensionContext.h&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//  CallKit&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//  Copyright © 2016 Apple. All rights reserved.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@available&lt;/span&gt;(iOS &lt;span class=&quot;number&quot;&gt;10.0&lt;/span&gt;, *)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;CXCallDirectoryExtensionContext&lt;/span&gt; : &lt;span class=&quot;title&quot;&gt;NSExtensionContext&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;addBlockingEntry&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(withNextSequentialPhoneNumber phoneNumber: String)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;addIdentificationEntry&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(withNextSequentialPhoneNumber phoneNumber: String, label: String)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;completeRequest&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(completionHandler completion: &lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;params&quot;&gt;(Bool)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;type&quot;&gt;Swift&lt;/span&gt;.&lt;span class=&quot;type&quot;&gt;Void&lt;/span&gt;)? = &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;不难看出，&lt;strong&gt;CXCallDirectoryExtensionContext&lt;/strong&gt; 主要负责提交我们处理好的请求。说白点，我们利用它来让系统知道，我们对某个来电所做出的判断。 &lt;strong&gt;addBlockingEntry&lt;/strong&gt; 方法，接受一个电话号码字符串，形如 &lt;strong&gt;“+8618…69”&lt;/strong&gt; (PS：不要问我为什么要加区号.. 这都是血与泪的经验)，来直接加入黑名单，也就是不接听该来电。&lt;strong&gt;addIdentificationEntry&lt;/strong&gt; 方法，接受一个电话号码字符串以及对该号码的描述，也就是来电的时候需要显示的内容。 &lt;strong&gt;completeRequest&lt;/strong&gt; 也就是提交之前的处理结果。至此，我们所要做的工作就完成了。&lt;img src=&quot;http://wanzao2.b0.upaiyun.com/system/pictures/16/original/15.png&quot; alt=&quot;emoji_2&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;实战演示&quot;&gt;实战演示&lt;/h2&gt;&lt;p&gt;虽然自认为上面的描述已经够详细了，不过这里还是有必要详细走一遍流程，以免遗漏。&lt;/p&gt;
&lt;p&gt;开发环境：Xcode8.0 Beta + 64位 iOS10设备（至于为什么64位，之后再解释，说多了都是泪..）&lt;/p&gt;
&lt;h3 id=&quot;1-_创建工程&quot;&gt;1. 创建工程&lt;/h3&gt;&lt;p&gt;没什么特别。 &lt;strong&gt;Xcode —&amp;gt; File —&amp;gt; New —&amp;gt; Project&lt;/strong&gt;。随便选个 iOS Application，创建即可。这里我选择开发语言为 Swift，你随意~。&lt;/p&gt;
&lt;p&gt;这里我们的目标是来电黑名单，也就是 Extension部分，所以创建好的 Containing App，不用做什么改动。&lt;/p&gt;
&lt;h3 id=&quot;2-添加_Extension&quot;&gt;2.添加 Extension&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Xcode —&amp;gt; File —&amp;gt; New —&amp;gt; Target&lt;/strong&gt;。创建一个 &lt;strong&gt;Call Directory Extension&lt;/strong&gt;，如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xkc7a.com1.z0.glb.clouddn.com/callExtension_1.jpeg?imageView2/2/w/600&quot; alt=&quot;Extension_1&quot;&gt;&lt;/p&gt;
&lt;p&gt;这里注意下底部的说明， （This extension and the app it is bundled with must be &lt;strong&gt;64-bit only&lt;/strong&gt;）也就是，这个 extension只支持 64位的设备，坑爹有没有！！之前创建太急，没认真看，用那台 5C倒腾了半天，就是出问题。只好狠心把主力机也升级了。&lt;/p&gt;
&lt;p&gt;创建好 Extension，会弹出这样的提示框：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xkc7a.com1.z0.glb.clouddn.com/callExtension_2.jpeg?imageView2/2/w/500&quot; alt=&quot;Extension_2&quot;&gt;&lt;/p&gt;
&lt;p&gt;询问我们是否激活这个 scheme，当然选择激活咯，继续~&lt;/p&gt;
&lt;p&gt;之后只要关注 &lt;strong&gt;xxxHandler.swift&lt;/strong&gt; 即可，xxx是你之前创建的 extension命名。&lt;/p&gt;
&lt;p&gt;这里的相关代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; Foundation&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; CallKit&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;CallDirectoryHandler&lt;/span&gt;: &lt;span class=&quot;title&quot;&gt;CXCallDirectoryProvider&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;beginRequest&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(with context: CXCallDirectoryExtensionContext)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	&lt;span class=&quot;comment&quot;&gt;// --- 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; phoneNumbersToBlock = retrievePhoneNumbersToBlock() &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;type&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Unable to retrieve phone numbers to block&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; error = &lt;span class=&quot;type&quot;&gt;NSError&lt;/span&gt;(domain: &lt;span class=&quot;string&quot;&gt;&quot;CallDirectoryHandler&quot;&lt;/span&gt;, code: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, userInfo: &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            context.cancelRequest(withError: error)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// --- 2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; phoneNumber &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; phoneNumbersToBlock &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            context.addBlockingEntry(withNextSequentialPhoneNumber: phoneNumber)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// --- 3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; (phoneNumbersToIdentify, phoneNumberIdentificationLabels) = retrievePhoneNumbersToIdentifyAndLabels() &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;type&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Unable to retrieve phone numbers to identify and their labels&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; error = &lt;span class=&quot;type&quot;&gt;NSError&lt;/span&gt;(domain: &lt;span class=&quot;string&quot;&gt;&quot;CallDirectoryHandler&quot;&lt;/span&gt;, code: &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, userInfo: &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            context.cancelRequest(withError: error)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// --- 4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (phoneNumber, label) &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;zip&lt;/span&gt;(phoneNumbersToIdentify, phoneNumberIdentificationLabels) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            context.addIdentificationEntry(withNextSequentialPhoneNumber: phoneNumber, label: label)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// --- 5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        context.completeRequest()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;retrievePhoneNumbersToBlock&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; -&amp;gt; [&lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;]? &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// retrieve list of phone numbers to block&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; [&lt;span class=&quot;string&quot;&gt;&quot;+8618xxxx157&quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;retrievePhoneNumbersToIdentifyAndLabels&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; -&amp;gt; (phoneNumbers: [&lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;], labels: [&lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;])? &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// retrieve list of phone numbers to identify, and their labels&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ([&lt;span class=&quot;string&quot;&gt;&quot;+8618xxxx569&quot;&lt;/span&gt;], [&lt;span class=&quot;string&quot;&gt;&quot;测试&quot;&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;一个简单的来电黑名单，我们只要补全 &lt;code&gt;retrievePhoneNumbersToBlock&lt;/code&gt; 和 &lt;code&gt;retrievePhoneNumbersToIdentifyAndLabels&lt;/code&gt; 中的相关数据即可，它们分别表示直接加入黑名单的号码以及识别出来，需要判断的号码。&lt;/p&gt;
&lt;p&gt;现在我们具体看一下这个类到底做了什么。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;beginRequest&lt;/code&gt; ，该方法在 Containing App 调用 reload 或者在 设置 —&amp;gt; 电话 —&amp;gt; Call Blocking &amp;amp; Identification里开启权限的时候，会自动被调用。每次调用，都会提交当前的黑名单列表，具体操作如下：&lt;/p&gt;
&lt;p&gt;在 &lt;strong&gt;// —- 1&lt;/strong&gt; 中，先判断是否成功调用了 &lt;code&gt;retrievePhoneNumbersToBlock&lt;/code&gt; 方法，如果没有，则打印 Log： &lt;strong&gt;Unable to retrieve phone numbers to block&lt;/strong&gt;，然后直接终止这次请求并返回。&lt;/p&gt;
&lt;p&gt;在 &lt;strong&gt;// —- 2&lt;/strong&gt; 中，遍历添加黑名单中的号码，这里的号码将直接拦截。&lt;/p&gt;
&lt;p&gt;在 &lt;strong&gt;// —- 3&lt;/strong&gt; 中，先判断是否成功调用了 &lt;code&gt;retrievePhoneNumbersToIdentifyAndLabels&lt;/code&gt; 方法，如果没有，则打印 Log： &lt;strong&gt;Unable to retrieve phone numbers to identify and their labels&lt;/strong&gt;，然后直接终止这次请求并返回。&lt;/p&gt;
&lt;p&gt;在 &lt;strong&gt;// —- 4&lt;/strong&gt; 中，遍历添加识别后的号码及其描述，这里的号码将连带描述一起显示。&lt;/p&gt;
&lt;p&gt;在 &lt;strong&gt;// —- 5&lt;/strong&gt; 中，完成提交请求。 &lt;/p&gt;
&lt;p&gt;到这里，代码已经全部完成了。&lt;/p&gt;
&lt;h3 id=&quot;3-_开启权限&quot;&gt;3. 开启权限&lt;/h3&gt;&lt;p&gt;之后我们运行该 App到设备中，然后进入设备的设置 —&amp;gt; 电话 —&amp;gt; Call Blocking &amp;amp; Identification，开启我们的 App即可。如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xkc7a.com1.z0.glb.clouddn.com/callExtension_3.png?imageView2/2/h/500&quot; alt=&quot;Extension_3&quot;&gt;&lt;/p&gt;
&lt;p&gt;至此，相关的工作就都完成了，我们的来电黑名单也已经实现了，可以用添加到列表中的号码来测试啦，如下所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xkc7a.com1.z0.glb.clouddn.com/callExtension_4.png?imageView2/2/h/500&quot; alt=&quot;Extension_4&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;相关思考及后续&quot;&gt;相关思考及后续&lt;/h2&gt;&lt;p&gt;虽然实现黑名单功能很简单，但是这里我认为主要的问题应该是集中在，如何编辑这个黑名单列表。列表数据项可能很多，并且数据可能是实时更新添加的，那应该怎么做才更好呢？这里我的第一反应就是利用 App Group实现数据共享，在 Containing App完成相关的数据操作，在 Extension App中去获取即可。至于可行性，倒是没有验证过，如果不行，就当我瞎比比咯~。 当然，可能还有其他的办法，以及可能还会遇到其他的问题，这里在之后的学习过程中，我会逐步完善。&lt;/p&gt;
&lt;p&gt;当然，对于 CallKit的学习，我也仅限于这一两天，还是没有资料的情况下。所以文中难免存在各种错误以及遗漏，欢迎指正。&lt;/p&gt;
&lt;p&gt;这之后，继续 CallKit的学习，实现它的另外一个功能：VoIP App。 wait…&lt;/p&gt;
&lt;p&gt;Enjoy it~&lt;/p&gt;
&lt;h2 id=&quot;参考链接&quot;&gt;参考链接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/videos/play/wwdc2016/230/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Enhancing VoIP Apps with CallKit&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/reference/callkit&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CallKit&lt;/a&gt;&lt;/p&gt;
</content:encoded>
      
      <comments>http://http://colin1994.github.io/2016/06/17/Call-Directory-Extension-Study/#disqus_thread</comments>
    </item>
    
    <item>
      <title>What&#39;s New in iOS 10.0 中文版(上)</title>
      <link>http://http://colin1994.github.io/2016/06/14/What's_New_in_iOS_10.0_zh_0/</link>
      <guid>http://http://colin1994.github.io/2016/06/14/What's_New_in_iOS_10.0_zh_0/</guid>
      <pubDate>Tue, 14 Jun 2016 09:20:52 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt;由于原文篇幅较长，为了方便阅读，分为上下篇。&lt;/p&gt;
&lt;p&gt;本文是 What’s New in iOS 10.0 中文版的上篇，主要描述了iOS 10新引入的一些新特效，概括了重要的变化。&lt;/p&gt;
&lt;p&gt;在What’s New in iOS 10.0 中文版(下)中，将介绍一些已存在框架的改进以及一些弃用的 API。&lt;/p&gt;
&lt;p&gt;原文链接：&lt;a href=&quot;https://developer.apple.com/library/prerelease/content/releasenotes/General/WhatsNewIniOS/Articles/iOS10.html#//apple_ref/doc/uid/TP40017084-SW1&quot;&gt;What’s New in iOS 10.0&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这篇文章总结了运行在目前 iOS设备上的 iOS 10中与开发者有关的功能，这篇文章还列出了与这些功能相关的详细文档。&lt;/p&gt;
      
      </description>
      
      <content:encoded>&lt;blockquote&gt;
&lt;p&gt;由于原文篇幅较长，为了方便阅读，分为上下篇。&lt;/p&gt;
&lt;p&gt;本文是 What’s New in iOS 10.0 中文版的上篇，主要描述了iOS 10新引入的一些新特效，概括了重要的变化。&lt;/p&gt;
&lt;p&gt;在What’s New in iOS 10.0 中文版(下)中，将介绍一些已存在框架的改进以及一些弃用的 API。&lt;/p&gt;
&lt;p&gt;原文链接：&lt;a href=&quot;https://developer.apple.com/library/prerelease/content/releasenotes/General/WhatsNewIniOS/Articles/iOS10.html#//apple_ref/doc/uid/TP40017084-SW1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;What’s New in iOS 10.0&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这篇文章总结了运行在目前 iOS设备上的 iOS 10中与开发者有关的功能，这篇文章还列出了与这些功能相关的详细文档。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;关于目前已知问题的最新新闻和信息，可以查阅 &lt;a href=&quot;https://developer.apple.com/ios/download/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://developer.apple.com/ios/download/&lt;/a&gt; 。添加到 iOS 10中的 API 的完整列表，详见 &lt;em&gt;&lt;a href=&quot;https://developer.apple.com/library/prerelease/content/releasenotes/General/iOS10APIDiffs/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iOS 10.0 API Diffs&lt;/a&gt;&lt;/em&gt;。有关新设备的更多信息，详见 &lt;em&gt;&lt;a href=&quot;https://developer.apple.com/library/prerelease/content/documentation/DeviceInformation/Reference/iOSDeviceCompatibility/Introduction/Introduction.html#//apple_ref/doc/uid/TP40013599&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iOS Device Compatibility Reference&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;更多关于 Swift,详见 &lt;a href=&quot;https://developer.apple.com/library/prerelease/content/documentation/DeveloperTools/Conceptual/WhatsNewXcode/introduction.html#//apple_ref/doc/uid/TP40004635-SW3&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Swift Language&lt;/a&gt; and &lt;em&gt;&lt;a href=&quot;https://developer.apple.com/library/prerelease/content/documentation/Swift/Conceptual/Swift_Programming_Language/index.html#//apple_ref/doc/uid/TP40014097&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The Swift Programming Language (Swift 3)&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;
&lt;h2 id=&quot;SiriKit&quot;&gt;SiriKit&lt;/h2&gt;&lt;p&gt;Apps 在特定的领域提供服务，可以使用 SiriKit来在 iOS中通过 Siri使用这些服务。 想要提供这些服务，需要创建一个或多个使用这些意图和意图 UI frameworks的   App extensions(app extensions using the Intents and Intents UI frameworks)。SiriKit提供如下领域的服务：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;音频或视频通话&lt;/li&gt;
&lt;li&gt;消息传递&lt;/li&gt;
&lt;li&gt;发送或接收付款&lt;/li&gt;
&lt;li&gt;搜索照片&lt;/li&gt;
&lt;li&gt;乘坐预定&lt;/li&gt;
&lt;li&gt;管理训练&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当用户发起一个包含了你所提供服务的请求时， SiriKit会向你的 extension发送一个意图对象( intent object )，它描述了用户了请求并且提供了与这个请求相关的所有数据。你使用这个意图对象来提供一个相关的响应对象(response object)，它包含了如何处理用户请求的详情。Siri通常处理所有的用户交互，但是你也可以使用一个 extension来提供自定义 UI，它包含来自你的 App中的品牌或者其他额外信息。&lt;/p&gt;
&lt;p&gt;SiriKit还提供了一个机制，你可以使用它来告诉系统发生在你的 App中的交互和活动。 当你告诉系统这些交互，系统会判断你的 App是否可以处理用户当前的请求，如果可以，就把这个请求传递给你的 App。 除了意图，SiriKit还定义了一个交互对象(interaction object)，它把意图(intent)和意图处理过程(intent-handling process)的信息相结合，包含开始时间和特定事件发生的持续时间等细节。如果你的 App注册为可以处理一个活动，这个活动具有一个相同的名称并且作为一个意图，系统可以启动你的 App，并且携带一个包含了意图的交互对象，即使你没有提供一个意图 App extension。&lt;/p&gt;
&lt;p&gt;Maps和 Siri 都提供乘坐预定，用户也可以使用 Maps来订餐。你的意图 extension处理源于 Maps的交互，同样地它处理来自 Siri的请求。如果你自定义用户界面，你的意图 UI extension还可以自行配置，取决于你的请求是来自 Siri 还是 Maps。&lt;/p&gt;
&lt;p&gt;为了学习如何支持 SiriKit来给用户提供使用服务的新途径，阅读 &lt;em&gt;&lt;a href=&quot;https://developer.apple.com/library/prerelease/content/documentation/Intents/Conceptual/SiriIntegrationGuide/index.html#//apple_ref/doc/uid/TP40016875&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SiriKit Programming Guide&lt;/a&gt;&lt;/em&gt;. 当你准备实现处理各种意图的 App extensions，参考 &lt;em&gt;&lt;a href=&quot;https://developer.apple.com/reference/intents&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Intents Framework Reference&lt;/a&gt;&lt;/em&gt; 和 &lt;em&gt;&lt;a href=&quot;https://developer.apple.com/reference/intentsui&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Intents UI Framework Reference&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;
&lt;h2 id=&quot;积极的建议&quot;&gt;积极的建议&lt;/h2&gt;&lt;p&gt;iOS 10引入了新的方式来来增强与你的 App的交互度(engagement)，通过帮助系统在适当的时机把你的 App推荐给用户。 如果你通过 App搜索你的 iOS 9 App，通过 Spotlight，Safari搜索结果，Handoff以及 Siri建议，允许用户访问你的 App深处的活动(activities)以及内容。 在 iOS 10之后，你可以提供用户在你的 App中做什么的信息，这有助于系统在额外的地方推广你的 App，比如键盘和 QuickType，Maps和 CarPlay，应用切换器(app switcher)，Siri交互和(媒体播放 Apps) 的锁屏界面。这些机会提高与系统的整合，它由一系列的技术支持，比如  &lt;code&gt;NSUserActivity&lt;/code&gt;，由 &lt;a href=&quot;http://schema.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Schema.org&lt;/a&gt;定义的 Web标记(web markup)，以及定义在 Core Spotlight，MapKit，UIKit，以及 Media Player框架中的 API。.&lt;/p&gt;
&lt;p&gt;在 iOS 10中，&lt;code&gt;NSUserActivity&lt;/code&gt; 对象包含  &lt;code&gt;mapItem&lt;/code&gt; 属性，该属性允许你提供可以在上下文(other contexts)使用的位置信息。比如，你的 App展示酒店信息，你可以使用 &lt;code&gt;mapItem&lt;/code&gt; 属性来保存用户正在浏览的酒店的位置信息，当用户切换到另外一个旅行规划 App，酒店的位置是自动可用的。如果你支持 App搜索，你可以使用 &lt;code&gt;CSSearchableItemAttributeSet&lt;/code&gt; 中新的基于文本的地址(text-based address)的属性，比如 &lt;code&gt;thoroughfare&lt;/code&gt; 和 &lt;code&gt;postalCode&lt;/code&gt;，来指定用户可能想要去的具体位置。注意，当你使用  &lt;code&gt;mapItem&lt;/code&gt; 属性，系统自动填充  &lt;code&gt;contentAttributeSet&lt;/code&gt;  属性。&lt;/p&gt;
&lt;p&gt;为了与系统共享一个位置，一定要指定 &lt;code&gt;latitude&lt;/code&gt; 和 &lt;code&gt;longitude&lt;/code&gt; 值，除了 &lt;code&gt;CSSearchableItemAttributeSet&lt;/code&gt; 中的地址属性。也建议你提供值给 &lt;code&gt;namedLocation&lt;/code&gt;，这样用户可以查看位置的名称，以及  &lt;code&gt;phoneNumbers&lt;/code&gt; 属性，以便用户可以使用 Siri来发起呼叫给指定位置。&lt;/p&gt;
&lt;p&gt;在 iOS 9中，将标记添加到你的网站上的结构数据来丰富内容，用户可以在 Spotlight和 Safari搜索结果中看到。在 iOS 10中，你可以使用  &lt;a href=&quot;http://schema.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Schema.org&lt;/a&gt; 定义的位置相关词汇，比如 &lt;a href=&quot;http://schema.org/PostalAddress&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PostalAddress&lt;/a&gt;，进一步提高用户体验。例如，如果用户查看你网站上描述的一个位置，系统可以在用户切换到 Maps中的时候建议相同的位置。注意 Safari 同时支持 JSON-LD 和 Microdata 编码的 &lt;a href=&quot;http://schema.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Schema.org&lt;/a&gt; 词汇。&lt;/p&gt;
&lt;p&gt;UIKit介绍了 &lt;code&gt;UITextInputTraits&lt;/code&gt; 协议中的  &lt;code&gt;textContentType&lt;/code&gt; 属性，它可以让你指定你希望用户输入文本区域的内容的语义。当你提供这些信息时，系统可以在某些情况下自动选择一个合适的键盘并且提高键盘修正和主动集成来自其他 App或者网站的信息。比如，如果你使用 &lt;code&gt;UITextContentTypeFullStreetAddress&lt;/code&gt; 来告诉系统你希望用户在文本区域中输入一个完整的地址，系统可以显示用户最近查看的位置地址。&lt;/p&gt;
&lt;p&gt;如果你的 App播放多媒体并且使用  &lt;code&gt;MPPlayableContentManager&lt;/code&gt; APIs， iOS 10 帮你在锁屏界面通过你的 App，使得用户可以查看专辑封面和播放多媒体。&lt;/p&gt;
&lt;p&gt;如果你的骑乘共享(ride-sharing) App使用  &lt;code&gt;MKDirectionsRequest&lt;/code&gt; API，iOS 10 可以在用户想要骑行的时候，在应用程序切换器(app switcher)中展示它。想要注册成一个骑行共享提供者，在 &lt;code&gt;Info.plist&lt;/code&gt; 文件中设置 &lt;a href=&quot;https://developer.apple.com/library/prerelease/content/documentation/General/Reference/InfoPlistKeyReference/Articles/iPhoneOSKeys.html#//apple_ref/doc/uid/TP40009252-SW33&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MKDirectionsApplicationSupportedModes&lt;/a&gt; 的值为 &lt;code&gt;MKDirectionsModeRideShare&lt;/code&gt; 。如果你的 App 只提供骑行共享，系统建议你的 App使用这样开头的文本  “Get a ride to…”；如果你的 App支持骑行共享和其他路由类型（如汽车或摩托车），系统建议你使用这样开头的文本  “Get directions to…”。注意 你收到的 &lt;code&gt;MKMapItem&lt;/code&gt; 对象可能不包含经度和纬度信息，需要地理编码。&lt;/p&gt;
&lt;h2 id=&quot;与_Messages_App_交互&quot;&gt;与 Messages App 交互&lt;/h2&gt;&lt;p&gt;在 iOS 10中，你可以创建 App extensions 来与 Messages App交互，使得用户可以发送文本，贴纸，媒体文件以及交互式消息。你也可以支持更新为每个收件人响应消息的交互式消息。你还可以创建两种类型的 App extensions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;贴纸包提供一系列的贴纸，用户可以添加到他们的信息内容中。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;iMessage app&lt;/em&gt; 让你在 Messages App 中展示一个自定义用户界面，创建一个标签的浏览器，包括一次对话中的文本，贴纸和媒体文件，并且创建，发送和更新消息交互。&lt;/p&gt;
&lt;p&gt; iMessage App也可以帮助用户搜索保存在你的 App中相关网站的图片，当它们处在  Messages App 中的时候。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;你可以创建一个贴纸包而无需编写任何代码：简单地拖拽图片到 Xcode中贴纸包文件夹内贴纸 asset 目录。&lt;/p&gt;
&lt;p&gt;为了开发一个  iMessage App，你可以使用 Messages 框架中的 API (&lt;code&gt;Messages.framework&lt;/code&gt;)。更多关于 Messages 框架，详见 &lt;em&gt;&lt;a href=&quot;https://developer.apple.com/reference/messages&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Messages Framework Reference&lt;/a&gt;&lt;/em&gt;. 对于创建 App Extensions的普遍信息，详见 &lt;em&gt;&lt;a href=&quot;https://developer.apple.com/library/prerelease/content/documentation/General/Conceptual/ExtensibilityPG/index.html#//apple_ref/doc/uid/TP40014214&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;App Extension Programming Guide&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;如果你的 App提供图片在 Messages中分享，你想要用户可以使用 Spotlight 的流行图片搜索  (即, “#images”) 来搜索图片，而不用离开 Messages App，首先创建一个 iMessage app。然后遵循下面步骤： &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;给你 App 的 entitlements 添加  &lt;code&gt;com.apple.developer.associated-domains&lt;/code&gt; 键。包括保存你想要搜索的图片的网站域名的一个列表。对于每个域，指定 &lt;code&gt;spotlight-image-search&lt;/code&gt; 服务。&lt;/li&gt;
&lt;li&gt;添加一个 &lt;code&gt;apple-app-site-association&lt;/code&gt; 文件到你的网站。为 &lt;code&gt;spotlight-image-search&lt;/code&gt; 服务添加一个字典，包含你的 app ID, 它是 team ID 或者 app ID 前缀，后跟  bundle ID。你可以指定多打500个路径和模式，应该包含 Spotlight 流行图片搜索索引。 (关于网站路径的一些实例，详见 &lt;a href=&quot;https://developer.apple.com/library/prerelease/content/documentation/General/Conceptual/AppSearch/UniversalLinks.html#//apple_ref/doc/uid/TP40016308-CH12-SW4&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Creating and Uploading the Association File&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;允许 Applebot 爬虫 (详见 &lt;a href=&quot;https://support.apple.com/en-us/HT204683&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;About Applebot&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;用户通知&quot;&gt;用户通知&lt;/h2&gt;&lt;p&gt;iOS 10 引入了用户通知框架(&lt;code&gt;UserNotifications.framework&lt;/code&gt;)，它支持本地和远程通知的发送和处理。你可以使用这个框架的类来安排基于特定条件的本地通知。比如时间或者位置。当它们被发送到用户设备的时候，App 和App extensions 可以使用这个框架来接收和修改本地和远程的通知。&lt;/p&gt;
&lt;p&gt;还介绍了在 iOS 10 中，用户通知 UI框架 (&lt;code&gt;UserNotificationsUI.framework&lt;/code&gt;) 允许你自定义显示在用户设备上的本地和远程推送通知。你使用这个框架来定义一个接收通知数据并且提供相应可视化表示的 App extension 。这个 extension也可以响应相关的自定义动作和通知。 &lt;/p&gt;
&lt;h2 id=&quot;语音识别&quot;&gt;语音识别&lt;/h2&gt;&lt;p&gt;iOS 10 引入了一个新的 API，支持连续语音识别和帮助你构建支持语音识别并且转换成文本的 App。使用  Speech 框架 (&lt;code&gt;Speech.framework&lt;/code&gt;) 中的 API，你可以执行实时语音转录和记录音频。例如，你可以得到一个语音识别器，开始简单的语音识别，代码如下所示： &lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; recognizer = &lt;span class=&quot;type&quot;&gt;SFSpeechRecognizer&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; request = &lt;span class=&quot;type&quot;&gt;SFSpeechURLRecognitionRequest&lt;/span&gt;(url: audioFileURL)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;recognizer?.recognitionTask(with: request, resultHandler: &amp;#123; (result, error) &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt; (result?.bestTranscription.formattedString)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;与访问其他类型的受保护数据一样，如日历，照片资料，进行语音识别需要用户的授权 (更多关于访问受保护的数据类，详见&lt;a href=&quot;https://developer.apple.com/library/prerelease/content/releasenotes/General/WhatsNewIniOS/Articles/iOS10.html#//apple_ref/doc/uid/TP40017084-SW3&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Security and Privacy Enhancements&lt;/a&gt;)。在语音识别的情况下，许可是必需的，因为数据被传递，并且暂时存储在苹果的服务器上，以提高语音识别的准确性。请求用户的权限，必须在 &lt;code&gt;Info.plist&lt;/code&gt; 文件中添加&lt;code&gt;NSSpeechRecognitionUsageDescription&lt;/code&gt;  键。&lt;/p&gt;
&lt;p&gt;当你在你的 App中采用语音识别，一定要向用户表明他们的语音将被识别，并且他们不应该使用敏感话语。&lt;/p&gt;
&lt;h2 id=&quot;广泛的颜色&quot;&gt;广泛的颜色&lt;/h2&gt;&lt;p&gt;贯穿系统的大多数图形框架，包括 Core Graphics, Core Image, Metal, 和 AVFoundation, 有大幅的改进来支持 extended-range 像素格式和 wide-gamut 颜色空间。通过将此行为扩展到整个图形栈中，它比以往任何时间更容易支持具有宽颜色显示的设备。此外，UIKit 使在新扩展的 sRGB颜色空间上工作标准化，因此很容易混合 sRGB和其他颜色，更广泛的色域没有明显的性能损失。&lt;/p&gt;
&lt;p&gt;这里有一些你开始使用广泛颜色的最佳实践。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在 iOS 10 中，&lt;a href=&quot;https://developer.apple.com/reference/uikit/uicolor&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;UIColor&lt;/a&gt; 类使用扩展的 sRGB 颜色空间，并且它的构造器(initializers)不再限制初始值在  &lt;code&gt;0.0&lt;/code&gt; 和 &lt;code&gt;1.0&lt;/code&gt; 之间。如果你的应用程序依赖于 UIKit来限制组件(component)值 (无论你是创建一个颜色或者一个颜色的组件值)，当你链接到 iOS 10的时候，你需要改变这些行为。 &lt;/li&gt;
&lt;li&gt;当在 iPad Pro (9.7 inch) 的  &lt;a href=&quot;https://developer.apple.com/reference/uikit/uiview&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;UIView&lt;/a&gt; 上执行自定义的绘制时，底层的绘图环境配置了一个扩展的 sRGB颜色空间。&lt;/li&gt;
&lt;li&gt;如果你的 App 渲染自定义的图像对象，使用新的  &lt;a href=&quot;https://developer.apple.com/reference/uikit/uigraphicsimagerenderer&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;UIGraphicsImageRenderer&lt;/a&gt; 类来控制目标位图是使用扩展范围(extended-range)还是标准范围 (standard-range) 格式。&lt;/li&gt;
&lt;li&gt;如果你使用较低级别的 API，比如 Core Graphics 和 Metal来执行你自己的图像处理，你需要使用一个扩展的颜色空间和一个支持16位浮点值的像素格式的组件值。当限制颜色值是必要的时候，你应该明确这样做。&lt;/li&gt;
&lt;li&gt;Core Graphics, Core Image,以及 Metal 性能着色器提供了新的选择，可以在颜色空间之间轻松转换颜色和图像。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;适应真实的色调显示&quot;&gt;适应真实的色调显示&lt;/h2&gt;&lt;p&gt;真实的色调显示使用环境光传感器自动调整显示器的颜色和强度，以配合当前环境的照明条件。为了确保你的 App可以与真实的色调提供的标准颜色变化很好的工作，在 &lt;code&gt;Info.plist&lt;/code&gt; 中添加新的 &lt;a href=&quot;https://developer.apple.com/library/prerelease/content/documentation/General/Reference/InfoPlistKeyReference/Articles/iPhoneOSKeys.html#//apple_ref/doc/uid/TP40009252-SW31&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;UIWhitePointAdaptivityStyle&lt;/a&gt; 键来描述你的 App的主要视觉内容。比如： &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果你的 App是一个照片编辑应用，颜色的准确性(fidelity)比自动调整环境白点(white point)更重要。在这种情况下，你可以使用 &lt;code&gt;UIWhitePointAdaptivityStylePhoto&lt;/code&gt; 方式来降低系统提供的真实色调变化的强度。&lt;/li&gt;
&lt;li&gt;如果你的 App是一个阅读应用，符合环境白点将为用户提供帮助。在这种情况下，你可以使用 &lt;code&gt;UIWhitePointAdaptivityStyleReading&lt;/code&gt; 方式来加强系统提供的真实色调变化的强度。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;App搜索_的改进&quot;&gt;App搜索 的改进&lt;/h2&gt;&lt;p&gt;iOS 10 和 Core Spotlight框架介绍了几个 App搜索的改进点： &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;应用内(In-app)搜索&lt;/li&gt;
&lt;li&gt;继续搜索(Search continuation)&lt;/li&gt;
&lt;li&gt;众包(crowdsourcing:是互联网带来的新的生产组织形式)与差分隐私(differential privacy)的深度链接&lt;/li&gt;
&lt;li&gt;可视化的验证结果&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;新的 &lt;code&gt;CSSearchQuery&lt;/code&gt; 类支持应用内内容搜索，使用现有的 Core Spotlight APIs。使用这个 API可以消除需要保持你自己单独的搜索索引，让你发挥 Spotlight的强大搜索技术和匹配规则，允许用户搜索内容不离开你的 App，就像他们在 Mail, Messages,和 Notes.&lt;/p&gt;
&lt;p&gt;在 iOS 9中，使用搜索 API(比如 Core Spotlight, &lt;a href=&quot;https://developer.apple.com/reference/foundation/nsuseractivity&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;NSUserActivity&lt;/a&gt; 和 web标记) 在你的 App中，让用户使用Spotlight 和 Safari搜索界面来搜索索引的内容。在 iOS 10中，你可以使用新的 Core Spotlight 符号，当用户打开你的 App时候，用户可以继续使用 Spotlight进行搜索。要启用这个功能，在 &lt;code&gt;Info.plist&lt;/code&gt; 文件中添加 &lt;code&gt;CoreSpotlightContinuation&lt;/code&gt; 键，并且设置它的值为  &lt;code&gt;YES&lt;/code&gt;，然后更新你的代码来处理一个  &lt;a href=&quot;https://developer.apple.com/reference/corespotlight/csquerycontinuationactiontype&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CSQueryContinuationActionType&lt;/a&gt; 类型的活动延续。在  &lt;a href=&quot;https://developer.apple.com/reference/uikit/uiapplicationdelegate/1623072-application&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;application:continueUserActivity:restorationHandler:&lt;/a&gt; 方法中收到的 &lt;a href=&quot;https://developer.apple.com/reference/foundation/nsuseractivity&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;NSUserActivity&lt;/a&gt; 对象中的用户信息字典包含了 &lt;a href=&quot;https://developer.apple.com/reference/corespotlight/cssearchquerystring&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CSSearchQueryString&lt;/a&gt; 键，它的值是一个字符串，表示用户的查询。&lt;/p&gt;
&lt;p&gt;iOS 10 引入了一个不同的私人方式来帮助提高你的 App的内容在搜索结果中的排名。 iOS 提交一部分差分隐私到 Apple的服务器随着用户使用你的 App 以及  &lt;a href=&quot;https://developer.apple.com/reference/foundation/nsuseractivity&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;NSUserActivity&lt;/a&gt; 对象包含深度链接地址并且它们的 &lt;a href=&quot;https://developer.apple.com/reference/foundation/nsuseractivity/1414701-eligibleforpublicindexing&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;eligibleForPublicIndexing&lt;/a&gt; 属性设置为  &lt;code&gt;YES&lt;/code&gt; 被提交到 iOS中。差分隐形散列允许 Apple统计流行的深度链接的频率，而不曾与用户关联的链接进行访问。&lt;/p&gt;
&lt;p&gt;当你使用 App 搜索 API 验证工具来测试你的网站标记和深度链接，现在展示你的结果的可视化表示，包括支持的标记，比如  &lt;a href=&quot;http://schema.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Schema.org&lt;/a&gt; 中定义的。验证工具可以帮你看到 Applebot web爬虫索引信息，比如标题，描述，URL和其他支持的元素。你可以在这里获取这个验证工具： &lt;a href=&quot;https://search.developer.apple.com/appsearch-validation-tool&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://search.developer.apple.com/appsearch-validation-tool&lt;/a&gt;. 更多关于支持深度链接和添加标记，详见： &lt;a href=&quot;https://developer.apple.com/library/prerelease/content/documentation/General/Conceptual/AppSearch/WebContent.html#//apple_ref/doc/uid/TP40016308-CH8&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Mark Up Web Content&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;学习如何让你的网站中的图片在 Messages App内可搜索，详见 &lt;a href=&quot;https://developer.apple.com/library/prerelease/content/releasenotes/General/WhatsNewIniOS/Articles/iOS10.html#//apple_ref/doc/uid/TP40017084-SW4&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Integrating with the Messages App&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Widget_的改进&quot;&gt;Widget 的改进&lt;/h2&gt;&lt;p&gt;iOS 10 为锁屏界面引入了一个新的设计，现在可以显示 widgets。为了保证你的 widget 在任何背景下看起来都不错，你可以适当地设置 &lt;a href=&quot;https://developer.apple.com/reference/uikit/uivibrancyeffect/1771278-widgetprimaryvibrancyeffect&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;widgetPrimaryVibrancyEffect&lt;/a&gt; 或者 &lt;a href=&quot;https://developer.apple.com/reference/uikit/uivibrancyeffect/1771277-widgetsecondaryvibrancyeffect&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;widgetSecondaryVibrancyEffect&lt;/a&gt;(使用这些属性取代已废弃的 &lt;a href=&quot;https://developer.apple.com/reference/uikit/uivibrancyeffect/1613917-notificationcentervibrancyeffect&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;notificationCenterVibrancyEffect&lt;/a&gt; 属性)。此外， widgets现在包括显示模式(由 &lt;a href=&quot;https://developer.apple.com/reference/notificationcenter/ncwidgetdisplaymode&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;NCWidgetDisplayMode&lt;/a&gt; 表示)的概念，它可以让你描述有多少内容是可用的，并允许用户选择一个紧凑或者扩展型的视图。 &lt;/p&gt;
&lt;h2 id=&quot;Apple_Pay_的改进&quot;&gt;Apple Pay 的改进&lt;/h2&gt;&lt;p&gt;在 iOS 10中，用户可以通过 Siri和 Maps使用网页版的 Apple Pay 来便捷安全的完成支付。对于开发者来说， iOS 10 引入了新的 API，你可以在代码中使用运行在 iOS和  watchOS上，支持动态支付网络的能力和一个新的沙盒测试环境。&lt;/p&gt;
&lt;p&gt;iOS 10 引入了新的 API，帮助你将 Apple Pay 直接引入你的网站。当你在你的网站支持 Apple Pay，用户在 iOS或者 OS X上通过 Safari浏览的时候，可以通过它们的 iPhone或 Apple Watch来使用 Apple Pay上的信用卡进行支付。 详见 &lt;a href=&quot;https://developer.apple.com/reference/applepayjs&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;em&gt;ApplePay JS Framework Reference&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt; PassKit框架 (&lt;code&gt;PassKit.framework&lt;/code&gt;) 介绍了让你在 UIKit不可用的地方支持 Apple Pay的 API。具体来说， &lt;a href=&quot;https://developer.apple.com/reference/passkit/pkpaymentauthorizationcontroller&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PKPaymentAuthorizationController&lt;/a&gt; 和 &lt;a href=&quot;https://developer.apple.com/reference/passkit/pkpaymentauthorizationcontrollerdelegate&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PKPaymentAuthorizationControllerDelegate&lt;/a&gt; 使得  &lt;a href=&quot;https://developer.apple.com/reference/passkit/pkpaymentauthorizationviewcontroller&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PKPaymentAuthorizationViewController&lt;/a&gt; 提供的功能以及它的 delegate 可用，而不需要 UIKit。尽管新的 API 需要在特定的意图下在 watchOS上提供 Apple Pay，还是建议你在代码的任何地方采用它。这样你就可以用一套基础代码来广泛提供 Apple Pay支持。(更多关于意图和 Siri集成，详见 &lt;a href=&quot;https://developer.apple.com/library/prerelease/content/releasenotes/General/WhatsNewIniOS/Articles/iOS10.html#//apple_ref/doc/uid/TP40017084-SW5&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SiriKit&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt; PassKit 框架还增加了新的功能，让信用卡发行机构在它们的 App中展示他们的信用卡。具体来说， &lt;code&gt;PKPaymentButtonTypeInStore&lt;/code&gt; 按钮类型允许你为信用卡展示一个 Apple Pay 按钮，  &lt;code&gt;presentPaymentPass:&lt;/code&gt; 方法允许你以编程方式展示信用卡。 ( &lt;code&gt;presentPaymentPass:&lt;/code&gt; 方法定义在  &lt;a href=&quot;https://developer.apple.com/reference/passkit/pkpasslibrary&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PKPassLibrary&lt;/a&gt;中)。&lt;/p&gt;
&lt;p&gt;当一个新的支付网络可用时，你的 App可用自动支持新的网络，而不需要修改和重新编译你的 App。&lt;a href=&quot;https://developer.apple.com/reference/passkit/pkpaymentrequest/1833288-availablenetworks&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;availableNetworks&lt;/a&gt; 方法允许你在运行时发现用户设备可用的网络。此外， &lt;a href=&quot;https://developer.apple.com/reference/passkit/pkpaymentrequest/1619329-supportednetworks&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;supportedNetworks&lt;/a&gt; 属性被扩展了，以便可以携带一些支付服务提供商的名字作为参数。然后你的 App自动支持任何支付提供商支持的网络。详见&lt;a href=&quot;https://developer.apple.com/apple-pay/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://developer.apple.com/apple-pay/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;iOS 10 引入了一个新的测试环境，它允许你直接在设备上提供测试信用卡。测试环境返回加密后的测试支付数据。要使用这种环境，遵循以下步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在 iTunes Connect上创建一个测试 iCloud账号&lt;/li&gt;
&lt;li&gt;在你的设备上登录该账号&lt;/li&gt;
&lt;li&gt;设置测试所需的区域&lt;/li&gt;
&lt;li&gt;使用 &lt;a href=&quot;https://developer.apple.com/apple-pay/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://developer.apple.com/apple-pay/&lt;/a&gt; 上列举的测试信用卡&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;注意:&lt;/strong&gt; 当你切换 iCloud账号，环境自动切换。你还必须在实际生产环境中测试支付。&lt;/p&gt;
&lt;h2 id=&quot;安全和隐私的改进&quot;&gt;安全和隐私的改进&lt;/h2&gt;&lt;p&gt;iOS 10 引入了一些修改和补充，帮助你提高你的代码的安全和维护用户数据的隐私。更多关于这方面的内容，详见 &lt;a href=&quot;https://developer.apple.com/security/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Security&lt;/a&gt; .&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Info.plist&lt;/code&gt; 文件中新的 &lt;code&gt;NSAllowsArbitraryLoadsInWebContent&lt;/code&gt; 键，提供了一个便捷的方式来允许任意的 web页面加载任务，同时保留 ATS保护你的 App的其余部分。&lt;/li&gt;
&lt;li&gt;SecKey API包括不对称密钥生成的改进。使用 SecKey API 替代已经弃用的 CDSA(Common Data Security Architecture: 通用数据安全架构) API。&lt;/li&gt;
&lt;li&gt;RC4 对称加密套件现在默认禁用所有的 SSL/TLS 连接，以及 SSLv3 不再支持安全传输 API。建议你尽快停止使用  SHA-1和 3DES 加密算法。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.apple.com/reference/uikit/uipasteboard&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;UIPasteboard&lt;/a&gt; 类支持剪贴板功能，该功能允许用户设置之间复制和粘贴，包括 API可以用来限制一个纸板到特定设备和设置到达过期时间戳后，纸板被清除。此外，命名过的纸板不再重复出现，取而代之的是，你应该使用共享的容器，以及“发现”纸板（也就是说，纸板被  &lt;a href=&quot;https://developer.apple.com/reference/uikit/uipasteboardnamefind&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;UIPasteboardNameFind&lt;/a&gt;  常数定义）是无效的。&lt;/li&gt;
&lt;li&gt;你必须静态声明你的应用程序使用受保护的数据类，通过在 &lt;code&gt;Info.plist&lt;/code&gt; 文件中包含相关的目的字符串键。例如，你必须包含 &lt;a href=&quot;https://developer.apple.com/library/prerelease/content/documentation/General/Reference/InfoPlistKeyReference/Articles/CocoaKeys.html#//apple_ref/doc/uid/TP40009251-SW15&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;NSCalendarsUsageDescription&lt;/a&gt; 键来访问用户日历的数据。如果你不包含相关的目的字符串键，当你试图访问相关数据的时候，你的 App会退出。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;CallKit&quot;&gt;CallKit&lt;/h2&gt;&lt;p&gt; CallKit 框架 (&lt;code&gt;CallKit.framework&lt;/code&gt;) 让  VoIP App与 iPhone UI相结合，给用户一个很棒的体验。使用这个框架来让用户在锁屏界面查看和接听到来的 VoIP电话，以及管理手机上 Favorites和 Recents视图上的联系人。&lt;/p&gt;
&lt;p&gt;CallKit 还介绍了 App extensions，允许来电拦截并且来电识别。你可以创建一个 App extension，将一个电话号码和一个名称联系起来，或者告诉系统某个号码需要被拦截。&lt;/p&gt;
&lt;h2 id=&quot;News_Publisher_的改进&quot;&gt;News Publisher 的改进&lt;/h2&gt;&lt;p&gt;News Publisher 可以使用 Apple News格式，很容易地提供设计精美的新闻，杂志和网络内容给 Apple News。任何人都可以注册，从主要的杂志或者新闻机构，到独立的出版商和博客。开始或学习更多关于最近的更新，访问  &lt;a href=&quot;https://newsresources.apple.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://newsresources.apple.com&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Video_Subscriber_Account&quot;&gt;Video Subscriber Account&lt;/h2&gt;&lt;p&gt;iOS 10 引入  Video Subscriber Account 框架 (&lt;code&gt;VideoSubscriberAccount.framework&lt;/code&gt;) 来帮助 App支持支持身份验证流或验证视频点播(也称为 TV)与他们的有线或卫星 TV提供商进行身份验证。使用这个框架的 API可以帮助你支持一个单一的登录体验，用户登录一次解锁访问所有的视频应用程序订阅支持。&lt;/p&gt;
&lt;h2 id=&quot;App_Extensions&quot;&gt;App Extensions&lt;/h2&gt;&lt;p&gt;iOS 10 引入了几个可以创建 App extension的新的 extension points，比如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Call Directory&lt;/li&gt;
&lt;li&gt;Intents&lt;/li&gt;
&lt;li&gt;Intents UI&lt;/li&gt;
&lt;li&gt;Messages&lt;/li&gt;
&lt;li&gt;Notification Content&lt;/li&gt;
&lt;li&gt;Notification Service&lt;/li&gt;
&lt;li&gt;Sticker Pack&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;此外，iOS 10包含了如下的第三方键盘 app extensions的改进：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;你可以使用 &lt;code&gt;UITextDocumentProxy&lt;/code&gt;  类中的  &lt;code&gt;documentInputMode&lt;/code&gt; 属性，来自动检测文档的输入语言，并且改变你的键盘 extension来符合这个语言(如果支持的话)。当你用这种方式决定输入的语言时， 你可以做每一种语言的键盘切换，比如为 Messages内建的。&lt;/li&gt;
&lt;li&gt;新的 &lt;code&gt;handleInputModeListFromView:withEvent:&lt;/code&gt; 方法让键盘 extension 显示系统的键盘选择菜单(即地球标志的菜单).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;键盘 extension 必须放置地球标志和系统标志相同的位置。此外，如果你需要提供一个自定义的按键来启动键盘设置，例如，你应该把这个按键放在系统键盘听写键的相同位置。&lt;/p&gt;
&lt;p&gt;更多关于 App extensions，详见 &lt;a href=&quot;https://developer.apple.com/library/prerelease/content/documentation/General/Conceptual/ExtensibilityPG/index.html#//apple_ref/doc/uid/TP40014214&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;em&gt;App Extension Programming Guide&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
</content:encoded>
      
      <comments>http://http://colin1994.github.io/2016/06/14/What's_New_in_iOS_10.0_zh_0/#disqus_thread</comments>
    </item>
    
    <item>
      <title>TDD 学习总结（Swift 实践）</title>
      <link>http://http://colin1994.github.io/2016/06/03/TDD-With-Swift/</link>
      <guid>http://http://colin1994.github.io/2016/06/03/TDD-With-Swift/</guid>
      <pubDate>Fri, 03 Jun 2016 11:33:40 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt;花了几天时间，看完了 &lt;a href=&quot;https://www.packtpub.com/application-development/test-driven-ios-development-swift&quot;&gt;《Test-Driven iOS Development with Swift》&lt;/a&gt; 这本书，虽然只有短短 500页的 epub，但是讲解的很生动透彻，全书围绕一个 &lt;code&gt;ToDo&lt;/code&gt; 应用展开，讲解了 &lt;code&gt;Test-Driven Development （TDD，即测试驱动开发）&lt;/code&gt; 的实际应用，让我对 TDD 有了更全面的认识。故此，开坑记录之~&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://7xkc7a.com1.z0.glb.clouddn.com/TDDTDDFigure.png&quot; alt=&quot;TDD&quot;&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded>&lt;blockquote&gt;
&lt;p&gt;花了几天时间，看完了 &lt;a href=&quot;https://www.packtpub.com/application-development/test-driven-ios-development-swift&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《Test-Driven iOS Development with Swift》&lt;/a&gt; 这本书，虽然只有短短 500页的 epub，但是讲解的很生动透彻，全书围绕一个 &lt;code&gt;ToDo&lt;/code&gt; 应用展开，讲解了 &lt;code&gt;Test-Driven Development （TDD，即测试驱动开发）&lt;/code&gt; 的实际应用，让我对 TDD 有了更全面的认识。故此，开坑记录之~&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://7xkc7a.com1.z0.glb.clouddn.com/TDDTDDFigure.png&quot; alt=&quot;TDD&quot;&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;什么是_TDD&quot;&gt;什么是 TDD&lt;/h2&gt;&lt;p&gt;测试驱动开发(TDD)是极限编程的重要特点，它以不断的测试推动代码的开发，既简化了代码，又保证了软件质量。&lt;/p&gt;
&lt;p&gt;测试驱动开发的基本思想就是在开发功能代码之前，先编写测试代码。也就是说在明确要开发某个功能后，首先思考如何对这个功能进行测试，并完成测试代码的编写，然后编写相关的代码满足这些测试用例。然后循环进行添加其他功能，直到完全部功能的开发。&lt;/p&gt;
&lt;p&gt;OK，概括来说，TDD 的开发过程可以用上图来描述：Red，Green，Refactor。&lt;/p&gt;
&lt;p&gt;翻译过来就是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;编写测试用例，测试不通过。（红色 Error）&lt;/li&gt;
&lt;li&gt;编写代码实现功能，测试通过。（绿色 Success）&lt;/li&gt;
&lt;li&gt;重构优化代码。（Refactor）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;再详细点，测试驱动开发的基本过程如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;明确当前要完成的功能。记录成一个 TODO 列表。&lt;/li&gt;
&lt;li&gt;快速完成针对此功能的测试用例编写。&lt;/li&gt;
&lt;li&gt;测试代码编译不通过。&lt;/li&gt;
&lt;li&gt;编写对应的功能代码。&lt;/li&gt;
&lt;li&gt;测试通过。&lt;/li&gt;
&lt;li&gt;对代码进行重构，并保证测试通过。&lt;/li&gt;
&lt;li&gt;循环完成所有功能的开发。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;怎么样，简单吧~&lt;/p&gt;
&lt;h2 id=&quot;是否该用_TDD&quot;&gt;是否该用 TDD&lt;/h2&gt;&lt;p&gt;简单是简单，但是很明显的，开发前期，工作量绝对不是 1+1 那么简单，那么是否该用 TDD 呢？对此，我不做过多的阐述。世上并没有放之四海皆准的法则，TDD 好坏在于你的判断，方法论的主体在于使用的人，本文并不会给你一个完美的答案，这需要你自己在实践中取舍。接下去，我将列举 TDD 目前公认的一些优缺点，以及使用原则，加深大家对 TDD 的理解。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TDD 开发的优点：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以保证代码的质量。可以对自己的所需要的业务功能的每一步设计进行验证，并得到正确的结果，减少bug的出现的，特别对于复杂业务逻辑的项目，以小步慢走的方式，避免后期繁重的测试和维护工作。&lt;/li&gt;
&lt;li&gt;找到了重构的信心，必要时候你还可以痛痛快快的并且满怀信心的对代码做一场大的变革。这样我们的代码变得干净了，扩展性、可以维护性以及易理解性纷至沓来。&lt;/li&gt;
&lt;li&gt;在团队建设中能够进行分工，以可执行的形式文档化你的需求，迫使你分清职责隔离依赖以驱动你的设计，编织安全网以便将Bug扼杀在在摇篮状态，防止其逃逸。不同于传统开发（传统的开发人员开发的软件的测试是为了找出已经逃逸得bug，可能这个bug已经长成了毒瘤）。注：这两种活动都是必要的，而且毫不冲突，互为补充。&lt;/li&gt;
&lt;li&gt;帮助你养成一个新的思维习惯，不光在你编程的道路上，在你的工作和生活中，你慢慢的会把自己的需求进行分析设计并不断地验证，最终更好去实现自己的人生目标。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;TDD 开发的缺点：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于测试驱动不熟练或者喜欢偷懒的的人员，加大了代码的编写量，测试代码是系统代码的两倍或更多。&lt;/li&gt;
&lt;li&gt;可能不适合时间很紧的软件开发，更适合于产品和平台的开发。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;TDD 原则：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;独立测试：&lt;/strong&gt;不同代码的测试应该相互独立，一个类对应一个测试类，一个函数对应一个测试函数。用例也应各自独立，每个用例不能使用其他用例的结果数据，结果也不能依赖于用例执行顺序。 一个角色：开发过程包含多种工作，如：编写测试代码、编写产品代码、代码重构等。做不同的工作时，应专注于当前的角色，不要过多考虑其他方面的细节。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;测试列表：&lt;/strong&gt;代码的功能点可能很多，并且需求可能是陆续出现的，任何阶段想添加功能时，应把相关功能点加到测试列表中，然后才能继续手头工作，避免疏漏。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;测试驱动：&lt;/strong&gt;即利用测试来驱动开发，是TDD的核心。要实现某个功能，要编写某个类或某个函数，应首先编写测试代码，明确这个类、这个函数如何使用，如何测试，然后在对其进行设计、编码。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;先写断言：&lt;/strong&gt;编写测试代码时，应该首先编写判断代码功能的断言语句，然后编写必要的辅助语句。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;可测试性：&lt;/strong&gt;产品代码设计、开发时的应尽可能提高可测试性。每个代码单元的功能应该比较单纯，“各家自扫门前雪”，每个类、每个函数应该只做它该做的事，不要弄成大杂烩。尤其是增加新功能时，不要为了图一时之便，随便在原有代码中添加功能。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;及时重构：&lt;/strong&gt;对结构不合理，重复等“味道”不好的代码，在测试通过后，应及时进行重构。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;小步前进：&lt;/strong&gt;软件开发是复杂性非常高的工作，小步前进是降低复杂性的好办法。&lt;/p&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;看到这里，如果你还觉得，有必要体验一把 TDD，那么接着往下看，我将通过一个简单的例子，走一遍 TDD 开发的流程，加深大家对 TDD 的了解，也为 iOS 中应用 TDD 做个入门介绍。&lt;/p&gt;
&lt;h2 id=&quot;iOS_中如何使用_TDD&quot;&gt;iOS 中如何使用 TDD&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Apple一直致力于在iOS开发中集成更加方便和可用的测试，在Xcode 5中，新的IDE和SDK引入了XCTest来替代原来的SenTestingKit，并且取消了新建工程时的“包括单元测试”的可选项（同样待遇的还有使用ARC的可选项）。新工程将自动包含测试的target，并且相关框架也搭建完毕，可以说测试终于摆脱了iOS开发中“二等公民”的地位，现在已经变得和产品代码一样重要了。  —————— 喵神&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;简单 Mark 下 TDD 在 Xcode 中的历程：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In 1998, the Swiss company Sen:te developed OCUnit, a testing framework for Objective-C (hence, the OC prefix). OCUnit was a port of SUnit, a testing framework that Kent Beck had written for Smalltalk in 1994.&lt;/li&gt;
&lt;li&gt;With Xcode 2.1, Apple added OCUnit to Xcode.&lt;/li&gt;
&lt;li&gt;In 2008, OCUnit was integrated into the iPhone SDK 2.2 to allow unit testing of iPhone apps.&lt;/li&gt;
&lt;li&gt;Four years later, OCUnit was renamed XCUnit (XC stands for Xcode).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;既然 Xcode 为我们内置了这么方便的 XCTest，我们没理由不好好使用阿~&lt;/p&gt;
&lt;p&gt;接下去通过实现一个简单的功能：把句子中每个单词的首字母转成大写字母，来走一遍 TDD 的流程。话不多说，开车了~&lt;/p&gt;
&lt;h3 id=&quot;1-_创建工程&quot;&gt;1. 创建工程&lt;/h3&gt;&lt;p&gt;这里创建一个常规的 iOS 工程，记得 &lt;code&gt;“ Include Unit Tests”&lt;/code&gt; 即可，语言我们选择 &lt;code&gt;Swift&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xkc7a.com1.z0.glb.clouddn.com/TDDdemo_0.jpeg&quot; alt=&quot;demo_0&quot;&gt;&lt;/p&gt;
&lt;p&gt;创建完毕后的工程目录如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xkc7a.com1.z0.glb.clouddn.com/TDDdemo_3.jpeg&quot; alt=&quot;demo_1&quot;&gt;&lt;/p&gt;
&lt;p&gt;默认为我们创建了 &lt;code&gt;TDDDemoTests.swift&lt;/code&gt; 文件，这里就是我们编写测试用例的地方。打开该文件，如下所示：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//  TDDDemoTests.swift&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//  TDDDemoTests&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//  Created by Colin on 16/6/3.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//  Copyright © 2016年 Colin. All rights reserved.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; XCTest&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@testable&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; TDDDemo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;TDDDemoTests&lt;/span&gt;: &lt;span class=&quot;title&quot;&gt;XCTestCase&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setUp&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.setUp()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// Put setup code here. This method is called before the invocation of each test method in the class.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;tearDown&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// Put teardown code here. This method is called after the invocation of each test method in the class.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.tearDown()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;testExample&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// This is an example of a functional test case.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// Use XCTAssert and related functions to verify your tests produce the correct results.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;testPerformanceExample&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// This is an example of a performance test case.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.measureBlock &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// Put the code you want to measure the time of here.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其中，有几个地方需要说明一下：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; XCTest&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@testable&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; TDDDemo&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;每一个测试用例都需要引入 &lt;code&gt;XCTest&lt;/code&gt; 框架，它定义了我们需要的 &lt;code&gt;XCTestCase&lt;/code&gt; 类，以及之后会用到的一些断言，比如 &lt;code&gt;XCTAssertEqual&lt;/code&gt; 等。另外，还需要手动导入 &lt;code&gt;TDDDemo&lt;/code&gt; 模块，我们之后的相关代码都会在 &lt;code&gt;TDDDemo&lt;/code&gt; 中编写，但是默认情况下，类，结构体，枚举以及它们的方法，都是内联的（&lt;code&gt;internal&lt;/code&gt;），这意味着它们所处模块外无法直接访问到它们。所以在此之外的测试代码无法访问到它们，故而需要使用 &lt;code&gt;@testable&lt;/code&gt; 关键字来让测试代码能访问它们。&lt;/p&gt;
&lt;p&gt;再看 &lt;code&gt;setUp&lt;/code&gt; 方法和 &lt;code&gt;tearDown&lt;/code&gt; 。在每个测试用例调用前，都会先调用 &lt;code&gt;setUp&lt;/code&gt; 方法，在每个测试用例执行结束后，都会调用 &lt;code&gt;tearDown&lt;/code&gt; 方法，大体流程就是：setUp — test case — tearDown — setUp — test case — tearDown …. 所以我们一般在 &lt;code&gt;setUp&lt;/code&gt; 中做一些初始化操作，在 &lt;code&gt;tearDown&lt;/code&gt;  做一些清除释放操作。&lt;/p&gt;
&lt;p&gt;另外，每一个测试方法都需要以 &lt;code&gt;test&lt;/code&gt; 开头，这样 Xcode 才能自动识别出它。比如默认提供的 &lt;code&gt;testExample&lt;/code&gt; 和 &lt;code&gt;testPerformanceExample&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;再有，这里建议在 Bulid 开始的时候，新建一个导航栏，并且打印 Build Log，这样我们能更直观知道发生了什么，哪里出错了。具体设置如下： &lt;strong&gt;Xcode | Preference | Behaviors&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;如图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xkc7a.com1.z0.glb.clouddn.com/TDDdemo_1.jpeg&quot; alt=&quot;demo_2&quot;&gt;&lt;/p&gt;
&lt;p&gt;现在 &lt;strong&gt;Command + U&lt;/strong&gt;，执行测试。毋庸置疑，测试通过（毕竟啥都还没开始写…）。你会看到如下界面：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xkc7a.com1.z0.glb.clouddn.com/TDDdemo_4.jpeg&quot; alt=&quot;demo_3&quot;&gt;&lt;/p&gt;
&lt;p&gt;左边的  &lt;strong&gt;Test Navigation&lt;/strong&gt; 列举了所有的测试用例以及对应的测试结果。中间的编辑区展示了 &lt;strong&gt;Bulid&lt;/strong&gt; 过程中具体做了什么，以及 &lt;strong&gt;Build&lt;/strong&gt; 结果。&lt;/p&gt;
&lt;p&gt;哦，对了。还有一处设置也很有用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Edit Scheme | Test&lt;/strong&gt; ，可以看到右边列举了所有参与测试的用例。当然我们知道，每个用例的测试都是需要时间的，如果想对某个用例单独测试，或者不想测试某个用例，相应的勾选和去选就可以了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xkc7a.com1.z0.glb.clouddn.com/TDDdemo_5.jpeg&quot; alt=&quot;demo_4&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;2-_编写测试用例&quot;&gt;2. 编写测试用例&lt;/h3&gt;&lt;p&gt;好了，万事俱备，是时候展示真正的技术了！&lt;/p&gt;
&lt;p&gt;删除默认的 &lt;code&gt;TDDDemoTests.swift&lt;/code&gt; 文件，重新创建一个 &lt;code&gt;CapitalTest.swift&lt;/code&gt; 文件。在 &lt;code&gt;TDDDemoTests&lt;/code&gt; 分组中，&lt;strong&gt;File | New | File | iOS | Source | Unit Test Case Class&lt;/strong&gt; ，创建一个名为 &lt;strong&gt;CapitalTest&lt;/strong&gt; 并 继承自 &lt;strong&gt;XCTestCase&lt;/strong&gt; 的类。如图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xkc7a.com1.z0.glb.clouddn.com/TDDdemo_6.jpeg&quot; alt=&quot;demo_5&quot;&gt;&lt;/p&gt;
&lt;p&gt;删掉无用的 &lt;strong&gt;testExample，testPerformanceExample&lt;/strong&gt; 方法。&lt;/p&gt;
&lt;p&gt;引用 &lt;strong&gt;TDDDemo&lt;/strong&gt; 类。&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@testable&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; TDDDemo&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;编写测试用例：&lt;/p&gt;
&lt;p&gt;这里我们要做的是实现句子中单词首字母的大写转换，所以只要写个测试用例验证首字母是否都是大写即可。&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;testMakeHeadline_ReturnsStringWithEachWordStartCapital&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; viewController = &lt;span class=&quot;type&quot;&gt;ViewController&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; string = &lt;span class=&quot;string&quot;&gt;&quot;this is A test headline&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; headline = viewController.makeHeadline(string)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;XCTAssertEqual&lt;/span&gt;(headline, &lt;span class=&quot;string&quot;&gt;&quot;This Is A Test Headline&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;很简单，我们希望有这样一个函数 &lt;code&gt;makeHeadline&lt;/code&gt;，它接受一个 &lt;strong&gt;String&lt;/strong&gt; 类型的参数，并返回转换成功的  &lt;strong&gt;String&lt;/strong&gt; 类型的结果。然后利用 &lt;code&gt;XCTAssertEqual&lt;/code&gt; 判断一下，当左右值相同时，它才会通过。&lt;/p&gt;
&lt;p&gt;很显然，这个时候会保持，且测试不通过，因为我们的 &lt;code&gt;makeHeadline&lt;/code&gt; 函数根本就不存在，现在就去实现它。&lt;/p&gt;
&lt;p&gt;回到 &lt;strong&gt;ViewController.swift&lt;/strong&gt; 中，添加如下方法。&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;makeHeadline&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(string: String)&lt;/span&gt;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;This Is A Test Headline&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;Command + U&lt;/strong&gt; 走一遍，恭喜你，测试走通了。全部显示绿色的 Build succeeded。（眼尖的朋友可能发现问题了，不过不急，至少目前为止，我们的测试用例已经通过了~）&lt;/p&gt;
&lt;p&gt;然后接下去，做的就是重构了。虽然只写了几行代码，但是还是有优化空间的。&lt;/p&gt;
&lt;p&gt;我们之前提到过，&lt;strong&gt;setUp&lt;/strong&gt; 方法将在每个 &lt;strong&gt;test case&lt;/strong&gt; 调用前都自动被调用，所以这里可以放一些初始化相关操作。我们这里初始化了一个 &lt;strong&gt;ViewController&lt;/strong&gt; 类型的对象，不出意外的话，在每个测试用例中中需要初始化一个，这无疑是很麻烦的。所以我们可以把 &lt;strong&gt;viewController&lt;/strong&gt; 提出来，当做 &lt;strong&gt;CapitalTest&lt;/strong&gt; 类的一个属性，然后在 &lt;strong&gt;setUp&lt;/strong&gt; 方法中去初始化它。具体如下：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;CapitalTest&lt;/span&gt;: &lt;span class=&quot;title&quot;&gt;XCTestCase&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; viewController: &lt;span class=&quot;type&quot;&gt;ViewController&lt;/span&gt;!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setUp&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.setUp()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        viewController = &lt;span class=&quot;type&quot;&gt;ViewController&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;/////////&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;接下去，我们需要在编写另外一个测试用例，以保证第一个测试用例并不是偶然的。这也是我们在实际开发中需要做的，列举多个测试用例，来保证某个功能确实通过了。&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;testMakeHeadline_ReturnsStringWithEachWordStartCapital2&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; string = &lt;span class=&quot;string&quot;&gt;&quot;Here is another Example&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; headline = viewController.makeHeadline(string)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;XCTAssertEqual&lt;/span&gt;(headline, &lt;span class=&quot;string&quot;&gt;&quot;Here Is Another Example&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;再次 &lt;strong&gt;Command + U&lt;/strong&gt;，不出意外，第一个还是通过，第二个则显示失败。原因大家都懂~&lt;/p&gt;
&lt;p&gt;接下去修改 &lt;code&gt;makeHeadline&lt;/code&gt; 的具体实现：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;makeHeadline&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(string: String)&lt;/span&gt;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 1. 通过“ ”分割字符串, 存入数组&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; words = string.componentsSeparatedByString(&lt;span class=&quot;string&quot;&gt;&quot; &quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 2. 遍历数组, 移除首字母, 并插入对应的大写字母&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; headline = &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; word &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; words &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; firstCharacter = word.removeAtIndex(word.startIndex)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        headline += &lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;subst&quot;&gt;\(String(firstCharacter)&lt;/span&gt;.uppercaseString)&lt;span class=&quot;subst&quot;&gt;\(word)&lt;/span&gt; &quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 3. 移除最后的“ ”&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    headline.removeAtIndex(headline.endIndex.predecessor())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; headline&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;代码很简单，注释也写的很清楚，这里就不累述了。再次 &lt;strong&gt;Command + U&lt;/strong&gt;，bingo~ 通过了。&lt;/p&gt;
&lt;p&gt;接下去再看看，是否有优化的空间。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;我们的测试用例描述的其实不太清楚，几个变量之间的关系比较凌乱。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;makeHeadline&lt;/strong&gt; 函数的实现太 Objc 化了，没有用上 Swift 里的高级功能。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;OK，既然不好，那就优化一下呗~&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;testMakeHeadline_ReturnsStringWithEachWordStartCapital&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; inputString =       &lt;span class=&quot;string&quot;&gt;&quot;this is A test headline&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; expectedHeadline =  &lt;span class=&quot;string&quot;&gt;&quot;This Is A Test Headline&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; result = viewController.makeHeadline(inputString)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;XCTAssertEqual&lt;/span&gt;(result, expectedHeadline)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;makeHeadline&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(string: String)&lt;/span&gt;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; words = string.componentsSeparatedByString(&lt;span class=&quot;string&quot;&gt;&quot; &quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; headline = words.&lt;span class=&quot;built_in&quot;&gt;map&lt;/span&gt; &amp;#123; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; word) -&amp;gt; &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; firstCharacter = word.removeAtIndex(word.startIndex)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;subst&quot;&gt;\(String(firstCharacter)&lt;/span&gt;.uppercaseString)&lt;span class=&quot;subst&quot;&gt;\(word)&lt;/span&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &amp;#125;.joinWithSeparator(&lt;span class=&quot;string&quot;&gt;&quot; &quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; headline&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;再次  &lt;strong&gt;Command + U&lt;/strong&gt;，确保测试通过。至此，这个简单的例子算是介绍完了。&lt;/p&gt;
&lt;p&gt;虽然例子简单，只实现了一个功能，但是 TDD 相关的东西，具体流程也都涉及了，剩下的，只是重复这些操作直至完成所有需求。&lt;/p&gt;
&lt;p&gt;如果觉得这个例子太简单了，没学够，建议看下 &lt;a href=&quot;https://www.packtpub.com/application-development/test-driven-ios-development-swift&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《Test-Driven iOS Development with Swift》&lt;/a&gt;  一书中的 &lt;a href=&quot;http://www.packtpub.com/code_download/23832&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ToDo 源码&lt;/a&gt;，大篇幅介绍 TDD 的实际应用。&lt;/p&gt;
&lt;p&gt;Have Fun~&lt;/p&gt;
&lt;h2 id=&quot;参考链接&quot;&gt;参考链接&lt;/h2&gt;&lt;p&gt;由衷感谢以下作者的贡献，文中出现的一些理论阐述，有从相关文章中摘取。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://onevcat.com/2014/02/ios-test-with-kiwi/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;TDD的iOS开发初步以及Kiwi使用入门&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.ibm.com/developerworks/cn/linux/l-tdd/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;浅谈测试驱动开发（TDD）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/whitewolf/p/4205761.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;TDD(测试驱动开发)培训录&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.packtpub.com/application-development/test-driven-ios-development-swift&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《Test-Driven iOS Development with Swift》&lt;/a&gt; &lt;/p&gt;
</content:encoded>
      
      <comments>http://http://colin1994.github.io/2016/06/03/TDD-With-Swift/#disqus_thread</comments>
    </item>
    
    <item>
      <title>为Hexo博客添加版权说明和打赏功能</title>
      <link>http://http://colin1994.github.io/2016/06/02/hexo-copyright-and-donate/</link>
      <guid>http://http://colin1994.github.io/2016/06/02/hexo-copyright-and-donate/</guid>
      <pubDate>Thu, 02 Jun 2016 12:06:06 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt;今天为博客配置了自动添加版权说明和打赏功能，加深了对Hexo框架的理解，做个小小的总结。当然，如果喜欢也可以试试为自己的博客添加上。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;效果图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xkc7a.com1.z0.glb.clouddn.com/tailResult.png&quot; alt=&quot;tailResult&quot;&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded>&lt;blockquote&gt;
&lt;p&gt;今天为博客配置了自动添加版权说明和打赏功能，加深了对Hexo框架的理解，做个小小的总结。当然，如果喜欢也可以试试为自己的博客添加上。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;效果图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xkc7a.com1.z0.glb.clouddn.com/tailResult.png&quot; alt=&quot;tailResult&quot;&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;版权说明&quot;&gt;版权说明&lt;/h2&gt;&lt;p&gt;具体实现步骤如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在博客根目录下（和 source 同级），新建一个名为 &lt;code&gt;scripts&lt;/code&gt; 的文件夹。&lt;/li&gt;
&lt;li&gt;在 &lt;code&gt;scripts&lt;/code&gt; 文件夹内, 新建一个 &lt;code&gt;AddTail.js&lt;/code&gt; 脚本文件，脚本具体内容详见下文。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在博客根目录下，新建一个 &lt;code&gt;tail.md&lt;/code&gt; 文件，里面写想要展示的版本说明内容。示例如下文所示。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;AddTail.js&lt;/code&gt; 脚本文件：&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Filename: AddTail.js&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Author: Colin&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Date: 2016/06/02&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Based on the script by KUANG Qi: http://kuangqi.me/tricks/append-a-copyright-info-after-every-post/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Add a tail to every post from tail.md&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Great for adding copyright info&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; fs = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;fs&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hexo.extend.filter.register(&lt;span class=&quot;string&quot;&gt;&#39;before_post_render&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;data&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(data.copyright == &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; data;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// Add seperate line&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	data.content += &lt;span class=&quot;string&quot;&gt;&#39;\n___\n&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// Try to read tail.md&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; file_content = fs.readFileSync(&lt;span class=&quot;string&quot;&gt;&#39;tail.md&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(file_content &amp;amp;&amp;amp; data.content.length &amp;gt; &lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			data.content += file_content;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (err) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (err.code !== &lt;span class=&quot;string&quot;&gt;&#39;ENOENT&#39;&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; err;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// No process for ENOENT error&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  	&lt;span class=&quot;comment&quot;&gt;// 添加具体文章链接, 不需要去掉即可&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; permalink = &lt;span class=&quot;string&quot;&gt;&#39;\n本文链接：&#39;&lt;/span&gt; + data.permalink;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	data.content += permalink;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; data;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;tail.md&lt;/code&gt; 文件示例：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://creativecommons.org/licenses/by/2.5/cn/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://i.creativecommons.org/l/by/2.5/cn/88x31.png&quot; alt=&quot;知识共享许可协议&quot;&gt;&lt;/a&gt;本作品采用&lt;a href=&quot;http://creativecommons.org/licenses/by/2.5/cn/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;知识共享署名 2.5 中国大陆许可协议&lt;/a&gt;进行许可，欢迎转载，但转载请注明来自&lt;a href=&quot;http://colin1994.github.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Colin’s Nest&lt;/a&gt;，并保持转载后文章内容的完整。本人保留所有版权相关权利。&lt;/p&gt;
&lt;p&gt;如此，&lt;code&gt;hero clean&lt;/code&gt; 后重新 &lt;code&gt;hexo generate&lt;/code&gt; 即可。&lt;/p&gt;
&lt;h2 id=&quot;打赏功能&quot;&gt;打赏功能&lt;/h2&gt;&lt;p&gt;打赏功能的实现其实是直接嵌入到博客主题中的，所以修改了原先 &lt;code&gt;clone&lt;/code&gt; 下来的源码。当然，你可以发个 &lt;code&gt;PR&lt;/code&gt; ，或者直接选择支持打赏功能的主题。我这里选择的 &lt;a href=&quot;https://github.com/litten/hexo-theme-yilia&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Yilia&lt;/a&gt; 主题并不支持这个功能，所以只好自己实现一下。（虽然知道大概并没有什么用…）&lt;/p&gt;
&lt;h3 id=&quot;目标&quot;&gt;目标&lt;/h3&gt;&lt;p&gt;既然是嵌入到博客主题中，那么当然希望是可定制的。例如主题本身给我们提供的配置一样。大致目标如下：&lt;/p&gt;
&lt;p&gt;我们只需要在 &lt;code&gt;_config.yml&lt;/code&gt; 中加入如下语句, 即可完成打赏的配置&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#打赏&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;donate:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  enable: true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  text: Enjoy it ? Donate me !  欣赏此文？求鼓励，求支持！&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  wechat: http://7xkc7a.com1.z0.glb.clouddn.com/wechatImage.png&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  alipay: http://7xkc7a.com1.z0.glb.clouddn.com/alipayImage.png&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;enable&lt;/code&gt; 参数设置是否开启打赏功能。( &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; )&lt;/li&gt;
&lt;li&gt;&lt;code&gt;text&lt;/code&gt; 参数配置需要显示的内容&lt;/li&gt;
&lt;li&gt;&lt;code&gt;wechat&lt;/code&gt; 参数设置微信支付二维码 URL&lt;/li&gt;
&lt;li&gt;&lt;code&gt;alipay&lt;/code&gt; 参数设置支付宝支付二维码 URL&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;实现步骤&quot;&gt;实现步骤&lt;/h3&gt;&lt;p&gt;编辑主题内的 &lt;code&gt;article.ejs&lt;/code&gt; 文件，比如我这里位于 &lt;code&gt;themes/yilia/layout/_partial/article.ejs&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;&amp;lt;div class=&amp;quot;article-content&amp;quot;&amp;gt;...&amp;lt;/div&amp;gt;&lt;/code&gt; 的下面，&lt;code&gt;&amp;lt;%- partial(&amp;#39;footer&amp;#39;) %&amp;gt;&lt;/code&gt; 的上面插入如下HTML代码：&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;102&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;attr&quot;&gt;theme.donate&lt;/span&gt;) &amp;#123; %&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- css --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;style&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;text/css&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;xml&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      .center &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          text-align: center;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      .hidden &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          display: none;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .donate_bar a.btn_donate&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      display: inline-block;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      width: 82px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      height: 82px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      background: url(&quot;http://7xsl28.com1.z0.glb.clouddn.com/btn_reward.gif&quot;) no-repeat;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      _background: url(&quot;http://7xsl28.com1.z0.glb.clouddn.com/btn_reward.gif&quot;) no-repeat;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- http://img.t.sinajs.cn/t5/style/images/apps_PRF/e_media/btn_reward.gif&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           因为本 hexo 生成的博客所用的 theme 的 a:hover 带动画效果，&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         为了在让打赏按钮显示效果正常 而 添加了以下几行 css，&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         嵌入其它博客时不一定要它们。 --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      -webkit-transition: background 0s;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      -moz-transition: background 0s;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      -o-transition: background 0s;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      -ms-transition: background 0s;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      transition: background 0s;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- /让打赏按钮的效果显示正常 而 添加的几行 css 到此结束 --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .donate_bar a.btn_donate:hover&amp;#123; background-position: 0px -82px;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .donate_bar .donate_txt &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      display: block;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      color: #9d9d9d;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      font: 14px/2 &quot;Microsoft Yahei&quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .bold&amp;#123; font-weight: bold; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;style&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- /css --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- Donate Module --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;donate_module&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- btn_donate &amp;amp; tips --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;donate_board&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;donate_bar center&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;br&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      ------------------------------------------------------------------------------------------------------------------------------&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;br&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;btn_donate&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;btn_donate&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;target&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;_self&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;javascript:;&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;title&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;Donate 打赏&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;donate_txt&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;%=&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;theme.donate.text&lt;/span&gt; %&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- /btn_donate &amp;amp; tips --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- donate guide --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;donate_guide&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;donate_bar center hidden&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;br&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      ------------------------------------------------------------------------------------------------------------------------------&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;br&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;%= theme.donate.wechat %&amp;gt;&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;title&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;用微信扫一扫哦~&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;fancybox&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;rel&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;article0&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;%= theme.donate.wechat %&amp;gt;&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;title&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;微信打赏 Colin&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;height&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;190px&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;width&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;auto&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;amp;nbsp;&amp;amp;nbsp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;%= theme.donate.alipay %&amp;gt;&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;title&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;用支付宝扫一扫即可~&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;fancybox&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;rel&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;article0&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;%= theme.donate.alipay %&amp;gt;&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;title&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;支付宝打赏 Colin&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;height&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;190px&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;width&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;auto&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;donate_txt&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;%=&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;theme.donate.text&lt;/span&gt; %&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- /donate guide --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- donate script --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;javascript&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&quot;string&quot;&gt;&#39;btn_donate&#39;&lt;/span&gt;).onclick = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      $(&lt;span class=&quot;string&quot;&gt;&#39;#donate_board&#39;&lt;/span&gt;).addClass(&lt;span class=&quot;string&quot;&gt;&#39;hidden&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      $(&lt;span class=&quot;string&quot;&gt;&#39;#donate_guide&#39;&lt;/span&gt;).removeClass(&lt;span class=&quot;string&quot;&gt;&#39;hidden&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;donate_on_web&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      $(&lt;span class=&quot;string&quot;&gt;&#39;#donate&#39;&lt;/span&gt;).submit();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; original_window_onload = &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.onload;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.onload = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (original_window_onload) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                original_window_onload();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&quot;string&quot;&gt;&#39;donate_board_wdg&#39;&lt;/span&gt;).className = &lt;span class=&quot;string&quot;&gt;&#39;hidden&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- /donate script --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- /Donate Module --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;%&lt;/span&gt; &amp;#125; %&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里通过判断是否显示打赏模块，执行相应的操作。点击打赏按钮，显示相应的二维码。&lt;/p&gt;
&lt;p&gt;这里还有个问题，在文章列表中，有时候也会显示打赏功能，这显然不是我们想要的。需要做的就是判断当前的的页面是详情页面还是介绍页面，比如我这里，把上面的代码放在如下判断语句中：&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;attr&quot;&gt;post.excerpt&lt;/span&gt; || !&lt;span class=&quot;attr&quot;&gt;index&lt;/span&gt;)&amp;#123; %&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- /上述代码 --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;%&lt;/span&gt; &amp;#125;%&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如此，一个简单的打赏功能就实现了。&lt;/p&gt;
&lt;p&gt;当然，你如果觉得麻烦，但是又想实现打赏功能，那么可以尝试下 &lt;a href=&quot;http://www.dashangcloud.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;云打赏&lt;/a&gt;，据说一行代码集成打赏功能。&lt;/p&gt;
&lt;p&gt;Have fun ~     ：）&lt;/p&gt;
&lt;h2 id=&quot;参考链接&quot;&gt;参考链接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://tono.tk/2016/03/26/Add_copyright_for_hexo/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;￼为Hexo博客文章自动添加版权信息&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://icehe.me/web/donate/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;实现网站的支付宝打赏功能&lt;/a&gt;&lt;/p&gt;
</content:encoded>
      
      <comments>http://http://colin1994.github.io/2016/06/02/hexo-copyright-and-donate/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Jazzhands, 交互动画就是这么简单</title>
      <link>http://http://colin1994.github.io/2016/03/16/Interactive-animation-is-so-simple/</link>
      <guid>http://http://colin1994.github.io/2016/03/16/Interactive-animation-is-so-simple/</guid>
      <pubDate>Wed, 16 Mar 2016 09:11:00 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt; &lt;a href=&quot;https://github.com/IFTTT/JazzHands&quot;&gt;Jazz Hands&lt;/a&gt;是IFTTT发布的一个基于关键帧的动画框架, 可以用于手势，滚动视图，KVO或者ReactiveCocoa, 十分方便。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;but, 到底有多方便呢 ?&lt;/p&gt;
&lt;p&gt;看看官方给出的一个demo效果:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xkc7a.com1.z0.glb.clouddn.com/Jazzhandsjazzhands-demo.gif&quot; alt=&quot;Jazzhandsjazzhands-demo&quot;&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded>&lt;blockquote&gt;
&lt;p&gt; &lt;a href=&quot;https://github.com/IFTTT/JazzHands&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Jazz Hands&lt;/a&gt;是IFTTT发布的一个基于关键帧的动画框架, 可以用于手势，滚动视图，KVO或者ReactiveCocoa, 十分方便。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;but, 到底有多方便呢 ?&lt;/p&gt;
&lt;p&gt;看看官方给出的一个demo效果:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xkc7a.com1.z0.glb.clouddn.com/Jazzhandsjazzhands-demo.gif&quot; alt=&quot;Jazzhandsjazzhands-demo&quot;&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;如果 &lt;code&gt;设计&lt;/code&gt; 要你做出这样一个效果的引导页, 有没有觉得头大 ?&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://wanzao2.b0.upaiyun.com/system/pictures/54/original/8.png&quot; alt=&quot;emoji&quot;&gt;&lt;/p&gt;
&lt;p&gt;然而, 在 &lt;code&gt;Jazzhands&lt;/code&gt; 里, 我们需要做的, 就是规划好各个组件需要展示的时机以及对应的位置。中间的衔接动画, 完全交给 &lt;code&gt;Jazzhands&lt;/code&gt; 去处理。 这样的感觉很爽有没有~ &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://wanzao2.b0.upaiyun.com/system/pictures/789/original/%E9%87%91%E5%A4%A7%E7%88%B79.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;然而, &lt;code&gt;Jazzhands&lt;/code&gt; 具体为我们做了什么, 它是怎么做的 ?  它适用于哪些场景 ? 下文我们一一分析~&lt;/p&gt;
&lt;h2 id=&quot;Jazzhands原理分析&quot;&gt;Jazzhands原理分析&lt;/h2&gt;&lt;p&gt;先看一下源工程目录: &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xkc7a.com1.z0.glb.clouddn.com/Jazzhands4F254DBC-408A-4073-A73C-8CBABBC6D580.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;这一大串看下来, 貌似很复杂, 实则不然。&lt;/p&gt;
&lt;p&gt;我们可以简单的归为 三大类 文件来看。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;IFTTTAnimation, IFTTTAnimatable, IFTTTBackgroundColorAnimation, IFTTTAlphaAnimation …&lt;/code&gt;  之类的动画类型。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IFTTTAnimator&lt;/code&gt; 动画执行者&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IFTTTAnimatedPagingScrollViewController, IFTTTAnimatedScrollViewController&lt;/code&gt; 封装好的控制器类型。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;动画类型&quot;&gt;动画类型&lt;/h3&gt;&lt;p&gt;动画类型, 我们拿最简单的  &lt;code&gt;alpha&lt;/code&gt; 变化动画来分析。 &lt;/p&gt;
&lt;p&gt;&lt;code&gt;IFTTTAlphaAnimation.m&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//  IFTTTAlphaAnimation.m&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//  JazzHands&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//  Created by Devin Foley on 9/27/13.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//  Copyright (c) 2013 IFTTT Inc. All rights reserved.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#import &lt;span class=&quot;meta-string&quot;&gt;&quot;IFTTTAlphaAnimation.h&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;IFTTTAlphaAnimation&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)addKeyframeForTime:(&lt;span class=&quot;built_in&quot;&gt;CGFloat&lt;/span&gt;)time alpha:(&lt;span class=&quot;built_in&quot;&gt;CGFloat&lt;/span&gt;)alpha&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (![&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; validAlpha:alpha]) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; addKeyframeForTime:time value:@(alpha)];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)addKeyframeForTime:(&lt;span class=&quot;built_in&quot;&gt;CGFloat&lt;/span&gt;)time alpha:(&lt;span class=&quot;built_in&quot;&gt;CGFloat&lt;/span&gt;)alpha withEasingFunction:(IFTTTEasingFunction)easingFunction&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (![&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; validAlpha:alpha]) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; addKeyframeForTime:time value:@(alpha) withEasingFunction:easingFunction];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt;)validAlpha:(&lt;span class=&quot;built_in&quot;&gt;CGFloat&lt;/span&gt;)alpha&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSAssert&lt;/span&gt;((alpha &amp;gt;= &lt;span class=&quot;number&quot;&gt;0.&lt;/span&gt;f) &amp;amp;&amp;amp; (alpha &amp;lt;= &lt;span class=&quot;number&quot;&gt;1.&lt;/span&gt;f), &lt;span class=&quot;string&quot;&gt;@&quot;Alpha values must be between zero and one.&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ((alpha &amp;lt; &lt;span class=&quot;number&quot;&gt;0.&lt;/span&gt;f) || (alpha &amp;gt; &lt;span class=&quot;number&quot;&gt;1.&lt;/span&gt;f)) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NO&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)animate:(&lt;span class=&quot;built_in&quot;&gt;CGFloat&lt;/span&gt;)time&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.hasKeyframes) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.view.alpha = (&lt;span class=&quot;built_in&quot;&gt;CGFloat&lt;/span&gt;)[(&lt;span class=&quot;built_in&quot;&gt;NSNumber&lt;/span&gt; *)[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; valueAtTime:time] floatValue];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;IFTTTAlphaAnimation&lt;/code&gt; 基础自基类 &lt;code&gt;IFTTTAnimation&lt;/code&gt; , 重写了对应的 &lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)addKeyframeForTime:(&lt;span class=&quot;built_in&quot;&gt;CGFloat&lt;/span&gt;)time value:(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;&amp;lt;IFTTTInterpolatable&amp;gt;)value;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)addKeyframeForTime:(&lt;span class=&quot;built_in&quot;&gt;CGFloat&lt;/span&gt;)time value:(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;&amp;lt;IFTTTInterpolatable&amp;gt;)value withEasingFunction:(IFTTTEasingFunction)easingFunction;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;&amp;lt;IFTTTInterpolatable&amp;gt;)valueAtTime:(&lt;span class=&quot;built_in&quot;&gt;CGFloat&lt;/span&gt;)time;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里所有的动画, 强调一个 &lt;code&gt;time - value&lt;/code&gt; 键值对。 这也是关键帧动画的重点。&lt;/p&gt;
&lt;p&gt;我们需要做的, 就是维护这样一个 &lt;code&gt;keyframes (NSMutableArray)&lt;/code&gt; , 里面的元素代表一个个存储了位置的时刻。&lt;/p&gt;
&lt;p&gt;以 &lt;code&gt;alpha&lt;/code&gt; 动画为例, 这里的 &lt;code&gt;time&lt;/code&gt; 就是对应的关键帧, &lt;code&gt;value&lt;/code&gt; 就是对应的alpha值。&lt;/p&gt;
&lt;p&gt;比如: &lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;   IFTTTAlphaAnimation *alphaAnimation = [IFTTTAlphaAnimation animationWithView:aView];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   [alphaAnimation addKeyframeForTime:&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt; alpha:&lt;span class=&quot;number&quot;&gt;0.5&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.....&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里表示了在 100 帧处, 他对应的 alpha 值是 0.5。&lt;/p&gt;
&lt;p&gt;所以, 对于动画的设定, 我们需要做的就是:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;选择动画类型。 &lt;code&gt;IFTTTBackgroundColorAnimation, IFTTTAlphaAnimation …&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;添加关键帧。 &lt;code&gt;[alphaAnimation addKeyframeForTime:100 alpha:0.5];&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;把动画添加到执行者上面。 &lt;code&gt;[self.animator addAnimation:alphaAnimation];  (这个后面再介绍, 放心, so eazy~)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;抱歉, 没有了~&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;没错, 就是这么简单。 但是这里有个疑惑, 所谓的关键帧动画, 就是我们提供足够多的关键帧, 然后去逐帧执行。 这是否意味着, 我们需要提供足够多的帧数, 来保证动画的流畅性 ?&lt;/p&gt;
&lt;p&gt;如果是这样, 那我们写出来的代码岂不是:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;    [alphaAnimation addKeyframeForTime:&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; alpha:&lt;span class=&quot;number&quot;&gt;0.1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [alphaAnimation addKeyframeForTime:&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; alpha:&lt;span class=&quot;number&quot;&gt;0.15&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [alphaAnimation addKeyframeForTime:&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; alpha:&lt;span class=&quot;number&quot;&gt;0.2&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [alphaAnimation addKeyframeForTime:&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; alpha:&lt;span class=&quot;number&quot;&gt;0.25&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;........&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;http://wanzao2.b0.upaiyun.com/system/pictures/599/original/%E6%82%B2%E5%82%AC8.png&quot; alt=&quot;EMOJI&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NO, NO, NO&lt;/strong&gt;, 前面我们已经说过了, 这很简单~ 简单意味着, 你只需要提供几个关键点的位置 (起始点, 转折点, 终点), 再设置下它们之间的过渡类型 (Linear, EaseInQuad, EaseInOutQuad…) ，然后, 动画就做完了~ 至于中间各个关键帧的值, 是怎么确定的呢 ？ 放心, &lt;code&gt;Jazzhands&lt;/code&gt; 已经帮我们做好咯~&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;&amp;lt;IFTTTInterpolatable&amp;gt;)valueAtTime:(&lt;span class=&quot;built_in&quot;&gt;CGFloat&lt;/span&gt;)time&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSAssert&lt;/span&gt;(!&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.isEmpty, &lt;span class=&quot;string&quot;&gt;@&quot;At least one KeyFrame must be set before animation begins.&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; value;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSUInteger&lt;/span&gt; indexAfter = [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; indexOfKeyframeAfterTime:time];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (indexAfter == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        value = ((IFTTTKeyframe *)&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.keyframes[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]).value;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (indexAfter &amp;lt; &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.keyframes.count) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        IFTTTKeyframe *keyframeBefore = (IFTTTKeyframe *)&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.keyframes[indexAfter - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        IFTTTKeyframe *keyframeAfter = (IFTTTKeyframe *)&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.keyframes[indexAfter];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;CGFloat&lt;/span&gt; progress = [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; progressFromTime:keyframeBefore.time toTime:keyframeAfter.time atTime:time withEasingFunction:keyframeBefore.easingFunction];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        value = [keyframeBefore.value interpolateTo:keyframeAfter.value withProgress:progress];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        value = ((IFTTTKeyframe *)&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.keyframes.lastObject).value;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; value;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;动画执行者&quot;&gt;动画执行者&lt;/h3&gt;&lt;p&gt;动画执行者, 看着就很牛x, 然而它的实现实际上非常简单， 就几行代码。 它负责 &lt;code&gt;管理动画对象&lt;/code&gt; 和 &lt;code&gt;在对应位置执行动画&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;简单来说, 就这两个方法:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)addAnimation:(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;&amp;lt;IFTTTAnimatable&amp;gt;)animation&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.animations addObject:animation];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)animate:(&lt;span class=&quot;built_in&quot;&gt;CGFloat&lt;/span&gt;)time&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;&amp;lt;IFTTTAnimatable&amp;gt; animation &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.animations) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [animation animate:time];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;很简洁有没有。&lt;/p&gt;
&lt;p&gt;上文提到了 把动画添加到执行者上面。 &lt;code&gt;[self.animator addAnimation:alphaAnimation];&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这也就是 &lt;code&gt;IFTTTAnimator&lt;/code&gt; 的第一个作用, 管理动画对象。animations(NSMutableArray) 里面存储着所有设定的动画。&lt;/p&gt;
&lt;p&gt;然后 &lt;code&gt;[self.animator animate:0];&lt;/code&gt; 就是执行对应的动画了。 这个方法就是在交互的时候, 调用。比如:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 滚动视图&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)scrollViewDidScroll:(&lt;span class=&quot;built_in&quot;&gt;UIScrollView&lt;/span&gt; *)scrollView&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  [&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; scrollViewDidScroll:scrollView];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.animator animate:scrollView.contentOffset.x];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 手势&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;IBAction&lt;/span&gt;)handlePan:(&lt;span class=&quot;built_in&quot;&gt;UIPanGestureRecognizer&lt;/span&gt; *)recognizer&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.animator animate:[recognizer locationOfTouch:&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; inView:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.view].x];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;控制器类型&quot;&gt;控制器类型&lt;/h3&gt;&lt;p&gt;&lt;code&gt;Jazzhands&lt;/code&gt; 帮我们封装好了两种控制器类型 (IFTTTAnimatedPagingScrollViewController, IFTTTAnimatedScrollViewController)。 我们可以直接基于此, 做相应的动画。 这是十分方便的。比如官方的demo就是基于 &lt;code&gt;IFTTTAnimatedPagingScrollViewController&lt;/code&gt; 来实现的。&lt;/p&gt;
&lt;p&gt;它实现了 &lt;code&gt;scrollViewDidScroll&lt;/code&gt; 等方法。&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)scrollViewDidScroll:(&lt;span class=&quot;built_in&quot;&gt;UIScrollView&lt;/span&gt; *)scrollView&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; updatePageOffset];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; animateCurrentFrame];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; 并且把 &lt;code&gt;time&lt;/code&gt; 关键帧的概念, 进一步转化为 &lt;code&gt;page&lt;/code&gt; 的概念。 也就是说, 你只要指定某个动画, 它在第几个page, 第几个page存在, 各自存在什么位置即可。十分方便~&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)keepView:(&lt;span class=&quot;built_in&quot;&gt;UIView&lt;/span&gt; *)view onPage:(&lt;span class=&quot;built_in&quot;&gt;CGFloat&lt;/span&gt;)page withAttribute:(IFTTTHorizontalPositionAttribute)attribute&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; keepView:view onPage:page withAttribute:attribute offset:&lt;span class=&quot;number&quot;&gt;0.&lt;/span&gt;f];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;使用场景_(Demo)&quot;&gt;使用场景 (Demo)&lt;/h2&gt;&lt;p&gt;说了这么多, 想必大家对 &lt;code&gt;Jazzhands&lt;/code&gt; 的实现原理都有一定了解。 那什么时候该用到它呢 ?&lt;/p&gt;
&lt;p&gt;我觉得 &lt;code&gt;引导页&lt;/code&gt; 是不二选择 ~ 毕竟类似的视差动画, 在引导页的应用是最广的。&lt;/p&gt;
&lt;p&gt;至于是否需要基于封装好的控制器来实现, 这就要根据具体的需求来定了。&lt;/p&gt;
&lt;p&gt;比如官方Demo这样, 所有动画, 在相同的关键帧位置, 有重叠部分。(两个page 可以同时存在), 那基于 &lt;code&gt;IFTTTAnimatedPagingScrollViewController&lt;/code&gt; 再合适不过了。&lt;/p&gt;
&lt;p&gt;不过如果动画有阻尼效果, 也就是当前界面只能存在一个page, 那就建议直接用 &lt;code&gt;UIViewController&lt;/code&gt; 撸, 然后借助 &lt;code&gt;手势&lt;/code&gt; , 来实现对应的效果。&lt;/p&gt;
&lt;p&gt;比如可以仿照下美图秀秀的引导页, 写个简单demo, 效果如下:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xkc7a.com1.z0.glb.clouddn.com/JazzhandsunityResult2.gif&quot; alt=&quot;MTXX_DEMO&quot;&gt;&lt;/p&gt;
&lt;p&gt;具体 源码 就不上传了。 相信大家利用 Jazzhands 不难做出类似的效果。(有需要的可以私下交流~)&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;&lt;p&gt;总体来说, 这个开源库还是非常精简，而且思路非常清晰，依然基于Core Animation之上，因为它只是针对于UIKit上去做帧的配置，对帧的封装上更加灵活，但是缺点是实现复杂的动画时，代码量比较大。另外布局约束呢, 都得手撸,,&lt;/p&gt;
&lt;p&gt;还是很赞的~ &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://wanzao2.b0.upaiyun.com/system/pictures/801/original/%E9%87%91%E5%A4%A7%E7%88%B721.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
</content:encoded>
      
      <comments>http://http://colin1994.github.io/2016/03/16/Interactive-animation-is-so-simple/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Photo Editing Extension 详解 (附带应用滤镜Demo)</title>
      <link>http://http://colin1994.github.io/2016/03/12/Photo-Editing-Extension/</link>
      <guid>http://http://colin1994.github.io/2016/03/12/Photo-Editing-Extension/</guid>
      <pubDate>Sat, 12 Mar 2016 13:34:35 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt;extension是iOS8新开放的一种对几个固定系统区域的扩展机制，它可以在一定程度上弥补iOS的沙盒机制对应用间通信的限制。允许应用帮助系统扩展自定义功能，去实现一个特定作用域的任务，如照片编辑、自定义键盘、通知中心、Action动作、Share分享等。 这对于一向封闭的iOS来说, 无疑是一大福音。&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded>&lt;blockquote&gt;
&lt;p&gt;extension是iOS8新开放的一种对几个固定系统区域的扩展机制，它可以在一定程度上弥补iOS的沙盒机制对应用间通信的限制。允许应用帮助系统扩展自定义功能，去实现一个特定作用域的任务，如照片编辑、自定义键盘、通知中心、Action动作、Share分享等。 这对于一向封闭的iOS来说, 无疑是一大福音。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;虽然iOS8离现在比较远了, 分享 &lt;strong&gt;“Extension “&lt;/strong&gt; 相关的文章也很多了, 不过对于&lt;strong&gt;“Photo Editing”&lt;/strong&gt;, 我觉得还是有必要来讲一讲的, 一来多数教程介绍Extension 的时候都是拿&lt;strong&gt;Widgets&lt;/strong&gt;举例, 再有&lt;strong&gt;Photo Editing&lt;/strong&gt;是可自定义内容最丰富的一个, 你完全可以把它当作App里额外的一个界面来完成。&lt;/p&gt;
&lt;p&gt;正好前一阵在实习的时候, 实现过相关功能, 总结一番也是极好。&lt;/p&gt;
&lt;h1 id=&quot;1-_相关概念&quot;&gt;1. 相关概念&lt;/h1&gt;&lt;h2 id=&quot;1-1_Extension_Point&quot;&gt;1.1 Extension Point&lt;/h2&gt;&lt;p&gt;系统中支持Extension 的区域，Extension 的类别也是据此区分的，iOS上共有Today、Share、Action、Photo Editing、Storage Provider、Custom keyboard几种，其中Today中的extension又被称为Widget。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;今日(Today，又称为Widget)&lt;/strong&gt;：可以快速获取更新或者在通知中心的今日视图中执行一项快速任务。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;共享(Share)&lt;/strong&gt;：发布到一个共享网站或者与其它应用程序共享内容。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;动作(Action)&lt;/strong&gt;：在另一个应用程序的上下文中操作或查看内容。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;照片编辑(Photo Editing)&lt;/strong&gt;（仅限于iOS）：在照片应用程序中编辑照片或视频。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;查找器&lt;/strong&gt;（仅限于iOS）：在查找器中直接显示文件同步的状态信息。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;文档提供程序(Storage Provider)&lt;/strong&gt;（仅限于iOS）：提供对文件库的访问和管理。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;自定义键盘(Custom keyboard)&lt;/strong&gt;（仅限于iOS）：用自定义键盘替代iOS系统键盘，并用于所有的应用程序中。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由于每个扩展点都有与之相关的使用策略和专门的API，开发人员必须为他们想要提供的那种功能选择恰当的扩展点, 每种Extension Point的使用方式和适合干的活都不一样，因此不存在通用的Extension 。&lt;/p&gt;
&lt;p&gt;例如，在默认情况下，键盘Extension“&lt;a href=&quot;https://developer.apple.com/library/prerelease/ios/documentation/General/Conceptual/ExtensibilityPG/Keyboard.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;不能访问网络，而且不能与其包含应用程序共享同一容器&lt;/a&gt;”。通过对Extension进行恰当的配置，这样的限制可以移除，但开发人员仍然需要遵守苹果应用商店审查指南和iOS开发者计划许可协议中的具体的网络键盘指南。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.my.csdn.net/uploads/201512/13/1449993990_7598.png&quot; alt=&quot;Extension Point&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;1-2_App_Extension&quot;&gt;1.2 App Extension&lt;/h2&gt;&lt;p&gt;即为本文所说的Extension。Extension并不是一个独立的app，它有一个包含在App Bundle中的独立Bundle，Extension的Bundle后缀名是.appex。其生命周期也和普通App不同，这些后文将会详述。&lt;/p&gt;
&lt;p&gt;Extension不能单独存在，必须有一个包含它的Containing App。&lt;/p&gt;
&lt;p&gt;另外，Extension需要用户手动激活，不同的Extension激活方式也不同。&lt;/p&gt;
&lt;p&gt;比如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Today中的widget需要在Today中激活和关闭；&lt;/li&gt;
&lt;li&gt;Custom keyboard需要在设置中进行相关设置；&lt;/li&gt;
&lt;li&gt;Photo Editing需要在使用照片时在照片管理器中激活或关闭；&lt;/li&gt;
&lt;li&gt;Storage Provider可以在选择文件时出现；&lt;/li&gt;
&lt;li&gt;Share和Action可以在任何应用里被激活，但前提是开发者需要设置Activation Rules，以确定extension需要在合适出现。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;1-3_Containing_App&quot;&gt;1.3 Containing App&lt;/h2&gt;&lt;p&gt;尽管苹果开放了Extension，但是在iOS中Extension并不能单独存在，要想提交到AppStore，必须将Extension包含在一个app中提交，并且App的实现部分不能为空, 这个包含Extension的App就叫Containing App。&lt;/p&gt;
&lt;p&gt;Extension会随着Containing App的安装而安装，同时随着Containing App的卸载而卸载。&lt;/p&gt;
&lt;h2 id=&quot;1-4_Host_App&quot;&gt;1.4 Host App&lt;/h2&gt;&lt;p&gt;能够调起Extension的App被称为Host App。&lt;/p&gt;
&lt;p&gt;比如:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;widget的Host App就是Today。&lt;/li&gt;
&lt;li&gt;Photo Editing 的 Host App 就是 Photos&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;2-_Extension和Containing_App、Host_App通信&quot;&gt;2. Extension和Containing App、Host App通信&lt;/h1&gt;&lt;h2 id=&quot;2-1_Extension和Host_App&quot;&gt;2.1 Extension和Host App&lt;/h2&gt;&lt;p&gt;Extension和Host App之间可以通过extensionContext属性直接通信，该属性是新增加的UIViewController类别：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;UIViewController&lt;/span&gt;(&lt;span class=&quot;title&quot;&gt;NSExtensionAdditions&lt;/span&gt;) &amp;lt;&lt;span class=&quot;title&quot;&gt;NSExtensionRequestHandling&lt;/span&gt;&amp;gt; &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Returns the extension context. Also acts as a convenience method for a view controller to check if it participating in an extension request. &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;readonly&lt;/span&gt;,retain) &lt;span class=&quot;built_in&quot;&gt;NSExtensionContext&lt;/span&gt; *extensionContext &lt;span class=&quot;built_in&quot;&gt;NS_AVAILABLE_IOS&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;_0); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;实际上extension和Host App之间是通过IPC（interprocess communication）实现的，只是苹果把调用接口高度抽象了，我们并不需要关注那么底层的东西。&lt;/p&gt;
&lt;h2 id=&quot;2-2_Containing_App和Host_App&quot;&gt;2.2 Containing App和Host App&lt;/h2&gt;&lt;p&gt;他们之间没有任何直接关系，也从来不需要通信。&lt;/p&gt;
&lt;h2 id=&quot;2-3_Extension和Containing_App&quot;&gt;2.3 Extension和Containing App&lt;/h2&gt;&lt;p&gt;这二者之间的关系最复杂，纠纠缠缠扯不清关系。&lt;/p&gt;
&lt;p&gt;众所周知，&lt;a href=&quot;https://developer.apple.com/library/ios/documentation/iphone/conceptual/iphoneosprogrammingguide/TheiOSEnvironment/TheiOSEnvironment.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;每个iOS应用程序都有自己的沙箱&lt;/a&gt;。&lt;a href=&quot;https://developer.apple.com/library/mac/documentation/security/conceptual/AppSandboxDesignGuide/AppSandboxInDepth/AppSandboxInDepth.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;通过Mac苹果应用商店分发的OS X应用程序&lt;/a&gt;也有类似的要求，不过许多OS X应用程序是在Mac苹果应用商店之外分发的，并不需要遵守这一沙箱要求。&lt;/p&gt;
&lt;p&gt;沙箱是苹果iOS安全策略的基石之一。沙箱是为了限制应用程序对文件、首选项、网络资源、硬件等的访问，具体来讲，其目的是为了限制受损的应用程序可能对系统造成的损害。&lt;/p&gt;
&lt;p&gt;考虑到并不是所有可以用在应用程序中的API都可以用在Extension中，所以与通常的应用程序相比，App Extension运行在有更多限制的沙箱中。不能在Extension中使用的API标记为不可用宏，如NS_EXTENSIONS_UNAVAILABLE，它会在链接时导致失败。&lt;/p&gt;
&lt;p&gt;此外，对于Extension与其它应用程序之间的通信，苹果有几项强制规定：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;调用Extension的应用程序即主应用程序不能启动Extension；只有系统可以启动Extension。&lt;/li&gt;
&lt;li&gt;当Extension启动后，主应用程序就和它直接通信。&lt;/li&gt;
&lt;li&gt;主应用程序永远不和包含应用程序直接通信。&lt;/li&gt;
&lt;li&gt;Extension不是一个应用程序，但它由系统生成，并有它自己单独的进程。&lt;/li&gt;
&lt;li&gt;为了在包含应用程序和它的Extension之间共享数据，包含应用程序及其Extension都必须是应用程序组的一部分。对于应用程序组的其中两个成员，部分数据可以在两者沙箱之外的第三个容器中共享。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;正如Ars Technica的Andrew Cunningham总结的那样，这些规则的最终结果主要是一个应用程序不能进入另一个应用程序的沙箱。这与Android相反，在Android上，&lt;a href=&quot;http://developer.android.com/guide/topics/providers/content-providers.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;内容提供程序&lt;/a&gt;和&lt;a href=&quot;http://developer.android.com/reference/android/content/ContentResolver.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;解析程序&lt;/a&gt;仍然可以一起工作来为应用程序提供对其它应用程序中数据的访问。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;不能直接通信:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;首先，尽管Extension的bundle是放在Containing App的bundle中，但是他们是两个完全独立的进程，之间不能直接通信。不过Extension可以通过openURL的方式启动Containing App（当然也能启动其它App），不过必须通过extensionContext借助host app来实现：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//通过openURL的方式启动Containing APP &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)openURLContainingAPP &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.extensionContext openURL:[&lt;span class=&quot;built_in&quot;&gt;NSURL&lt;/span&gt; URLWithString:&lt;span class=&quot;string&quot;&gt;@&quot;appextension://123&quot;&lt;/span&gt;] &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                 completionHandler:^(&lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt; success) &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                     &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;open url result:%d&quot;&lt;/span&gt;,success); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                 &amp;#125;]; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;Extension中是无法直接使用openURL的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;可以共享Shared Resources:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Extension和Containing App可以共同读写一个被称为Shared Resources的存储区域，这是通过App Groups实现的，后文将会详述。&lt;/p&gt;
&lt;p&gt;三者间的关系可以通过官网给的两张图片形象地说明：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://img.my.csdn.net/uploads/201512/13/1449995608_4851.png&quot; alt=&quot;Extension_Containing_App_1&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.my.csdn.net/uploads/201512/13/1449995608_8648.png&quot; alt=&quot;Extension_Containing_App_2&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;3-_数据共享&quot;&gt;3. 数据共享&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;App Groups&lt;/strong&gt;这是iOS8新开放的功能，在OS X上早就可用了。它主要用于同一Group下的App共享同一份读写空间，以实现数据共享。&lt;/p&gt;
&lt;h2 id=&quot;3-1_功能开启&quot;&gt;3.1 功能开启&lt;/h2&gt;&lt;p&gt;为了便于后续操作，请先确保你的开发者账号在Xcode上处于登录状态。&lt;/p&gt;
&lt;h3 id=&quot;3-1-1_在App中开启&quot;&gt;3.1.1 在App中开启&lt;/h3&gt;&lt;p&gt;App Groups位于：&lt;/p&gt;
&lt;p&gt;TARGETS—&amp;gt;AppExtensionDemo—&amp;gt;Capabilities—&amp;gt;App Groups`&lt;/p&gt;
&lt;p&gt;找到以后，将App Groups右上角的开关打开，然后选择添加Groups，正规的命名规则应该是：group.com.company.app。&lt;/p&gt;
&lt;p&gt;添加成功以后如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.my.csdn.net/uploads/201512/13/1449996631_7873.jpeg&quot; alt=&quot;App_Groups&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;3-1-2_在Extension中开启&quot;&gt;3.1.2 在Extension中开启&lt;/h3&gt;&lt;p&gt;开启方式和App中一样，需要注意的是必须保证这里地App Groups名称和App中的相同。&lt;/p&gt;
&lt;h2 id=&quot;3-2_extension和containing_app数据共享&quot;&gt;3.2 extension和containing app数据共享&lt;/h2&gt;&lt;p&gt;App Groups给我们提供了同一Group内App可以共同读写的区域，可以通过以下方式实现数据共享：&lt;/p&gt;
&lt;h3 id=&quot;3-2-1_通过NSUserDefaults共享数据&quot;&gt;3.2.1 通过NSUserDefaults共享数据&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;存数据&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;通过以下方式向NSUserDefaults中保存数据：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)saveTextBy&lt;span class=&quot;built_in&quot;&gt;NSUserDefaults&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSUserDefaults&lt;/span&gt; *shared = [[&lt;span class=&quot;built_in&quot;&gt;NSUserDefaults&lt;/span&gt; alloc] initWithSuiteName:&lt;span class=&quot;string&quot;&gt;@&quot;group.com.xx.test&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [shared setObject:_textField.text forKey:&lt;span class=&quot;string&quot;&gt;@&quot;test&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [shared synchronize];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;需要注意的是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;保存数据的时候必须指明group id；&lt;/li&gt;
&lt;li&gt;而且要注意NSUserDefaults能够处理的数据只能是可plist化的对象，详情见&lt;a href=&quot;https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/PropertyLists/AboutPropertyLists/AboutPropertyLists.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Property List Programming Guide&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;为了防止出现数据同步问题，不要忘记调用&lt;code&gt;[shared synchronize];&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;读数据&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对应的读取数据方式：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *)readDataFrom&lt;span class=&quot;built_in&quot;&gt;NSUserDefaults&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSUserDefaults&lt;/span&gt; *shared = [[&lt;span class=&quot;built_in&quot;&gt;NSUserDefaults&lt;/span&gt; alloc] initWithSuiteName:&lt;span class=&quot;string&quot;&gt;@&quot;group.com.xx.test&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *value = [shared valueForKey:&lt;span class=&quot;string&quot;&gt;@&quot;test&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; value;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;3-2-1_通过NSFileManager共享数据&quot;&gt;3.2.1 通过NSFileManager共享数据&lt;/h3&gt;&lt;p&gt;NSFileManager在iOS7提供了containerURLForSecurityApplicationGroupIdentifier方法，可以用来实现app group共享数据。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;存数据&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt;)saveTextBy&lt;span class=&quot;built_in&quot;&gt;NSFileManager&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSError&lt;/span&gt; *err = &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSURL&lt;/span&gt; *containerURL = [[&lt;span class=&quot;built_in&quot;&gt;NSFileManager&lt;/span&gt; defaultManager] containerURLForSecurityApplicationGroupIdentifier:&lt;span class=&quot;string&quot;&gt;@&quot;group.com.xx.test&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    containerURL = [containerURL URLByAppendingPathComponent:&lt;span class=&quot;string&quot;&gt;@&quot;Library/Caches/good&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *value = _textField.text;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt; result = [value writeToURL:containerURL atomically:&lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt; encoding:&lt;span class=&quot;built_in&quot;&gt;NSUTF8StringEncoding&lt;/span&gt; error:&amp;amp;err];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!result) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;%@&quot;&lt;/span&gt;,err);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;save value:%@ success.&quot;&lt;/span&gt;,value);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; result;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;读数据&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *)readTextBy&lt;span class=&quot;built_in&quot;&gt;NSFileManager&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSError&lt;/span&gt; *err = &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSURL&lt;/span&gt; *containerURL = [[&lt;span class=&quot;built_in&quot;&gt;NSFileManager&lt;/span&gt; defaultManager] containerURLForSecurityApplicationGroupIdentifier:&lt;span class=&quot;string&quot;&gt;@&quot;group.com.xx.test&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    containerURL = [containerURL URLByAppendingPathComponent:&lt;span class=&quot;string&quot;&gt;@&quot;Library/Caches/good&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *value = [&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; stringWithContentsOfURL:containerURL encoding:&lt;span class=&quot;built_in&quot;&gt;NSUTF8StringEncoding&lt;/span&gt; error:&amp;amp;err];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; value;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;PS:&lt;/p&gt;
&lt;p&gt;两个应用共同读取同一份数据，就会引发数据同步问题。WWDC2014的视频中建议使用NSFileCoordination实现普通文件的读写同步，而数据库可以使用CoreData,Sqlite也支持同步。&lt;/p&gt;
&lt;h2 id=&quot;3-3_动态加载,_资源共享&quot;&gt;3.3 动态加载, 资源共享&lt;/h2&gt;&lt;p&gt;这个感兴趣的可以看下, 无关紧要~&lt;/p&gt;
&lt;p&gt;和数据共享类似，Extension和Containing App很自然地会有一些业务逻辑上可以共用的代码，这时可以通过iOS8中刚开放使用的framework实现。苹果在&lt;a href=&quot;https://developer.apple.com/library/prerelease/ios/documentation/General/Conceptual/ExtensibilityPG/ExtensionScenarios.html#//apple_ref/doc/uid/TP40014214-CH21-SW1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;App Extension Programming Guide&lt;/a&gt;中是这样描述的：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In iOS 8.0 and later, you can use an embedded framework to share code between your extension and its containing app. For example, if you develop image-processing code that you want both your Photo Editing extension and its containing app to share, you can put the code into a framework and embed it in both targets.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;即将framework分别嵌入到extension和containing app的target中实现代码共享。但这样岂不是需要分别要将framework分别copy到extension和containing app的main bundle中？&lt;/p&gt;
&lt;p&gt;参考extension和containing app数据共享，我试想能不能将framework只保存一份放在App Groups区域？&lt;/p&gt;
&lt;h3 id=&quot;3-3-1_copy_framework到App_Groups&quot;&gt;3.3.1 copy framework到App Groups&lt;/h3&gt;&lt;p&gt;在app首次启动的时候将framework放到App Groups区域：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt;)copyFrameworkFromMainBundleToAppGroup&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSFileManager&lt;/span&gt; *manager = [&lt;span class=&quot;built_in&quot;&gt;NSFileManager&lt;/span&gt; defaultManager];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSError&lt;/span&gt; *err = &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSURL&lt;/span&gt; *containerURL = [[&lt;span class=&quot;built_in&quot;&gt;NSFileManager&lt;/span&gt; defaultManager] containerURLForSecurityApplicationGroupIdentifier:&lt;span class=&quot;string&quot;&gt;@&quot;group.com.xx.test&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *sorPath = [&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; stringWithFormat:&lt;span class=&quot;string&quot;&gt;@&quot;%@/Dylib.framework&quot;&lt;/span&gt;,[[&lt;span class=&quot;built_in&quot;&gt;NSBundle&lt;/span&gt; mainBundle] bundlePath]];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *desPath = [&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; stringWithFormat:&lt;span class=&quot;string&quot;&gt;@&quot;%@/Library/Caches/Dylib.framework&quot;&lt;/span&gt;,containerURL.path];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt; removeResult = [manager removeItemAtPath:desPath error:&amp;amp;err];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!removeResult) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;%@&quot;&lt;/span&gt;,err);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;remove success.&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt; copyResult = [[&lt;span class=&quot;built_in&quot;&gt;NSFileManager&lt;/span&gt; defaultManager] copyItemAtPath:sorPath toPath:desPath error:&amp;amp;err];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!copyResult) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;%@&quot;&lt;/span&gt;,err);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;copy success.&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; copyResult;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;3-3-2_使用framework&quot;&gt;3.3.2 使用framework&lt;/h3&gt;&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt;)loadFrameworkInAppGroup&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSError&lt;/span&gt; *err = &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSURL&lt;/span&gt; *containerURL = [[&lt;span class=&quot;built_in&quot;&gt;NSFileManager&lt;/span&gt; defaultManager] containerURLForSecurityApplicationGroupIdentifier:&lt;span class=&quot;string&quot;&gt;@&quot;group.com.xx.test&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *desPath = [&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; stringWithFormat:&lt;span class=&quot;string&quot;&gt;@&quot;%@/Library/Caches/Dylib.framework&quot;&lt;/span&gt;,containerURL.path];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSBundle&lt;/span&gt; *bundle = [&lt;span class=&quot;built_in&quot;&gt;NSBundle&lt;/span&gt; bundleWithPath:desPath];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt; result = [bundle loadAndReturnError:&amp;amp;err];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (result) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Class root = &lt;span class=&quot;built_in&quot;&gt;NSClassFromString&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;Person&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (root) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            Person *person = [[root alloc] init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (person) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                [person run];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;%@&quot;&lt;/span&gt;,err);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; result;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;经过测试，竟然能够加载成功。&lt;/p&gt;
&lt;p&gt;对比一下, 有如下总结: &lt;/p&gt;
&lt;p&gt;主要验证了两种方式:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;导入公用framework到项目中, 只有&lt;strong&gt;containing app&lt;/strong&gt; 的 &lt;strong&gt;Link Binary With Libraries&lt;/strong&gt;添加对应framework, extension运行时动态加载framework。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;containing app&lt;/strong&gt; 和 &lt;strong&gt;extension&lt;/strong&gt;的&lt;strong&gt;Link Binary With Libraries&lt;/strong&gt;分别链接公用framework, (Compile Sources 只包含在framework这个target中)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以上两种方式都可以做到公用资源。 区别如下:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;方式一需要App Groups, 共享资源。 方式二不需要。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;方式一需要&lt;strong&gt;containing app&lt;/strong&gt;先启动把, 把数据copy到App Groups中, &lt;strong&gt;entension&lt;/strong&gt;才能加载到。 方式二不需要。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;方式一不能直接初始化类, 比如:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#import &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;TestFrameWork/FilterImage.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;FilterImage *filter = [[FilterImage alloc] init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;将会报错:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Undefined symbols &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; architecture x86_64:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&quot;_OBJC_CLASS_$_FilterImage&quot;&lt;/span&gt;, referenced from:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      objc-class-ref &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; PhotoEditingViewController.o&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ld: symbol(s) not found &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; architecture x86_64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;clang: error: linker command failed with exit code &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; (use -v to see invocation)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;   需要用这样的方式:&lt;/p&gt;
   &lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Class root = &lt;span class=&quot;built_in&quot;&gt;NSClassFromString&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;FilterImage&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (root) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    FilterImage *filter = [[root alloc] init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *nameLUT = [&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; stringWithFormat:&lt;span class=&quot;string&quot;&gt;@&quot;%@/TestFrameWork.bundle/images/filter_lut_%d&quot;&lt;/span&gt;, desPath, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.imageView.image = [filter filterImage:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.input.displaySizeImage imageName:nameLUT];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;   方式二可以直接使用。 (#import “FilterImage.h”)&lt;/p&gt;
&lt;p&gt;   ​&lt;/p&gt;
&lt;p&gt;   对比了一下导出包的大小。&lt;/p&gt;
&lt;p&gt;   写了3个Demo, &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;方式一, 动态加载          12.1M&lt;/li&gt;
&lt;li&gt;方式二，静态链接         23.7M&lt;/li&gt;
&lt;li&gt;方式三，只包含framework，没有extension   11.2M&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;4-_生命周期&quot;&gt;4. 生命周期&lt;/h1&gt;&lt;p&gt;下图来自官方文档，它详细描述了Extension App的生命周期 &lt;img src=&quot;http://img.my.csdn.net/uploads/201512/13/1449996016_4664.png&quot; alt=&quot;Life_Cycle&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;开始&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在用户通过host app点击extension时，系统就会实例化extension应用，这是生命周期的开始。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;执行任务&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在extension启动以后，开始执行它的使命。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;终止&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在用户取消任务，或者任务执行结束，或者开启了一个长时后台任务时，系统会将其杀掉。&lt;/p&gt;
&lt;p&gt;由此可见，extension就是为了任务而生！&lt;/p&gt;
&lt;h1 id=&quot;5-_Photo_Editing使用滤镜实战&quot;&gt;5. Photo Editing使用滤镜实战&lt;/h1&gt;&lt;p&gt;这里因为时间关系, 就直接采用 &lt;strong&gt;Apple&lt;/strong&gt; 官方例子, 不再重新写了。如果实践过程中, 有遇到任何问题, 欢迎留言或者其他方式与我交流~&lt;/p&gt;
&lt;p&gt;Demo下载地址: &lt;img src=&quot;http://download.csdn.net/images/minetype/zip.gif&quot; alt=&quot;&quot;&gt;Photo Editing Extension Demo  &lt;/p&gt;
&lt;p&gt;这里有几点需要注意的。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;因为Host App是Photos, 所以我们的Extension必须适配横竖屏, 因为它的状态是跟着Host App变的, 而不是Containing App。 至于横竖屏的适配, 建议采用Size Class, 然后监听缩放模式, 来适配屏幕&lt;/p&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#pragma mark - UIContentContainer&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)willTransitionToTraitCollection:(&lt;span class=&quot;built_in&quot;&gt;UITraitCollection&lt;/span&gt; *)newCollection&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              withTransitionCoordinator:(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; &amp;lt;&lt;span class=&quot;built_in&quot;&gt;UIViewControllerTransitionCoordinator&lt;/span&gt;&amp;gt;)coordinator&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; willTransitionToTraitCollection:newCollection&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                 withTransitionCoordinator:coordinator];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [coordinator animateAlongsideTransition:^(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; &amp;lt;&lt;span class=&quot;built_in&quot;&gt;UIViewControllerTransitionCoordinatorContext&lt;/span&gt;&amp;gt; context) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;comment&quot;&gt;// 横屏处理&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;comment&quot;&gt;// 竖屏处理&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.view setNeedsLayout];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; completion:&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;   同样, 需要获取初始状态来处理。&lt;/p&gt;
&lt;p&gt;   ​&lt;/p&gt;
   &lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.traitCollection.verticalSizeClass == &lt;span class=&quot;built_in&quot;&gt;UIUserInterfaceSizeClassCompact&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//To Do: modify something for compact vertical size&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//To Do: modify something for other vertical size&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;如果第三方库用Pod来管理的话, 需要修改pod的target, 以及添加链接。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Build Settings — &amp;gt; Other Linker Flags    **-l&amp;quot;Pods-MBProgressHUD&amp;quot;**&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;6-_相关资料&quot;&gt;6. 相关资料&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/library/prerelease/ios/documentation/General/Conceptual/ExtensibilityPG/index.html#//apple_ref/doc/uid/TP40014214-CH20-SW1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;App Extension Programming Guide&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.infoq.com/news/2014/07/apple-ios8-app-extensions&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;App Extensions for iOS 8 in Depth&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://foggry.com/blog/2014/06/23/wwdc2014zhi-app-extensionsxue-xi-bi-ji/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;WWDC2014之App Extensions学习笔记&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/library/ios/samplecode/SamplePhotoEditingExtension/Introduction/Intro.html#//apple_ref/doc/uid/TP40014576&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Sample Photo Editing Extension&lt;/a&gt;&lt;/p&gt;
</content:encoded>
      
      <comments>http://http://colin1994.github.io/2016/03/12/Photo-Editing-Extension/#disqus_thread</comments>
    </item>
    
    <item>
      <title>iOS启动页多语言</title>
      <link>http://http://colin1994.github.io/2016/03/12/iOS-welcome-page-multilingual/</link>
      <guid>http://http://colin1994.github.io/2016/03/12/iOS-welcome-page-multilingual/</guid>
      <pubDate>Sat, 12 Mar 2016 09:06:29 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt; 启动页适配多语言, 想必很多 App 都有类似的需求。但是之前尝试过程中, 发现  “多语言” 的那几种实现方式, 在欢迎页上都不适应, 直到遇到了 &lt;code&gt;UILaunchImages&lt;/code&gt; ~ 下文将详细描述如何实现启动页多语言。&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded>&lt;blockquote&gt;
&lt;p&gt; 启动页适配多语言, 想必很多 App 都有类似的需求。但是之前尝试过程中, 发现  “多语言” 的那几种实现方式, 在欢迎页上都不适应, 直到遇到了 &lt;code&gt;UILaunchImages&lt;/code&gt; ~ 下文将详细描述如何实现启动页多语言。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;传统多语言设置&quot;&gt;传统多语言设置&lt;/h2&gt;&lt;p&gt;说起多语言, 我们无非这样实现:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;为 App 添加多语言支持。&lt;img src=&quot;http://7xkc7a.com1.z0.glb.clouddn.com/LaunchImagesLaunchImages_0.png&quot; alt=&quot;LaunchImages_0&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;添加对应的配置, 资源。 比如：&lt;/p&gt;
&lt;p&gt;文本: &lt;img src=&quot;http://7xkc7a.com1.z0.glb.clouddn.com/LaunchImagesLaunchImages_1.png&quot; alt=&quot;LaunchImages_1&quot;&gt;&lt;/p&gt;
&lt;p&gt;图片:&lt;img src=&quot;http://7xkc7a.com1.z0.glb.clouddn.com/LaunchImagesLaunchImages_2.png&quot; alt=&quot;LaunchImages_2&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用对应资源, 比如:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;label.text = &lt;span class=&quot;built_in&quot;&gt;NSLocalizedString&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;多语言&quot;&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;再麻烦一点, 就是xib, storyboard的多语言的。 但是原理一样, 这样的方式都能实现多语言支持。So, 就是这么简单~&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://wanzao2.b0.upaiyun.com/system/pictures/181/original/%E5%BC%80%E5%BF%8309.png&quot; alt=&quot;emoji&quot;&gt;&lt;/p&gt;
&lt;p&gt; 然而, 启动页貌似不吃这套 ,,,&lt;/p&gt;
&lt;h2 id=&quot;启动页设置&quot;&gt;启动页设置&lt;/h2&gt;&lt;p&gt;先说说我们如何设置启动页吧。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Assets.xcassets&lt;/code&gt; 这玩意引入之前, 我们是对启动页图片按规范命名, 比如 Default, -568h, @2x, @3x 之类的, 让系统帮助我们自动判断对应的启动页图片。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Assets.xcassets&lt;/code&gt; 之后, 我们都了一种选择, 可以直接拖拽图片到 &lt;code&gt;LaunchImage&lt;/code&gt; 中, 并且图片命名也没那么多要求。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/262538-a84f9bece1aa8b37.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240/format/jpg&quot; alt=&quot;LaunchImage_3&quot;&gt;&lt;/p&gt;
&lt;p&gt;再之后, 多了 &lt;code&gt;LaunchScreen.storyboard&lt;/code&gt; , 意味着我们有了更多的选择, 可以做更多的事情, 把它当做一个xib, 拖拽相关控件上去就好~&lt;/p&gt;
&lt;p&gt;方式很多, 是否意味着实现多语言的办法也很多 ?&lt;/p&gt;
&lt;p&gt;然而并不是,, &lt;img src=&quot;http://wanzao2.b0.upaiyun.com/system/pictures/283/original/%E7%94%9F%E6%B0%9411.png&quot; alt=&quot;emoji&quot;&gt;&lt;/p&gt;
&lt;p&gt;不论是对&lt;code&gt;图片&lt;/code&gt; 进行多语言, 还是 &lt;code&gt;LaunchScreen.storyboard&lt;/code&gt; 多语言, 发现启动页始终没有跟着系统语言变, 血崩..&lt;/p&gt;
&lt;p&gt;当然, 办法并不是没有, 只是没找到对的而已~ 下面介绍如何通过&lt;code&gt;UILaunchImages&lt;/code&gt; 实现启动页多语言。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;PS: 感觉 LaunchScreen.storyboard 是能做到多语言支持的, 难道是我实现过程中有问题 ? &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;UILaunchImages&quot;&gt;UILaunchImages&lt;/h2&gt;&lt;p&gt;先看一下官方文档:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;UILaunchImages (Array - iOS) Explicitly specifies the launch images to use for the app. This key contains an array of dictionaries. Each dictionary contains detailed information about a single launch image and how it is used. Xcode fills in the value of each dictionary based on information you provide in your project settings.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;显然, 我们可以通过设置 &lt;code&gt;UILaunchImages&lt;/code&gt; 来配置启动图片。&lt;/p&gt;
&lt;p&gt;至于 &lt;code&gt;UILaunchImages&lt;/code&gt; 的几个 Key , 简单描述如下: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;UILaunchImageName&lt;/code&gt; (required) 启动页资源名称&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;UILaunchImageMinimumOSVersion&lt;/code&gt;(required) 启动页支持的最低版本&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;UILaunchImageSize&lt;/code&gt; 启动页尺寸&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;UILaunchImageOrientation&lt;/code&gt; 启动页方向&lt;/p&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;代表什么, 都比较简单, 具体可以参考官方文档~ [  &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/General/Reference/InfoPlistKeyReference/Articles/iPhoneOSKeys.html#//apple_ref/doc/uid/TP40009252-SW28&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;UILaunchImages&lt;/a&gt; ]&lt;/p&gt;
&lt;p&gt;用这种方式配置启动页也十分简单, 具体步骤:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;取消启动页使用的 Asset Catalog&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xkc7a.com1.z0.glb.clouddn.com/LaunchImages%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-03-12%20%E4%B8%8B%E5%8D%884.44.06.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在Info.plist 中添加UILaunchImages项&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;key&lt;/span&gt;&amp;gt;&lt;/span&gt;UILaunchImages&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;key&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;array&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dict&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;key&lt;/span&gt;&amp;gt;&lt;/span&gt;UILaunchImageName&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;key&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;string&lt;/span&gt;&amp;gt;&lt;/span&gt;LaunchImage&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;string&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;key&lt;/span&gt;&amp;gt;&lt;/span&gt;UILaunchImageMinimumOSVersion&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;key&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;string&lt;/span&gt;&amp;gt;&lt;/span&gt;7.0&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;string&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;key&lt;/span&gt;&amp;gt;&lt;/span&gt;UILaunchImageSize&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;key&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;string&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;#123;320, 480&amp;#125;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;string&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;key&lt;/span&gt;&amp;gt;&lt;/span&gt;UILaunchImageOrientation&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;key&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;string&lt;/span&gt;&amp;gt;&lt;/span&gt;Portrait&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;string&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dict&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dict&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;key&lt;/span&gt;&amp;gt;&lt;/span&gt;UILaunchImageName&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;key&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;string&lt;/span&gt;&amp;gt;&lt;/span&gt;LaunchImage-568h&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;string&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;key&lt;/span&gt;&amp;gt;&lt;/span&gt;UILaunchImageMinimumOSVersion&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;key&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;string&lt;/span&gt;&amp;gt;&lt;/span&gt;7.0&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;string&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;key&lt;/span&gt;&amp;gt;&lt;/span&gt;UILaunchImageSize&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;key&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;string&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;#123;320, 568&amp;#125;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;string&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;key&lt;/span&gt;&amp;gt;&lt;/span&gt;UILaunchImageOrientation&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;key&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;string&lt;/span&gt;&amp;gt;&lt;/span&gt;Portrait&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;string&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dict&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dict&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;key&lt;/span&gt;&amp;gt;&lt;/span&gt;UILaunchImageName&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;key&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;string&lt;/span&gt;&amp;gt;&lt;/span&gt;LaunchImage-667h&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;string&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;key&lt;/span&gt;&amp;gt;&lt;/span&gt;UILaunchImageMinimumOSVersion&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;key&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;string&lt;/span&gt;&amp;gt;&lt;/span&gt;8.0&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;string&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;key&lt;/span&gt;&amp;gt;&lt;/span&gt;UILaunchImageSize&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;key&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;string&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;#123;375, 667&amp;#125;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;string&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;key&lt;/span&gt;&amp;gt;&lt;/span&gt;UILaunchImageOrientation&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;key&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;string&lt;/span&gt;&amp;gt;&lt;/span&gt;Portrait&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;string&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dict&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dict&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;key&lt;/span&gt;&amp;gt;&lt;/span&gt;UILaunchImageName&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;key&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;string&lt;/span&gt;&amp;gt;&lt;/span&gt;LaunchImage-736h&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;string&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;key&lt;/span&gt;&amp;gt;&lt;/span&gt;UILaunchImageMinimumOSVersion&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;key&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;string&lt;/span&gt;&amp;gt;&lt;/span&gt;8.0&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;string&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;key&lt;/span&gt;&amp;gt;&lt;/span&gt;UILaunchImageSize&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;key&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;string&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;#123;414, 736&amp;#125;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;string&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;key&lt;/span&gt;&amp;gt;&lt;/span&gt;UILaunchImageOrientation&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;key&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;string&lt;/span&gt;&amp;gt;&lt;/span&gt;Portrait&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;string&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dict&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;array&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;   &lt;img src=&quot;http://7xkc7a.com1.z0.glb.clouddn.com/LaunchImagesF9E4E70D-B3D3-46E6-ADCE-E789F50491B3.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;添加对应的启动页资源&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xkc7a.com1.z0.glb.clouddn.com/LaunchImages863C1341-C42D-47C3-9FC7-B0F85EE78DA7.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如此, 即可完成 启动页 多语言的适配, 不信你就试试呗~ &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://wanzao2.b0.upaiyun.com/system/pictures/270/original/%E5%BE%97%E7%91%9F10.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;PS: 这里, 说明一点。 启动页只会保留一份, 也就是说, 你第一次加载完以后, 切换了语言, 再重新打开App, 它的启动页不会跟着更新的。 这也符合苹果的用户交互指引。&lt;/p&gt;
&lt;p&gt;如果你想要动态修改启动页面图LaunchImage, 抱歉！&lt;strong&gt;根据苹果的用户交互指引,该页面是在程序加载时显示的,不建议动态修改.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;正确的做法一般都是用固定的图片做启动页面图,在启动页面结束之后做任何你想做的事.&lt;/p&gt;
&lt;p&gt;如果真想动态修改启动页面,启动页面是固定的名字,可以在程序执行之后强制把页面替换掉,不过这样APP可能会被拒.&lt;/p&gt;
&lt;p&gt;该怎么设置一个动态的启动图呢？在启动图结束的时候，用一个View来展示你的动图，记得placeHolder设置为和你的LaunchImage的图片一样就行，这样就可以做出类似的效果了&lt;/p&gt;
&lt;/blockquote&gt;
</content:encoded>
      
      <comments>http://http://colin1994.github.io/2016/03/12/iOS-welcome-page-multilingual/#disqus_thread</comments>
    </item>
    
    <item>
      <title>仿猎豹垃圾清理</title>
      <link>http://http://colin1994.github.io/2015/07/13/Imitation-Clean-Master/</link>
      <guid>http://http://colin1994.github.io/2015/07/13/Imitation-Clean-Master/</guid>
      <pubDate>Mon, 13 Jul 2015 02:14:52 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt;前几天无意打开猎豹内存大师, 发现它的垃圾清理很强大, 效果也不错, 闲着就研究了下。 不过.. 结果貌似和我想象的不太一样。怎么说呢, 听我下文一一分析。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;效果图:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xkc7a.com1.z0.glb.clouddn.com/imageliebao_0.PNG&quot;&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded>&lt;blockquote&gt;
&lt;p&gt;前几天无意打开猎豹内存大师, 发现它的垃圾清理很强大, 效果也不错, 闲着就研究了下。 不过.. 结果貌似和我想象的不太一样。怎么说呢, 听我下文一一分析。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;效果图:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xkc7a.com1.z0.glb.clouddn.com/imageliebao_0.PNG&quot;&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;&lt;img src=&quot;http://7xkc7a.com1.z0.glb.clouddn.com/imageliebao_1.PNG&quot;&gt;&lt;/p&gt;
&lt;p&gt;从效果图, 我们可以看出它有以下几个功能:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;获取设备上已安装的所有App&lt;/li&gt;
&lt;li&gt;获取App的信息, 包括图标和名称&lt;/li&gt;
&lt;li&gt;获取当前已用存储和可用存储&lt;/li&gt;
&lt;li&gt;扫描App动画效果&lt;/li&gt;
&lt;li&gt;清除所有App垃圾文件&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;看到这里, 你是不是也觉得很强大?&lt;/p&gt;
&lt;p&gt;然后然后, 感叹的同时, 我有几点疑惑。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;获取到所有已安装的App, 这个功能能通过审核?(我是去年在App Store上下载的这个App)&lt;/li&gt;
&lt;li&gt;App的图标如何获取到的? (因为扫描到的App包括我自己没上架的demo, icon只能是本地获取, 从其他App沙盒拿？)&lt;/li&gt;
&lt;li&gt;垃圾清理过程, 为什么会出现“存储容量已满”这个提示？ 明明是清理垃圾, 中途还会出现存储满的情况?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;困惑, 不解..~ 于是乎, 折腾呗。 花了两天时间。写了个小demo。&lt;/p&gt;
&lt;p&gt;效果如下:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.my.csdn.net/uploads/201505/28/1432801698_3530.gif&quot; width=&quot;400&quot;&gt;&lt;/p&gt;
&lt;p&gt;接下去, 我会介绍以下各个功能的实现过程, 包括:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;获取设备已安装App列表已经App信息&lt;/li&gt;
&lt;li&gt;扫描动画的实现&lt;/li&gt;
&lt;li&gt;获取已用存储和可用存储&lt;/li&gt;
&lt;li&gt;垃圾清理&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;不过, 分析之前, 说明以下, 该功能不能够上传到App Store上! 也就是说, 它通不过审核的。原因有二:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用了私有API&lt;/li&gt;
&lt;li&gt;苹果不允许App有处理内存相关功能&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;至于猎豹内存大师这个App、它也早已经被下架了。我怀疑它利用混淆代码通过的审核。至于功能的实现, 我觉得和猎豹的实现思路应该是一样的。&lt;/p&gt;
&lt;p&gt;至此, 如果你还对这篇文章感兴趣, 欢迎继续往下阅读。&lt;/p&gt;
&lt;p&gt;本文参考源码: &lt;a href=&quot;http://download.csdn.net/detail/hitwhylz/8748739&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CSDN下载_防猎豹垃圾清理&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;获取设备已安装App列表已经App信息&quot;&gt;获取设备已安装App列表已经App信息&lt;/h2&gt;&lt;h3 id=&quot;不越狱,_非私有API&quot;&gt;不越狱, 非私有API&lt;/h3&gt;&lt;p&gt;没有越狱的设备，官方没有提供api，所以只能用一些技巧，但是获取内容不全。&lt;/p&gt;
&lt;p&gt;这里主要有两种办法:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;方法一：利用URL scheme，看对于某一应用特有的url scheme，有没有响应。如果有响应，就说明安装了这个特定的app。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;说实在.. 这个办法比较傻。 App Store几百万的App, 如何枚举的过来? 并且, 也无法扫描到自己的demo。 不过, 还真有人这么干..&lt;/p&gt;
&lt;p&gt;这是对应的demo, 感兴趣可以看看。 &lt;a href=&quot;https://github.com/danielamitay/iHasApp&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iHasApp&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://developer.apple.com/library/ios/#featuredarticles/iPhoneURLScheme_Reference/Introduction/Introduction.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官方教程: iPhoneURLScheme_Reference&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;方法二：利用一些方法获得当前正在运行的进程信息，从进程信息中获得安装的app信息。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://forrst.com/posts/UIDevice_Category_For_Processes-h1H&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;参考: UIDevice_Category_For_Processes&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;总的来说, 不越狱, 非私有API, 想获得完整列表, 基本没什么可能。&lt;/p&gt;
&lt;h3 id=&quot;不越狱,_私有API。&quot;&gt;不越狱, 私有API。&lt;/h3&gt;&lt;p&gt;这里就是我demo所采用的办法, 比较简单。&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#include &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;objc/runtime.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Class LSApplicationWorkspace_class = objc_getClass(&lt;span class=&quot;string&quot;&gt;&quot;LSApplicationWorkspace&quot;&lt;/span&gt;);  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSObject&lt;/span&gt;* workspace = [LSApplicationWorkspace_class performSelector:&lt;span class=&quot;keyword&quot;&gt;@selector&lt;/span&gt;(defaultWorkspace)];  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;apps: %@&quot;&lt;/span&gt;, [workspace performSelector:&lt;span class=&quot;keyword&quot;&gt;@selector&lt;/span&gt;(allApplications)]);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;返回结果&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;LSApplicationProxy: com.qunar.iphoneclient8&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;string&quot;&gt;&quot;LSApplicationProxy: com.apple.mobilemail&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;string&quot;&gt;&quot;LSApplicationProxy: com.apple.mobilenotes&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;string&quot;&gt;&quot;LSApplicationProxy: com.apple.compass&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;string&quot;&gt;&quot;LSApplicationProxy: com.tencent.happymj&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;string&quot;&gt;&quot;LSApplicationProxy: com.apple.mobilesafari&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;string&quot;&gt;&quot;LSApplicationProxy: com.apple.reminders&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;返回的是个数据, 每个元素都是&lt;code&gt;LSApplicationProxy&lt;/code&gt;.它的description只返回了 它的bundle id。然而这并不是我们想要的。&lt;/p&gt;
&lt;p&gt;接下去我们看&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://searchcode.com/codesearch/view/15673930/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;LSApplicationProxy.h&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;形如:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;LSApplicationProxy&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;NSArray&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;NSDictionary&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;NSProgress&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;NSString&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;NSURL&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;NSUUID&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;LSApplicationProxy&lt;/span&gt; : &lt;span class=&quot;title&quot;&gt;LSResourceProxy&lt;/span&gt; &amp;lt;&lt;span class=&quot;title&quot;&gt;NSSecureCoding&lt;/span&gt;&amp;gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSArray&lt;/span&gt; *_&lt;span class=&quot;built_in&quot;&gt;UIBackgroundModes&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *_applicationType;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSArray&lt;/span&gt; *_audioComponents;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; _bundleFlags;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSURL&lt;/span&gt; *_bundleURL;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *_bundleVersion;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSArray&lt;/span&gt; *_directionsModes;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSDictionary&lt;/span&gt; *_entitlements;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSDictionary&lt;/span&gt; *_envi&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里列举了&lt;code&gt;LSApplicationProxy&lt;/code&gt;对应的属性和方法。&lt;/p&gt;
&lt;p&gt;我们可以用如下代码, 打印下每个属性的值, 找出我们想要的。&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;、&lt;span class=&quot;comment&quot;&gt;/* 获取对象的所有属性 以及属性值 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;NSDictionary&lt;/span&gt; *)properties_aps&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt;NSMutableDictionary&lt;/span&gt; *props = [&lt;span class=&quot;built_in&quot;&gt;NSMutableDictionary&lt;/span&gt; dictionary];   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; outCount, i;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   objc_property_t *properties = class_copyPropertyList([&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; class], &amp;amp;outCount);   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i&amp;lt;outCount; i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       objc_property_t property = properties[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;* char_f =property_getName(property);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *propertyName = [&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; stringWithUTF8String:char_f];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; propertyValue = [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; valueForKey:(&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *)propertyName];   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (propertyValue) [props setObject:propertyValue forKey:propertyName];   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   free(properties);   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; props;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;参考: &lt;a href=&quot;http://blog.csdn.net/crazychickone/article/details/36413671&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;IOS 遍历未知对象的属性和方法&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;然后我们提取出我们需要的, 图标和应用名。&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[appsInfoArr enumerateObjectsUsingBlock:^(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; obj, &lt;span class=&quot;built_in&quot;&gt;NSUInteger&lt;/span&gt; idx, &lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt; *stop)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;NSDictionary&lt;/span&gt; *boundIconsDictionary = [obj performSelector:&lt;span class=&quot;keyword&quot;&gt;@selector&lt;/span&gt;(boundIconsDictionary)];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *iconPath = [&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; stringWithFormat:&lt;span class=&quot;string&quot;&gt;@&quot;%@/%@.png&quot;&lt;/span&gt;, [[obj performSelector:&lt;span class=&quot;keyword&quot;&gt;@selector&lt;/span&gt;(resourcesDirectoryURL)] path], [[[boundIconsDictionary objectForKey:&lt;span class=&quot;string&quot;&gt;@&quot;CFBundlePrimaryIcon&quot;&lt;/span&gt;] objectForKey:&lt;span class=&quot;string&quot;&gt;@&quot;CFBundleIconFiles&quot;&lt;/span&gt;]lastObject]];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;             &lt;span class=&quot;built_in&quot;&gt;UIImage&lt;/span&gt; *image = [[[&lt;span class=&quot;built_in&quot;&gt;UIImage&lt;/span&gt; alloc]initWithContentsOfFile:iconPath] TransformtoSize:&lt;span class=&quot;built_in&quot;&gt;CGSizeMake&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;65&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;65&lt;/span&gt;)];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (image)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.appsIconArr addObject:image];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.appsNameArr addObject:[obj performSelector:&lt;span class=&quot;keyword&quot;&gt;@selector&lt;/span&gt;(localizedName)]];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如此, &lt;code&gt;_self.appsIconArr&lt;/code&gt; 和 &lt;code&gt;_appsNameArr&lt;/code&gt;中存储的就是我们需要的App数据了。&lt;/p&gt;
&lt;h3 id=&quot;越狱&quot;&gt;越狱&lt;/h3&gt;&lt;p&gt;.. 这里我也不懂, 也没去研究。 感兴趣的可以看看 &lt;code&gt;MobileInstallation.framework&lt;/code&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;扫描动画的实现&quot;&gt;扫描动画的实现&lt;/h2&gt;&lt;p&gt;这里主要有两个动画。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;利用UIScrollView, 实现每个App自动滚动。&lt;/li&gt;
&lt;li&gt;Animation动画, 中间扫描线的往返运动。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;至于动画, 这里我不想介绍太多。 源码里面都写清楚了。(当然, 写的比较粗糙…)&lt;/p&gt;
&lt;p&gt;简单带一下扫描线的动画实现:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* 向左移动 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;CABasicAnimation&lt;/span&gt; *animationLeft = [&lt;span class=&quot;built_in&quot;&gt;CABasicAnimation&lt;/span&gt; animationWithKeyPath:&lt;span class=&quot;string&quot;&gt;@&quot;transform.translation.x&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 动画选项的设定&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    animationLeft.duration = &lt;span class=&quot;number&quot;&gt;0.5&lt;/span&gt;f; &lt;span class=&quot;comment&quot;&gt;// 持续时间&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    animationLeft.beginTime = &lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt;f;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    animationLeft.autoreverses = &lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// 结束后执行逆动画&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 动画先加速后减速&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    animationLeft.timingFunction =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;built_in&quot;&gt;CAMediaTimingFunction&lt;/span&gt; functionWithName: k&lt;span class=&quot;built_in&quot;&gt;CAMediaTimingFunctionEaseInEaseOut&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 终了帧&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    animationLeft.toValue = [&lt;span class=&quot;built_in&quot;&gt;NSNumber&lt;/span&gt; numberWithFloat:&lt;span class=&quot;number&quot;&gt;-40&lt;/span&gt;];;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/* 向右移动 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;CABasicAnimation&lt;/span&gt; *animationRight = [&lt;span class=&quot;built_in&quot;&gt;CABasicAnimation&lt;/span&gt; animationWithKeyPath:&lt;span class=&quot;string&quot;&gt;@&quot;transform.translation.x&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 动画选项的设定&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    animationRight.duration = &lt;span class=&quot;number&quot;&gt;0.5&lt;/span&gt;f; &lt;span class=&quot;comment&quot;&gt;// 持续时间&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    animationRight.beginTime = &lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt;f;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    animationRight.autoreverses = &lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// 结束后执行逆动画&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 动画先加速后减速&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    animationRight.timingFunction =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;built_in&quot;&gt;CAMediaTimingFunction&lt;/span&gt; functionWithName: k&lt;span class=&quot;built_in&quot;&gt;CAMediaTimingFunctionEaseInEaseOut&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 终了帧&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    animationRight.toValue = [&lt;span class=&quot;built_in&quot;&gt;NSNumber&lt;/span&gt; numberWithFloat:&lt;span class=&quot;number&quot;&gt;40&lt;/span&gt;];;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/* 动画组 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;CAAnimationGroup&lt;/span&gt; *group = [&lt;span class=&quot;built_in&quot;&gt;CAAnimationGroup&lt;/span&gt; animation];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    group.delegate = &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    group.duration = &lt;span class=&quot;number&quot;&gt;2.0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    group.repeatCount = &lt;span class=&quot;number&quot;&gt;15&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 动画结束后不变回初始状态&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    group.removedOnCompletion = &lt;span class=&quot;literal&quot;&gt;NO&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    group.fillMode = k&lt;span class=&quot;built_in&quot;&gt;CAFillModeForwards&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 添加动画&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    group.animations = [&lt;span class=&quot;built_in&quot;&gt;NSArray&lt;/span&gt; arrayWithObjects:animationLeft, animationRight, &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [mySL.layer addAnimation:group forKey:&lt;span class=&quot;string&quot;&gt;@&quot;moveLeft-moveRight-layer&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;h2 id=&quot;获取已用存储和可用存储&quot;&gt;获取已用存储和可用存储&lt;/h2&gt;&lt;p&gt;这个没什么好说的了.. Apple提供了API, 直接用就是了。&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 获取占用内存&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)usedSpaceAndfreeSpace&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt;* path = [&lt;span class=&quot;built_in&quot;&gt;NSSearchPathForDirectoriesInDomains&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;NSDocumentDirectory&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;NSUserDomainMask&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;) objectAtIndex:&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] ;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSFileManager&lt;/span&gt;* fileManager = [[&lt;span class=&quot;built_in&quot;&gt;NSFileManager&lt;/span&gt; alloc ]init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSDictionary&lt;/span&gt; *fileSysAttributes = [fileManager attributesOfFileSystemForPath:path error:&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSNumber&lt;/span&gt; *freeSpace = [fileSysAttributes objectForKey:&lt;span class=&quot;built_in&quot;&gt;NSFileSystemFreeSize&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSNumber&lt;/span&gt; *totalSpace = [fileSysAttributes objectForKey:&lt;span class=&quot;built_in&quot;&gt;NSFileSystemSize&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt;  * str= [&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; stringWithFormat:&lt;span class=&quot;string&quot;&gt;@&quot;已占用%0.1f G / 剩余%0.1f MB&quot;&lt;/span&gt;,([totalSpace longLongValue] - [freeSpace longLongValue])/&lt;span class=&quot;number&quot;&gt;1024.0&lt;/span&gt;/&lt;span class=&quot;number&quot;&gt;1024.0&lt;/span&gt;/&lt;span class=&quot;number&quot;&gt;1024.0&lt;/span&gt;,[freeSpace longLongValue]/&lt;span class=&quot;number&quot;&gt;1024.0&lt;/span&gt;/&lt;span class=&quot;number&quot;&gt;1024.0&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;--------%@&quot;&lt;/span&gt;,str);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;垃圾清理&quot;&gt;垃圾清理&lt;/h2&gt;&lt;p&gt;这里我本来是不想提的，毕竟这个功能，苹果是不能接受的。&lt;/p&gt;
&lt;p&gt;之前提到了, 猎豹在清理过程中, 会出现“存储已满的提示”。然后我开始考虑了。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;为什么要弹出提示？&lt;/li&gt;
&lt;li&gt;存储真的在某一刻满了吗？&lt;/li&gt;
&lt;li&gt;它清理的时候, QQ直接被杀死, 应用名变成”正在清理…”（和安装中一个状态）。 真有这么厉害? !!!!!!&lt;/li&gt;
&lt;li&gt;这个好像在哪里见过…&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;最后, 我确定了猎豹的实现方式。它只不过是触发了Apple自己的垃圾回收机制而已。&lt;/p&gt;
&lt;p&gt;当存储满的时候, 系统会自动帮我们进行垃圾清理, 并弹出提示说明存储已满。&lt;/p&gt;
&lt;p&gt;所以, 猎豹只不过是计算了剩余多少存储, 然后制造了一个与之差不多大小的垃圾文件。 然后触发苹果的清理机制。清理完后, 删除之前生成的垃圾文件。再次统计当前可用存储, 差值即为本次清理的垃圾大小。 &lt;/p&gt;
&lt;p&gt;是吧, 其实也没那么神~&lt;/p&gt;
&lt;p&gt;至于如何快速制造几百M, 甚至几G的垃圾文件? &lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 将文件的长度设定为offset &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; -(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)truncateFileAtOffset:offset&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;truncateFileAtOffset:offset&lt;/code&gt;就能搞定了。 感兴趣的可以自己研究下。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;至此, 猎豹垃圾清理分析完毕。&lt;/p&gt;
&lt;p&gt;当然, 这只是我个人的看法。如果有更好的方式, 或者文章中存在任何错误。 欢迎交流指正。&lt;/p&gt;
</content:encoded>
      
      <comments>http://http://colin1994.github.io/2015/07/13/Imitation-Clean-Master/#disqus_thread</comments>
    </item>
    
    <item>
      <title>TODO宏实现</title>
      <link>http://http://colin1994.github.io/2015/07/12/TODO-Macro/</link>
      <guid>http://http://colin1994.github.io/2015/07/12/TODO-Macro/</guid>
      <pubDate>Sun, 12 Jul 2015 02:14:52 GMT</pubDate>
      <description>
      
        &lt;h1 id=&quot;代码备忘,_TODO宏实现&quot;&gt;代码备忘, TODO宏实现&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;我们平时在开发过程中, 往往并不是憋足气一股脑敲完全部代码。每个模块, 每个函数的实现总有个先后顺序。又或者哪个部分需要做调整, 修改… 所以, 我们需要有一个东西, 来提醒我们, 起到代码备忘功能, 避免某个功能忘记实现, 也能让我们快速定位。 所以这篇文章, 就是要实现一个TODO宏, 来达到代码备忘功能。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;效果如下:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.my.csdn.net/uploads/201503/15/1426387345_9339.jpeg&quot; width=&quot;500&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.my.csdn.net/uploads/201503/15/1426387346_3643.jpeg&quot; width=&quot;500&quot;/&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded>&lt;h1 id=&quot;代码备忘,_TODO宏实现&quot;&gt;代码备忘, TODO宏实现&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;我们平时在开发过程中, 往往并不是憋足气一股脑敲完全部代码。每个模块, 每个函数的实现总有个先后顺序。又或者哪个部分需要做调整, 修改… 所以, 我们需要有一个东西, 来提醒我们, 起到代码备忘功能, 避免某个功能忘记实现, 也能让我们快速定位。 所以这篇文章, 就是要实现一个TODO宏, 来达到代码备忘功能。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;效果如下:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.my.csdn.net/uploads/201503/15/1426387345_9339.jpeg&quot; width=&quot;500&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.my.csdn.net/uploads/201503/15/1426387346_3643.jpeg&quot; width=&quot;500&quot;&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;下面来分析下如何实现这个宏&quot;&gt;&lt;strong&gt;下面来分析下如何实现这个宏&lt;/strong&gt;&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;在实现TODO之前, 已经自带了几个预处理指令来实现报警/报错:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#warning Colin&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#error Colin&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#pragma message &lt;span class=&quot;meta-string&quot;&gt;&quot;Colin&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#pragma GCC warning &lt;span class=&quot;meta-string&quot;&gt;&quot;Colin&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#pragma GCC error &lt;span class=&quot;meta-string&quot;&gt;&quot;Colin&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;效果如下:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.my.csdn.net/uploads/201503/15/1426387346_8391.jpeg&quot; width=&quot;500&quot;&gt;&lt;/p&gt;
&lt;p&gt;既然有了, 那为什么还需要自己实现这个TODO宏呢?&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;error 和 warning所代表的意义已经深入猿心, 我们没有理由使用它来做备忘。&lt;/li&gt;
&lt;li&gt;如果也使用warning, 在警告导航栏中, 我们很难区分哪个才是我们手动打的标记, 哪个是程序本身的warning&lt;/li&gt;
&lt;li&gt;带#的预处理指令是无法被#define的, 也就是没办法直接利用这个来定义我们的TODO&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;好在C99提供了一个 &lt;strong&gt;_Pragma&lt;/strong&gt; 运算符可以把部分#pragma指令字符串化, 如下:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#pragma message &lt;span class=&quot;meta-string&quot;&gt;&quot;Colin&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 等价于&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;_Pragma(&lt;span class=&quot;string&quot;&gt;&quot;message \&quot;Colin\&quot;&quot;&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// 需要注意双引号的转义&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 或&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;_Pragma(&lt;span class=&quot;string&quot;&gt;&quot;message(\&quot;Colin\&quot;)&quot;&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// 需要注意双引号的转义&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;利用这个特性，我们就可以将warning定义成宏:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#define MY_WARNING _Pragma(&lt;span class=&quot;meta-string&quot;&gt;&quot;message (\&quot;&lt;/span&gt;警察临检, 男左女右!\&lt;span class=&quot;meta-string&quot;&gt;&quot;)&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)viewDidLoad &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; viewDidLoad];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Do any additional setup after loading the view, typically from a nib.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    MY_WARNING&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;效果如下:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.my.csdn.net/uploads/201503/15/1426387346_6563.jpeg&quot; width=&quot;500&quot;&gt;&lt;/p&gt;
&lt;p&gt;到这里, 大体有那么一个感觉。 不过我们提示的内容, 是define的, 也就是写死固定的, 不太合适。&lt;/p&gt;
&lt;p&gt;所以我们希望这个宏能接受入参, 让它正常显示到warning中。&lt;/p&gt;
&lt;p&gt;这就涉及了一些宏的基本用法。&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#define STRINGIFY(S) #S&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#define PRAGMA_MESSAGE(MSG) _Pragma(STRINGIFY(message(MSG)))&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;STRINGIFY(S) 将入参转化成字符串，省去了_Pragma中全串加转义字符的困扰。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;效果如下:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.my.csdn.net/uploads/201503/15/1426387347_2653.jpeg&quot; width=&quot;500&quot;&gt;&lt;/p&gt;
&lt;p&gt;这时，一个基本功能的TODO宏就完成了，下面向其中加入额外的信息：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 两个已有的宏&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#define STRINGIFY(S) #S&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#define PRAGMA_MESSAGE(MSG) _Pragma(STRINGIFY(message(MSG)))&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 延迟1次展开的宏&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#define DEFER_STRINGIFY(S) STRINGIFY(S)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 下面的宏在第一行用`\`折行&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#define FORMATTED_MESSAGE(MSG) &lt;span class=&quot;meta-string&quot;&gt;&quot;[TODO-&quot;&lt;/span&gt; DEFER_STRINGIFY(__COUNTER__) &lt;span class=&quot;meta-string&quot;&gt;&quot;] &quot;&lt;/span&gt; MSG &lt;span class=&quot;meta-string&quot;&gt;&quot; \n&quot;&lt;/span&gt;  \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    DEFER_STRINGIFY(__FILE__) &lt;span class=&quot;string&quot;&gt;&quot; line &quot;&lt;/span&gt; DEFER_STRINGIFY(__LINE__)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其中涉及到的知识：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;两个常量字符串可以拼接成一个整串 “123””456” =&amp;gt; “123456”&lt;/li&gt;
&lt;li&gt;使用到3个预定义宏，&lt;strong&gt;COUNTER&lt;/strong&gt;宏展开次数的计数器，全局唯一；&lt;strong&gt;FILE&lt;/strong&gt;当前文件完整目录字符串；&lt;strong&gt;LINE&lt;/strong&gt;在当前文件第几行&lt;/li&gt;
&lt;li&gt;在字符串中预定义宏应延时展开，如果将上面的DEFER&lt;em&gt;STRINGIFY换成STRINGIFY的话，如&lt;strong&gt;LINE&lt;/strong&gt;不能被正确展开成行数，而是成了一个常量字符串”&lt;em&gt;_LINE&lt;/em&gt;&lt;/em&gt;“&lt;/li&gt;
&lt;li&gt;为了美化，warning message中可以使用\n换行&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;于是，使用FORMATTED_MESSAGE(MSG)宏就可以将带文件路径、序号、行数等信息加入到最终的warning中。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;其实到这步已经OK了，为了让这个宏更加抢眼，还可以借鉴RAC，把宏定义成前面加@的形式：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#define KEYWORDIFY try &amp;#123;&amp;#125; @catch (...) &amp;#123;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;h2 id=&quot;最终版本&quot;&gt;&lt;strong&gt;最终版本&lt;/strong&gt;&lt;/h2&gt;&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 转成字符串&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#define STRINGIFY(S) #S&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 需要解两次才解开的宏&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#define DEFER_STRINGIFY(S) STRINGIFY(S)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#define PRAGMA_MESSAGE(MSG) _Pragma(STRINGIFY(message(MSG)))&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 为warning增加更多信息&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#define FORMATTED_MESSAGE(MSG) &lt;span class=&quot;meta-string&quot;&gt;&quot;[TODO-&quot;&lt;/span&gt; DEFER_STRINGIFY(__COUNTER__) &lt;span class=&quot;meta-string&quot;&gt;&quot;] &quot;&lt;/span&gt; MSG &lt;span class=&quot;meta-string&quot;&gt;&quot; \n&quot;&lt;/span&gt; DEFER_STRINGIFY(__FILE__) &lt;span class=&quot;meta-string&quot;&gt;&quot; line &quot;&lt;/span&gt; DEFER_STRINGIFY(__LINE__)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 使宏前面可以加@&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#define KEYWORDIFY try &amp;#123;&amp;#125; @catch (...) &amp;#123;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 最终使用的宏&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#define TODO(MSG) KEYWORDIFY PRAGMA_MESSAGE(FORMATTED_MESSAGE(MSG))&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;References&quot;&gt;References&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://blog.sunnyxx.com/2015/03/01/todo-macro/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.sunnyxx.com/2015/03/01/todo-macro/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://clang.llvm.org/docs/UsersManual.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://clang.llvm.org/docs/UsersManual.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/cpp/Pragmas.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://gcc.gnu.org/onlinedocs/cpp/Pragmas.html&lt;/a&gt;&lt;/p&gt;
</content:encoded>
      
      <comments>http://http://colin1994.github.io/2015/07/12/TODO-Macro/#disqus_thread</comments>
    </item>
    
    <item>
      <title>正则表达式</title>
      <link>http://http://colin1994.github.io/2015/07/11/Regular-Expressions/</link>
      <guid>http://http://colin1994.github.io/2015/07/11/Regular-Expressions/</guid>
      <pubDate>Sat, 11 Jul 2015 02:14:52 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt;正则表达式，又称正规表示法、常规表示法（英语：Regular Expression，在代码中常简写为regex、regexp或RE），计算机科学的一个概念。正则表达式使用单个字符串来描述、匹配一系列符合某个句法规则的字符串。在很多文本编辑器里，正则表达式通常被用来检索、替换那些符合某个模式的文本。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;系统自带的, 如: NSPredicate, rangeOfString：option, NSRegularExpression&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://regexkit.sourceforge.net/RegexKitLite/&quot;&gt;RegexKitLite&lt;/a&gt; RegexKitLite 是一个轻量级的 Objective-C 的正则表达式库,支持 Mac OS X 和 iOS,使用 ICU 库开发。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;至于&lt;code&gt;RegexKitLite&lt;/code&gt;, 这里不做介绍。着重介绍系统自带的那几个办法。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;PS: 阅读本文前提是您已经掌握了正则基本语法, 如果对正则还不太了解, 可以参考以下几个链接:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;正则表达式学习链接：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://doslin.com/regular%20expressions/2014/03/11/learn-regular-expressions-in-about-55-minutes.html&quot;&gt;55分钟学会正则表达式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.regexlab.com/zh/regref.htm&quot;&gt;揭开正则表达式的神秘面纱&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.regexplib.com/DisplayPatterns.aspx?cattabindex=4&amp;amp;categoryId=5&quot;&gt;RegExLib.com(正则表达式库查询)&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
      
      </description>
      
      <content:encoded>&lt;blockquote&gt;
&lt;p&gt;正则表达式，又称正规表示法、常规表示法（英语：Regular Expression，在代码中常简写为regex、regexp或RE），计算机科学的一个概念。正则表达式使用单个字符串来描述、匹配一系列符合某个句法规则的字符串。在很多文本编辑器里，正则表达式通常被用来检索、替换那些符合某个模式的文本。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;系统自带的, 如: NSPredicate, rangeOfString：option, NSRegularExpression&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://regexkit.sourceforge.net/RegexKitLite/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;RegexKitLite&lt;/a&gt; RegexKitLite 是一个轻量级的 Objective-C 的正则表达式库,支持 Mac OS X 和 iOS,使用 ICU 库开发。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;至于&lt;code&gt;RegexKitLite&lt;/code&gt;, 这里不做介绍。着重介绍系统自带的那几个办法。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;PS: 阅读本文前提是您已经掌握了正则基本语法, 如果对正则还不太了解, 可以参考以下几个链接:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;正则表达式学习链接：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://doslin.com/regular%20expressions/2014/03/11/learn-regular-expressions-in-about-55-minutes.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;55分钟学会正则表达式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.regexlab.com/zh/regref.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;揭开正则表达式的神秘面纱&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.regexplib.com/DisplayPatterns.aspx?cattabindex=4&amp;amp;categoryId=5&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;RegExLib.com(正则表达式库查询)&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;1-_NSPredicate&quot;&gt;1. NSPredicate&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;简述：Cocoa框架中的NSPredicate用于查询，原理和用法都类似于SQL中的where，作用相当于数据库的过滤取。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSPredicate&lt;/span&gt; *predicate = [&lt;span class=&quot;built_in&quot;&gt;NSPredicate&lt;/span&gt; predicateWithFormat:(&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *), ...];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其中, 常见的&lt;code&gt;Format&lt;/code&gt;有:&lt;/p&gt;
&lt;p&gt;(1) 比较运算符: &amp;gt;, &amp;lt;, ==, &amp;gt;=, &amp;lt;=, !=&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;例：@&amp;quot;number &amp;gt; 100&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;(2) 范围运算符: IN, BETWEEN&lt;/p&gt;
&lt;p&gt;​    &lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;例：@&amp;quot;number BETWEEN &amp;#123;1,5&amp;#125;&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   @&amp;quot;address IN &amp;#123;&amp;apos;shanghai&amp;apos;,&amp;apos;beijing&amp;apos;&amp;#125;&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;(3) 字符串本身: SELF &lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;例：@“SELF == ‘APPLE’&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;(4) 字符串相关: BEGINSWITH, ENDSWITH, CONTAINS&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;例：@&amp;quot;name CONTAINS[cd] &amp;apos;ang&amp;apos;&amp;quot;  //包含某个字符串&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   @&amp;quot;name BEGINSWITH[c] &amp;apos;sh&amp;apos;&amp;quot;  //以某个字符串开头&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   @&amp;quot;name ENDSWITH[d] &amp;apos;ang&amp;apos;&amp;quot;   //以某个字符串结束&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;注:[c]不区分大小写&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   [d]不区分发音符号即没有重音符号&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   [cd]既不区分大小写，也不区分发音符号。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;(5) 通配符: LIKE&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;例：@&amp;quot;name LIKE[cd] &amp;apos;*er*&amp;apos;&amp;quot;    //*代表通配符,Like也接受[cd].&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   @&amp;quot;name LIKE[cd] &amp;apos;???er*&amp;apos;&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;(6) 正则表达式: MATCHES&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;例：NSString *regex = @&amp;quot;^A.+e$&amp;quot;;   //以A开头，e结尾&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  @&amp;quot;name MATCHES %@&amp;quot;,regex&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;至于如何使用呢? 下面举几个例子:&lt;/p&gt;
&lt;p&gt;(a) 对NSArray进行过滤, 帅选出包含”ang”的项&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSArray&lt;/span&gt; *array = [[&lt;span class=&quot;built_in&quot;&gt;NSArray&lt;/span&gt; alloc]initWithObjects:&lt;span class=&quot;string&quot;&gt;@&quot;beijing&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;@&quot;shanghai&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;@&quot;guangzou&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;@&quot;wuhan&quot;&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *string = &lt;span class=&quot;string&quot;&gt;@&quot;ang&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSPredicate&lt;/span&gt; *pred = [&lt;span class=&quot;built_in&quot;&gt;NSPredicate&lt;/span&gt; predicateWithFormat:&lt;span class=&quot;string&quot;&gt;@&quot;SELF CONTAINS %@&quot;&lt;/span&gt;, string];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;%@&quot;&lt;/span&gt;, [array filteredArrayUsingPredicate:pred]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//    打印结果:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//    (&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//     shanghai,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//     guangzou&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//    )&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;(b) 对NSDate进行筛选&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//日期在十天之内:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSDate&lt;/span&gt; *endDate = [&lt;span class=&quot;built_in&quot;&gt;NSDate&lt;/span&gt; date];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSTimeInterval&lt;/span&gt; timeInterval= [endDate timeIntervalSinceReferenceDate];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;timeInterval -=&lt;span class=&quot;number&quot;&gt;3600&lt;/span&gt;*&lt;span class=&quot;number&quot;&gt;24&lt;/span&gt;*&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSDate&lt;/span&gt; *beginDate = [&lt;span class=&quot;built_in&quot;&gt;NSDate&lt;/span&gt; dateWithTimeIntervalSinceReferenceDate:timeInterval];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//对coredata进行筛选(假设有fetchRequest)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSPredicate&lt;/span&gt; *predicate_date = [&lt;span class=&quot;built_in&quot;&gt;NSPredicate&lt;/span&gt; predicateWithFormat:&lt;span class=&quot;string&quot;&gt;@&quot;date &amp;gt;= %@ AND date &amp;lt;= %@&quot;&lt;/span&gt;, beginDate,endDate];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[fetchRequest setPredicate:predicate_date];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;OK, &lt;code&gt;NSPredicate&lt;/code&gt;的功能很多, 也很强大。这里暂时就点到此, 感兴趣的可以自己一一试验。 下面举两个例子说明一下如何使用正则。&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 判断是否是有效邮箱&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt;)isValidateEmail:(&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *)email&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *regex = &lt;span class=&quot;string&quot;&gt;@&quot;[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]&amp;#123;2,4&amp;#125;&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSPredicate&lt;/span&gt; *predicate = [&lt;span class=&quot;built_in&quot;&gt;NSPredicate&lt;/span&gt; predicateWithFormat:&lt;span class=&quot;string&quot;&gt;@&quot;SELF MATCHES %@&quot;&lt;/span&gt;, regex];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; [predicate evaluateWithObject:email];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 判断字符串首字母是否为字母&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt;)isStartedWithWord:(&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *)aString&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *regex = &lt;span class=&quot;string&quot;&gt;@&quot;[A-Za-z]+&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSPredicate&lt;/span&gt; *predicate = [&lt;span class=&quot;built_in&quot;&gt;NSPredicate&lt;/span&gt; predicateWithFormat:&lt;span class=&quot;string&quot;&gt;@&quot;SELF MATCHES %@&quot;&lt;/span&gt;, regex];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; [predicate evaluateWithObject:aString];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;h2 id=&quot;2-_利用rangeOfString：option：直接查找&quot;&gt;2. 利用rangeOfString：option：直接查找&lt;/h2&gt;&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *searchText = &lt;span class=&quot;string&quot;&gt;@&quot;// Do any additional setup after loading the view, typically from a nib.&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSRange&lt;/span&gt; range = [searchText rangeOfString:&lt;span class=&quot;string&quot;&gt;@&quot;(?:[^,])*\\.&quot;&lt;/span&gt; options:&lt;span class=&quot;built_in&quot;&gt;NSRegularExpressionSearch&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (range.location != &lt;span class=&quot;built_in&quot;&gt;NSNotFound&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;%@&quot;&lt;/span&gt;, [searchText substringWithRange:range]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//    打印结果:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//      typically from a nib.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;options中设定NSRegularExpressionSearch就是表示利用正则表达式匹配，会返回第一个匹配结果的位置。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1 id=&quot;3-_使用正则表达式类&quot;&gt;3. 使用正则表达式类&lt;/h1&gt;&lt;p&gt;详细了解:  &lt;a href=&quot;http://blog.csdn.net/crayondeng/article/details/16991579&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iOS 正则表达式 NSRegularExpression&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;上面那篇文章总结的很不错. 这里简单再举个例子:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *searchText = &lt;span class=&quot;string&quot;&gt;@&quot;// Do any additional setup after loading the view, typically from a nib.&quot;&lt;/span&gt;;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSError&lt;/span&gt; *error = &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSRegularExpression&lt;/span&gt; *regex = [&lt;span class=&quot;built_in&quot;&gt;NSRegularExpression&lt;/span&gt; regularExpressionWithPattern:&lt;span class=&quot;string&quot;&gt;@&quot;(?:[^,])*\\.&quot;&lt;/span&gt; options:&lt;span class=&quot;built_in&quot;&gt;NSRegularExpressionCaseInsensitive&lt;/span&gt; error:&amp;amp;error];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSTextCheckingResult&lt;/span&gt; *result = [regex firstMatchInString:searchText options:&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; range:&lt;span class=&quot;built_in&quot;&gt;NSMakeRange&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, [searchText length])];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (result) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;%@\n&quot;&lt;/span&gt;, [searchText substringWithRange:result.range]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//    打印结果:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//      typically from a nib.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;使用系统的正则表达式类（NSRegularExpression）会返回匹配的多个结果。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;针对以上3种方式, 做一个小小总结&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;第一种匹配需要学习NSPredicate的写法，需要查阅苹果相关技术文档；&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果只关心第一个匹配的结果，第二种匹配较为简洁；&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果需要匹配多个结果，同时匹配多次，第三种方式效率会更高。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;gt;&lt;/p&gt;
&lt;h2 id=&quot;常用正则表达式&quot;&gt;常用正则表达式&lt;/h2&gt;&lt;p&gt;参考:  &lt;a href=&quot;http://blog.csdn.net/chaoyuan899/article/details/38583759&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;IOS常用正则表达式&lt;/a&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;表达式&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;[\u4e00-\u9fa5]&lt;/td&gt;
&lt;td&gt;匹配中文字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[^\x00-\xff]&lt;/td&gt;
&lt;td&gt;匹配双字节字符(包括汉字在内)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\n\s*\r&lt;/td&gt;
&lt;td&gt;匹配空白行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;lt;(\S*?)[^&amp;gt;]*&amp;gt;.*?&amp;lt;/\1&amp;gt;\&lt;/td&gt;
&lt;td&gt;&amp;lt;.*? /&amp;gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;^\s*\&lt;/td&gt;
&lt;td&gt;\s*$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\w+([-+.]\w+)*@\w+([-.]\w+)*.\w+([-.]\w+)*&lt;/td&gt;
&lt;td&gt;匹配Email地&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[a-zA-z]+://[^\s]*&lt;/td&gt;
&lt;td&gt;匹配网址URL&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\d{3}-\d{8}\&lt;/td&gt;
&lt;td&gt;\d{4}-\d{7}&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[1-9]\d{5}(?!\d)&lt;/td&gt;
&lt;td&gt;匹配中国邮政编码&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\d+.\d+.\d+.\d+&lt;/td&gt;
&lt;td&gt;匹配ip地址&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</content:encoded>
      
      <comments>http://http://colin1994.github.io/2015/07/11/Regular-Expressions/#disqus_thread</comments>
    </item>
    
    <item>
      <title>阿里, 网易, 腾讯</title>
      <link>http://http://colin1994.github.io/2015/07/11/interview-summary/</link>
      <guid>http://http://colin1994.github.io/2015/07/11/interview-summary/</guid>
      <pubDate>Sat, 11 Jul 2015 02:14:52 GMT</pubDate>
      <description>
      
        &lt;h1 id=&quot;一个多月来的面试总结(阿里,_网易,_腾讯)&quot;&gt;一个多月来的面试总结(阿里, 网易, 腾讯)&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;想必关注我的朋友都发现了, 最近我发表原创文章的数量和质量大大不如以前了, 也不怎么活跃了。主要原因是现在大三了, 7月份就能离校实习了, 所以前段时间也在为找实习忙碌着。接下去应该就能恢复正常, 继续为大家分享一些iOS开发上的小技巧, 毕竟, 也算拿到了心仪的offer。&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded>&lt;h1 id=&quot;一个多月来的面试总结(阿里,_网易,_腾讯)&quot;&gt;一个多月来的面试总结(阿里, 网易, 腾讯)&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;想必关注我的朋友都发现了, 最近我发表原创文章的数量和质量大大不如以前了, 也不怎么活跃了。主要原因是现在大三了, 7月份就能离校实习了, 所以前段时间也在为找实习忙碌着。接下去应该就能恢复正常, 继续为大家分享一些iOS开发上的小技巧, 毕竟, 也算拿到了心仪的offer。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;&lt;strong&gt;接下去, 就围绕这一个多月来参加的几场面试, 做一个总结。 设计的公司主要包括阿里研发部分, 网易邮件, 腾讯微信。希望能给同样在为找实习努力的战友提供一些帮助。(&lt;code&gt;已经拿到网易和微信的offer&lt;/code&gt;)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;PS: 总结不是空穴来风, 每次面试完, 我都会坐着认真总结之前的面试, 记录每道题, 每个答案的关键点, 再比对下自己的回答是否完整。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.my.csdn.net/uploads/201504/25/1429944250_1723.jpeg&quot; width=&quot;900&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;另外, 博客篇幅有限, 并且题目并不是适合每一位同学(我是iOS开发相关, 题目主要都是iOS相关), 所以不适合把完整的题目都描述出来, 文章主要是一些经验交流。 &lt;code&gt;如果需要完整面试题目的, 麻烦留下邮箱, 我看到了会一一发送&lt;/code&gt;。&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;以下按参加的时间先后来描述, 另外我的个人主页 &lt;a href=&quot;http://colin1994.xyz&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Colin’s Nest&lt;/a&gt;, 里面有我的一些介绍, 包括简历。感兴趣的可以瞅瞅。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;阿里_研发部门&quot;&gt;阿里_研发部门&lt;/h1&gt;&lt;p&gt;阿里是最早投的一家公司, 3月初那会, 本来还在学习科二的, 然后在阿里的学长, 催着要简历, 说内推已经开始了。于是乎, 我就借机把科二给退了(被教练骂成狗的滋味真不好受, 还好及时跑了)。学长给内推的部门是和o2o相关, iOS开发。&lt;/p&gt;
&lt;h2 id=&quot;阿里一面_电话&quot;&gt;阿里一面_电话&lt;/h2&gt;&lt;p&gt;然后等了几天, &lt;code&gt;3月9号&lt;/code&gt;, 一面开始了, 节奏很快, 总共通话时候是&lt;code&gt;26分钟&lt;/code&gt;..&lt;/p&gt;
&lt;p&gt;电话来的比较突然, 那会还在看文章呢。一面过了, 但是具体表现并不是很理想。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;先是自我介绍。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;问iOS相关。 比如:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Category支持添加属性与成员变量吗&lt;/li&gt;
&lt;li&gt;iOS7之后, 蓝牙的围栏功能&lt;/li&gt;
&lt;li&gt;说说Cell重用原理&lt;br&gt;…&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;设计模式。这里主要问了iOS常用的设计模式, 以及如何应用到实际需求中去。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;MVC是否了解?介绍下使用情况。&lt;/li&gt;
&lt;li&gt;MVC里面, View怎么通知到Model&lt;/li&gt;
&lt;li&gt;了解delegate吗?并介绍&lt;/li&gt;
&lt;li&gt;如果现在要实现一个下载功能, 你要如何设计。说说每个类具体做什么&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;然后就是再交流, 对o2o有什么看法, 有没有想问他的…&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;阿里二面_电话&quot;&gt;阿里二面_电话&lt;/h2&gt;&lt;p&gt;然后又过了两天, 二面如约来了, 36分钟, 感觉比上次好, 不过结果…&lt;/p&gt;
&lt;p&gt;二面和一面一样, 都围绕iOS, 问了objc相关, 内存管理, 设计模式等。&lt;/p&gt;
&lt;p&gt;但是更多的, 询问了我平时的一些开发习惯, 以及一些设计题。&lt;/p&gt;
&lt;p&gt;比如:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果让你设计KVO, 要怎么设计&lt;/li&gt;
&lt;li&gt;现在你是如何适配的&lt;/li&gt;
&lt;li&gt;比较下storyboard和全代码&lt;/li&gt;
&lt;li&gt;如果有1w张图片要在屏幕滚动显示(每张图片满屏), 至少要几个cell, 如何实现循环滚动&lt;/li&gt;
&lt;li&gt;平时是怎么进行测试的, 内存方面怎么测试&lt;/li&gt;
&lt;li&gt;平时自己有没有封装过比较复杂的控件&lt;/li&gt;
&lt;li&gt;平时如何实现网络请求, 一般返回的数据是什么格式, 如何解析..&lt;/li&gt;
&lt;li&gt;如何实现类似 “Find My iPhone” 这样功能&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;二面相比一面来说, 准备的更充分了。回答问题上, 也比较积极, 考虑的也比较多。不过二面结束没多久, 内推状态就变成”待回绝”。 Over了…&lt;/p&gt;
&lt;p&gt;学长询问了面试官, 结果是: “整体还不错, 但总感觉少了点什么..”&lt;/p&gt;
&lt;p&gt;经历完阿里这一次, 总体来说, 对我打击还挺大的。毕竟, 第一次就跪了..  同时, 更多的是对自我的总结。&lt;/p&gt;
&lt;p&gt;首先应该是准备不够充分, 然后就是基础不够扎实。从面试官问的问题来看, &lt;code&gt;大公司还是对基础要求比较高&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&quot;阿里校招_在线笔试&quot;&gt;阿里校招_在线笔试&lt;/h2&gt;&lt;p&gt;之后, 又投了阿里校招, 参加了在线笔试。具体题目可以在这里看到:&lt;a href=&quot;http://www.nowcoder.com/companyCenterTerminal_134&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;阿里笔试题&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;虽然笔试通过了, 不过现场面试的时间和课程冲突了, 然后就没有跑去杭州面试。&lt;/p&gt;
&lt;p&gt;于是乎, 和阿里就这样不了了之了。&lt;/p&gt;
&lt;h1 id=&quot;网易_邮件部门(拿到offer)&quot;&gt;网易_邮件部门(拿到offer)&lt;/h1&gt;&lt;p&gt;在结束阿里内推没多久, 偶然在网上看到网易的一个招聘。 因为方式比较新颖, 就关注了下。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.my.csdn.net/uploads/201504/25/1429947172_7894.jpg&quot; width=&quot;900&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;答案就在门的背后！(至于如何解题欢迎大家交流)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;解开这个题目后, 拿到了面试官的邮箱.. 然后抱着侥幸的心理, 就投了。&lt;/p&gt;
&lt;h2 id=&quot;网易一面_电话&quot;&gt;网易一面_电话&lt;/h2&gt;&lt;p&gt;没想到, 第二天就来电话了。效率很高。 &lt;code&gt;55分钟&lt;/code&gt;.. 感觉被虐哭了。&lt;/p&gt;
&lt;p&gt;网易考核的主要是&lt;code&gt;objc, iOS, 设计模式, 算法&lt;/code&gt;。 &lt;/p&gt;
&lt;p&gt;主要如下:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;autorelease 和 @autoreleasepool区别&lt;/li&gt;
&lt;li&gt;unsafe_unretained , weak, assign 区别&lt;/li&gt;
&lt;li&gt;在block里面, 对数组执行添加操作, 这个数组需要声明成 __block吗&lt;/li&gt;
&lt;li&gt;在block里面, 对NSInteger进行修改, 这个NSInteger是否需要声明成__blcok&lt;/li&gt;
&lt;li&gt;NSThread, NSOperation, GCD区别&lt;/li&gt;
&lt;li&gt;runtime什么时候用&lt;/li&gt;
&lt;li&gt;通知和KVO区别&lt;/li&gt;
&lt;li&gt;深度遍历和广度遍历使用场景&lt;/li&gt;
&lt;li&gt;常用的设计模式&lt;/li&gt;
&lt;li&gt;算法题 * 2&lt;/li&gt;
&lt;li&gt;自己有什么优点&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;…&lt;/p&gt;
&lt;p&gt;面完之后, 感觉整个人都不好了。&lt;code&gt;内存管理&lt;/code&gt;部分, 都能说出那么一些, 但是一说多了, 就不知道怎么回答了。总体来说, 还是基础不够扎实。研究不够透彻。&lt;/p&gt;
&lt;p&gt;然后面试完, 一个很大的感受就是, &lt;code&gt;一次面试, 学到的, 比自己闷头看书一个月, 学到的还多&lt;/code&gt;。&lt;code&gt;面试很直观的反应出了自己的不足&lt;/code&gt;。于是乎, 针对内存管理, 多线程等知识上的不足。 我重新把那本狮子头的书认真看了遍。&lt;/p&gt;
&lt;p&gt;PS: 如果觉得这方面知识也有所欠缺的话, 可以到这里下载&lt;code&gt;Objective-C高级编程 iOS与OS X多线程和内存管理.pdf&lt;/code&gt;这本书, 极力推荐。&lt;/p&gt;
&lt;p&gt;下载链接: &lt;a href=&quot;http://pan.baidu.com/s/1pJsno7p&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;电子书分享&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本以为, 网易也就是这么结束了。 没想到过了几天, 人力资源部的妹子打电话来, 约去杭州面试。&lt;/p&gt;
&lt;p&gt;于是乎于是乎, 去杭州浪了~&lt;/p&gt;
&lt;h2 id=&quot;网易二面_现场&quot;&gt;网易二面_现场&lt;/h2&gt;&lt;p&gt;初到杭州, 很巧的是在机场大巴上碰到了一个去H3C培训的大叔, 更巧的是, 他也住我那个酒店。 然后就跟着他, 一路聊到酒店.. 挺好。&lt;/p&gt;
&lt;p&gt;第二天网易面试, 还是挺紧张的。9点多到了待客大厅, 填了表, 然后等面试官。然后网易给我的一个感觉就是, 很&lt;code&gt;内敛, 低调&lt;/code&gt;, 感觉挺好。&lt;/p&gt;
&lt;p&gt;之后一下来了两个面试官, 领我到单独的小隔间面试.. 一次两个, 有点虚。&lt;/p&gt;
&lt;p&gt;不过没多久, 就适应了这种气氛, 然后和面试官交流也比较开心。&lt;/p&gt;
&lt;p&gt;主要问题如下:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;我是上次和你通电话的那位, 你觉得自己上次表现怎么样&lt;/li&gt;
&lt;li&gt;这段时间, 都在干嘛&lt;/li&gt;
&lt;li&gt;我们认真看了你的github, 感觉还不错&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;然后给我一张纸, 问了几个算法题:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如何实现一个数组每个元素依次向右移动k位。(后头的往前面补) 比如: [1, 2, 3, 4, 5] 挪两位变成[4, 5, 1, 2, 3]&lt;/li&gt;
&lt;li&gt;实现连连看算法&lt;/li&gt;
&lt;li&gt;T9算法如何实现, 全拼算法&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;总的来说, 问的都是&lt;code&gt;算法&lt;/code&gt;相关, 没有再涉及iOS部分。 然后就算法来说, 回答的还不错。虽然每道题不是一步到位, 但是在与面试官沟通过程中, 最后都逐步完善了自己的算法。&lt;/p&gt;
&lt;p&gt;然后就是和面试官聊天了, 两位面试官都很平易近人, 聊得也比较开心。 然后就约了下午HR面。&lt;/p&gt;
&lt;p&gt;…面试完后, 包括面试官已经人力管理的妹子都邀请我去网易食堂吃饭, 不过毕竟腼腆, 我给拒绝了。出来才发现.. 找个饭店真不容易.. 早知道就厚着脸皮试试”丁家猪”了。&lt;/p&gt;
&lt;h2 id=&quot;网易HR面_现场&quot;&gt;网易HR面_现场&lt;/h2&gt;&lt;p&gt;下午HR面, HR是个很漂亮的妹子.. 整个过程都比较欢乐， 虽然一些问题上可能有不同看法。&lt;/p&gt;
&lt;p&gt;HR问的主要是一些职业规划, 抗压能力, 学习习惯, 别人怎么看待自己等等..&lt;/p&gt;
&lt;p&gt;面试完以后, HR问我接下去准备干嘛, 我说我要一路玩到萧山机场(那天酒店在萧山机场附近)。然后她打趣到:”真潇洒阿..”&lt;/p&gt;
&lt;p&gt;杭州确实很美, 不够时间关系, 就在西湖附近逛了会。 附带两张图片。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.my.csdn.net/uploads/201504/25/1429949156_7015.JPG&quot; width=&quot;900&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://img.my.csdn.net/uploads/201504/25/1429949125_2851.JPG&quot; width=&quot;900&quot;&gt;&lt;/p&gt;
&lt;p&gt;3.31参加完网易杭州的现场面试. 4月23号收到网易的正式offer。 总算, 踏实了…&lt;/p&gt;
&lt;h1 id=&quot;腾讯_微信事业部(拿到offer)&quot;&gt;腾讯_微信事业部(拿到offer)&lt;/h1&gt;&lt;p&gt;之前腾讯校招的时候, 投了简历。 不过一直到周围同学都参加了在线笔试, 我仍然没收到通知的时候, 我基本上已经放弃了。觉得自己应该在简历环节就被刷了, 比较凄凉..&lt;/p&gt;
&lt;h2 id=&quot;微信一面_电话&quot;&gt;微信一面_电话&lt;/h2&gt;&lt;p&gt;不过4月20的时候, 突然来了个电话, 对方说是腾讯微信事业部的。 很突然, 完全没想到。 可以说， 幸福来的太突然了..&lt;/p&gt;
&lt;p&gt;电话用时&lt;code&gt;1小时10分&lt;/code&gt;.. 中间把院长的课给翘了.. - -!&lt;/p&gt;
&lt;p&gt;主要还是围绕这几个方面: 项目, 设计模式, 算法..&lt;/p&gt;
&lt;p&gt;问题包括:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如何保证软件质量, 怎么分析Crash日志&lt;/li&gt;
&lt;li&gt;谈谈你觉得最重要的一个项目&lt;/li&gt;
&lt;li&gt;你的个人主页是怎么写的&lt;/li&gt;
&lt;li&gt;假如我是一名初学者, 你会向我推荐哪些第三方库&lt;/li&gt;
&lt;li&gt;使用了第三方库, 有看他们是怎么实现的吗&lt;/li&gt;
&lt;li&gt;有没有看过大型项目的源码&lt;/li&gt;
&lt;li&gt;强连通量算法&lt;/li&gt;
&lt;li&gt;最短路径算法&lt;/li&gt;
&lt;li&gt;排序算法&lt;/li&gt;
&lt;li&gt;25个人, 每5人1个跑道, 最少经过几次赛跑, 得到前3名&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;腾讯给我的感觉就是, 很靠谱。 &lt;code&gt;这几轮面试, 就腾讯当场就给出了结果, 不管是一面, 二面, 还是HR面 而不是说让你再等通知。 给我的感觉非常好&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;一面最后, 这个面试官就说, 他这里通过了, 问我明天什么时候有时间, 给我约下另外一个面试官。&lt;/p&gt;
&lt;h2 id=&quot;微信二面_collabedit+电话&quot;&gt;微信二面_collabedit+电话&lt;/h2&gt;&lt;p&gt;第二天微信二面如约来了, 面试官很好。提前打电话问我有没有时间, 我表示想午睡一会, 一个小时后开始。他答应了。&lt;/p&gt;
&lt;p&gt;然后一个小时后, 另外一个面试官打电话来了, 要我登录 &lt;a href=&quot;http://collabedit.com/xxxx&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://collabedit.com/xxxx&lt;/a&gt; 答题。&lt;/p&gt;
&lt;p&gt;collabedit可以在线共享。 就是说, 我这里敲什么, 面试官那里就能同步显示。 主要是考核编码能力。&lt;/p&gt;
&lt;p&gt;主要是两个算法题, 第一道要求写出完整代码, 第二道思路交流。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;求两个整数的最大公约数&lt;/li&gt;
&lt;li&gt;微信用户都是双向的好友，a是b的好友，那么b一定是a的。给定一个用户列表，有些用户是好友，有些不是，请判断，这些用户是否可以划分为两组，每组内的用 户，互相都不是好友。如果能，请给出这个划分。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;完了之后, 面试官问了我实习时间, 然后问我对深圳和广州的看法(因为我第一志愿填的是深圳, 微信本部在广州), 问我愿意去广州吗。 之后就表示他这里也通过了。 这一两天给我约HR。&lt;/p&gt;
&lt;h2 id=&quot;微信HR面_电话&quot;&gt;微信HR面_电话&lt;/h2&gt;&lt;p&gt;果然, 两天后, 微信HR来电话了。&lt;/p&gt;
&lt;p&gt;和她聊天很轻松, 从头到尾都是喊我’龙泽 .. 龙泽’, 感觉很亲切。 主要也是围绕职业规划等展开。&lt;/p&gt;
&lt;p&gt;然后最后就问我, 是否愿意来微信实习, 如果愿意, 马上就给我offer, 如果还犹豫, 考虑清楚再联系她。&lt;/p&gt;
&lt;p&gt;当然, 我表示愿意。 然后hr留了微信号, 说安排同事给我发确认函。&lt;/p&gt;
&lt;p&gt;当天晚上, 另外一个人力资源的妹子打电话, 和我讨论薪资等问题..&lt;/p&gt;
&lt;p&gt;总的来说, 微信从一面, 到最后确定下来, 就经历了4天。 非常效率。 中间也很愉快。&lt;/p&gt;
&lt;p&gt;说来也巧, 网易和微信是同时发来来的offer。网易电话刚放下没多久, 微信hr就来电话了。所以当时两边是先都允诺能去实习了，毕竟时间太紧, 还没考虑好。&lt;/p&gt;
&lt;p&gt;之后还是因为个人原因, 选择了微信, 所以当天下午就打电话给网易, 告知了他们。多少也有些遗憾, 毕竟网易也是我很向往的一家公司。&lt;/p&gt;
&lt;p&gt;好了。 到此, 这段时间的面试总结就写好了。下面就我个人来说, 提几点建议:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;基础。 不管是哪个方向, 基础很重要。就比如iOS, objc的方方面面都必须了解。&lt;/li&gt;
&lt;li&gt;全面。 有些东西, 虽然不见得能答好, 但你至少应该懂。&lt;/li&gt;
&lt;li&gt;设计模式。 主流的那些设计模式非常有必要了解。&lt;/li&gt;
&lt;li&gt;算法。 这个不是说恶补能补好的。建议大家长期积累。 另外推荐&amp;lt;剑指offer&amp;gt;这本书。同时, 可以在这里线上答题: &lt;a href=&quot;http://www.nowcoder.com/books/coding-interviews&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;牛客网-剑指offer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;简历一定要真实! 基本上面试官都是围绕简历展开交流的。 懂或不懂, 一问就知道, 没必要搬起石头砸自己的脚&lt;/li&gt;
&lt;li&gt;提前准备。 比如自我介绍, 项目介绍, 职业规划等等。基本都是必问的题目，能提前准备就提前准备好。&lt;/li&gt;
&lt;li&gt;开源, 分享, 积累。 我一直认为, 分享和开源是程序员进步的不二法门。 我建议每个程序员都应该有自己的Github, 有自己的博客。就这几次面试来说, 博客和Github帮了我多。 网易面试官直言, 他们认真看过我的Github, 微信HR问我要CSDN博客ID, 说她很感兴趣。帮助别人, 也是帮助自己。&lt;/li&gt;
&lt;li&gt;沟通。 有时候一个问题, 可能不懂, 甚至题目都不理解。不要害怕, 主动与面试官沟通。 我在网易面试的时候, 关于全拼算法的实现, 我当时连全拼都没一个完整的概念, 它要满足哪些条件更加不清楚。我跟面试官坦诚我不懂这个概念, 与他们的一步步沟通中实现了自己的算法。 所以沟通, 远比闷头写, 到头来还可能错误来的实在。&lt;/li&gt;
&lt;li&gt;自信。 能得到面试机会, 最起码证明, 你很优秀。 我觉得自信很重要。 如果一开始, 就表现的慌慌张张, 畏首畏尾, 那么不管是你自己的发挥, 还是面试官对你的看法, 我觉得都不会很好。 &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;敲了一下午.. 真累。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;希望和我一样大三找实习的朋友, 都能拿到自己心仪的offer!&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;学习的路上, 与君共勉。&lt;/strong&gt;&lt;/p&gt;
</content:encoded>
      
      <comments>http://http://colin1994.github.io/2015/07/11/interview-summary/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
